# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtEnd
# Parameters: (size = 1)

# Run progress: 0,00% complete, ETA 00:00:01
# Fork: 1 of 5
# Warmup Iteration   1: 927,300 us/op
Iteration   1: 31,200 us/op

# Run progress: 0,14% complete, ETA 00:03:06
# Fork: 2 of 5
# Warmup Iteration   1: 891,800 us/op
Iteration   1: 25,100 us/op

# Run progress: 0,28% complete, ETA 00:02:58
# Fork: 3 of 5
# Warmup Iteration   1: 902,700 us/op
Iteration   1: 3,800 us/op

# Run progress: 0,41% complete, ETA 00:02:54
# Fork: 4 of 5
# Warmup Iteration   1: 823,600 us/op
Iteration   1: 3,700 us/op

# Run progress: 0,55% complete, ETA 00:02:51
# Fork: 5 of 5
# Warmup Iteration   1: 977,300 us/op
Iteration   1: 29,900 us/op


Result "de.codecentric.fpl.Construct.appendAtEnd":
  N = 5
  mean =     18,740 ±(99.9%) 53,413 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 2 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 1 
    [27,500, 30,000) = 1 
    [30,000, 32,500) = 1 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      3,700 us/op
     p(50,0000) =     25,100 us/op
     p(90,0000) =     31,200 us/op
     p(95,0000) =     31,200 us/op
     p(99,0000) =     31,200 us/op
     p(99,9000) =     31,200 us/op
     p(99,9900) =     31,200 us/op
     p(99,9990) =     31,200 us/op
     p(99,9999) =     31,200 us/op
    p(100,0000) =     31,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtEnd
# Parameters: (size = 10)

# Run progress: 0,69% complete, ETA 00:02:51
# Fork: 1 of 5
# Warmup Iteration   1: 993,300 us/op
Iteration   1: 10,200 us/op

# Run progress: 0,83% complete, ETA 00:02:54
# Fork: 2 of 5
# Warmup Iteration   1: 992,500 us/op
Iteration   1: 10,300 us/op

# Run progress: 0,97% complete, ETA 00:02:54
# Fork: 3 of 5
# Warmup Iteration   1: 976,300 us/op
Iteration   1: 34,300 us/op

# Run progress: 1,10% complete, ETA 00:02:52
# Fork: 4 of 5
# Warmup Iteration   1: 912,000 us/op
Iteration   1: 8,700 us/op

# Run progress: 1,24% complete, ETA 00:02:52
# Fork: 5 of 5
# Warmup Iteration   1: 1069,900 us/op
Iteration   1: 10,700 us/op


Result "de.codecentric.fpl.Construct.appendAtEnd":
  N = 5
  mean =     14,840 ±(99.9%) 41,991 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 1 
    [10,000, 12,500) = 3 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 0 
    [30,000, 32,500) = 0 
    [32,500, 35,000) = 1 
    [35,000, 37,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      8,700 us/op
     p(50,0000) =     10,300 us/op
     p(90,0000) =     34,300 us/op
     p(95,0000) =     34,300 us/op
     p(99,0000) =     34,300 us/op
     p(99,9000) =     34,300 us/op
     p(99,9900) =     34,300 us/op
     p(99,9990) =     34,300 us/op
     p(99,9999) =     34,300 us/op
    p(100,0000) =     34,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtEnd
# Parameters: (size = 100)

# Run progress: 1,38% complete, ETA 00:02:50
# Fork: 1 of 5
# Warmup Iteration   1: 1017,800 us/op
Iteration   1: 86,500 us/op

# Run progress: 1,52% complete, ETA 00:02:51
# Fork: 2 of 5
# Warmup Iteration   1: 984,900 us/op
Iteration   1: 84,500 us/op

# Run progress: 1,66% complete, ETA 00:02:50
# Fork: 3 of 5
# Warmup Iteration   1: 964,800 us/op
Iteration   1: 76,200 us/op

# Run progress: 1,79% complete, ETA 00:02:49
# Fork: 4 of 5
# Warmup Iteration   1: 945,300 us/op
Iteration   1: 64,900 us/op

# Run progress: 1,93% complete, ETA 00:02:49
# Fork: 5 of 5
# Warmup Iteration   1: 1042,400 us/op
Iteration   1: 58,400 us/op


Result "de.codecentric.fpl.Construct.appendAtEnd":
  N = 5
  mean =     74,100 ±(99.9%) 47,061 us/op

  Histogram, us/op:
    [50,000, 52,500) = 0 
    [52,500, 55,000) = 0 
    [55,000, 57,500) = 0 
    [57,500, 60,000) = 1 
    [60,000, 62,500) = 0 
    [62,500, 65,000) = 1 
    [65,000, 67,500) = 0 
    [67,500, 70,000) = 0 
    [70,000, 72,500) = 0 
    [72,500, 75,000) = 0 
    [75,000, 77,500) = 1 
    [77,500, 80,000) = 0 
    [80,000, 82,500) = 0 
    [82,500, 85,000) = 1 
    [85,000, 87,500) = 1 

  Percentiles, us/op:
      p(0,0000) =     58,400 us/op
     p(50,0000) =     76,200 us/op
     p(90,0000) =     86,500 us/op
     p(95,0000) =     86,500 us/op
     p(99,0000) =     86,500 us/op
     p(99,9000) =     86,500 us/op
     p(99,9900) =     86,500 us/op
     p(99,9990) =     86,500 us/op
     p(99,9999) =     86,500 us/op
    p(100,0000) =     86,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtEnd
# Parameters: (size = 1000)

# Run progress: 2,07% complete, ETA 00:02:49
# Fork: 1 of 5
# Warmup Iteration   1: 1374,200 us/op
Iteration   1: 246,800 us/op

# Run progress: 2,21% complete, ETA 00:02:48
# Fork: 2 of 5
# Warmup Iteration   1: 1578,400 us/op
Iteration   1: 261,700 us/op

# Run progress: 2,34% complete, ETA 00:02:48
# Fork: 3 of 5
# Warmup Iteration   1: 1437,600 us/op
Iteration   1: 265,800 us/op

# Run progress: 2,48% complete, ETA 00:02:49
# Fork: 4 of 5
# Warmup Iteration   1: 1347,600 us/op
Iteration   1: 253,800 us/op

# Run progress: 2,62% complete, ETA 00:02:48
# Fork: 5 of 5
# Warmup Iteration   1: 1480,500 us/op
Iteration   1: 246,400 us/op


Result "de.codecentric.fpl.Construct.appendAtEnd":
  N = 5
  mean =    254,900 ±(99.9%) 33,576 us/op

  Histogram, us/op:
    [240,000, 242,500) = 0 
    [242,500, 245,000) = 0 
    [245,000, 247,500) = 2 
    [247,500, 250,000) = 0 
    [250,000, 252,500) = 0 
    [252,500, 255,000) = 1 
    [255,000, 257,500) = 0 
    [257,500, 260,000) = 0 
    [260,000, 262,500) = 1 
    [262,500, 265,000) = 0 
    [265,000, 267,500) = 1 

  Percentiles, us/op:
      p(0,0000) =    246,400 us/op
     p(50,0000) =    253,800 us/op
     p(90,0000) =    265,800 us/op
     p(95,0000) =    265,800 us/op
     p(99,0000) =    265,800 us/op
     p(99,9000) =    265,800 us/op
     p(99,9900) =    265,800 us/op
     p(99,9990) =    265,800 us/op
     p(99,9999) =    265,800 us/op
    p(100,0000) =    265,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtEnd
# Parameters: (size = 10000)

# Run progress: 2,76% complete, ETA 00:02:47
# Fork: 1 of 5
# Warmup Iteration   1: 3982,000 us/op
Iteration   1: 1343,000 us/op

# Run progress: 2,90% complete, ETA 00:02:48
# Fork: 2 of 5
# Warmup Iteration   1: 3871,900 us/op
Iteration   1: 1299,600 us/op

# Run progress: 3,03% complete, ETA 00:02:47
# Fork: 3 of 5
# Warmup Iteration   1: 3309,700 us/op
Iteration   1: 1131,600 us/op

# Run progress: 3,17% complete, ETA 00:02:47
# Fork: 4 of 5
# Warmup Iteration   1: 4313,500 us/op
Iteration   1: 1267,700 us/op

# Run progress: 3,31% complete, ETA 00:02:48
# Fork: 5 of 5
# Warmup Iteration   1: 4011,500 us/op
Iteration   1: 1277,600 us/op


Result "de.codecentric.fpl.Construct.appendAtEnd":
  N = 5
  mean =   1263,900 ±(99.9%) 305,858 us/op

  Histogram, us/op:
    [1100,000, 1125,000) = 0 
    [1125,000, 1150,000) = 1 
    [1150,000, 1175,000) = 0 
    [1175,000, 1200,000) = 0 
    [1200,000, 1225,000) = 0 
    [1225,000, 1250,000) = 0 
    [1250,000, 1275,000) = 1 
    [1275,000, 1300,000) = 2 
    [1300,000, 1325,000) = 0 
    [1325,000, 1350,000) = 1 
    [1350,000, 1375,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1131,600 us/op
     p(50,0000) =   1277,600 us/op
     p(90,0000) =   1343,000 us/op
     p(95,0000) =   1343,000 us/op
     p(99,0000) =   1343,000 us/op
     p(99,9000) =   1343,000 us/op
     p(99,9900) =   1343,000 us/op
     p(99,9990) =   1343,000 us/op
     p(99,9999) =   1343,000 us/op
    p(100,0000) =   1343,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtStart
# Parameters: (size = 1)

# Run progress: 3,45% complete, ETA 00:02:48
# Fork: 1 of 5
# Warmup Iteration   1: 847,500 us/op
Iteration   1: 3,300 us/op

# Run progress: 3,59% complete, ETA 00:02:48
# Fork: 2 of 5
# Warmup Iteration   1: 1097,600 us/op
Iteration   1: 32,600 us/op

# Run progress: 3,72% complete, ETA 00:02:48
# Fork: 3 of 5
# Warmup Iteration   1: 906,800 us/op
Iteration   1: 28,000 us/op

# Run progress: 3,86% complete, ETA 00:02:47
# Fork: 4 of 5
# Warmup Iteration   1: 799,600 us/op
Iteration   1: 3,600 us/op

# Run progress: 4,00% complete, ETA 00:02:46
# Fork: 5 of 5
# Warmup Iteration   1: 1522,900 us/op
Iteration   1: 51,000 us/op


Result "de.codecentric.fpl.Construct.appendAtStart":
  N = 5
  mean =     23,700 ±(99.9%) 78,518 us/op

  Histogram, us/op:
    [ 0,000,  5,000) = 2 
    [ 5,000, 10,000) = 0 
    [10,000, 15,000) = 0 
    [15,000, 20,000) = 0 
    [20,000, 25,000) = 0 
    [25,000, 30,000) = 1 
    [30,000, 35,000) = 1 
    [35,000, 40,000) = 0 
    [40,000, 45,000) = 0 
    [45,000, 50,000) = 0 
    [50,000, 55,000) = 1 

  Percentiles, us/op:
      p(0,0000) =      3,300 us/op
     p(50,0000) =     28,000 us/op
     p(90,0000) =     51,000 us/op
     p(95,0000) =     51,000 us/op
     p(99,0000) =     51,000 us/op
     p(99,9000) =     51,000 us/op
     p(99,9900) =     51,000 us/op
     p(99,9990) =     51,000 us/op
     p(99,9999) =     51,000 us/op
    p(100,0000) =     51,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtStart
# Parameters: (size = 10)

# Run progress: 4,14% complete, ETA 00:02:46
# Fork: 1 of 5
# Warmup Iteration   1: 879,200 us/op
Iteration   1: 8,000 us/op

# Run progress: 4,28% complete, ETA 00:02:47
# Fork: 2 of 5
# Warmup Iteration   1: 985,000 us/op
Iteration   1: 38,400 us/op

# Run progress: 4,41% complete, ETA 00:02:46
# Fork: 3 of 5
# Warmup Iteration   1: 839,700 us/op
Iteration   1: 31,900 us/op

# Run progress: 4,55% complete, ETA 00:02:45
# Fork: 4 of 5
# Warmup Iteration   1: 976,100 us/op
Iteration   1: 7,500 us/op

# Run progress: 4,69% complete, ETA 00:02:45
# Fork: 5 of 5
# Warmup Iteration   1: 908,500 us/op
Iteration   1: 32,700 us/op


Result "de.codecentric.fpl.Construct.appendAtStart":
  N = 5
  mean =     23,700 ±(99.9%) 56,895 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 2 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 0 
    [30,000, 32,500) = 1 
    [32,500, 35,000) = 1 
    [35,000, 37,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      7,500 us/op
     p(50,0000) =     31,900 us/op
     p(90,0000) =     38,400 us/op
     p(95,0000) =     38,400 us/op
     p(99,0000) =     38,400 us/op
     p(99,9000) =     38,400 us/op
     p(99,9900) =     38,400 us/op
     p(99,9990) =     38,400 us/op
     p(99,9999) =     38,400 us/op
    p(100,0000) =     38,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtStart
# Parameters: (size = 100)

# Run progress: 4,83% complete, ETA 00:02:45
# Fork: 1 of 5
# Warmup Iteration   1: 833,700 us/op
Iteration   1: 92,700 us/op

# Run progress: 4,97% complete, ETA 00:02:45
# Fork: 2 of 5
# Warmup Iteration   1: 996,800 us/op
Iteration   1: 84,700 us/op

# Run progress: 5,10% complete, ETA 00:02:44
# Fork: 3 of 5
# Warmup Iteration   1: 1015,200 us/op
Iteration   1: 50,700 us/op

# Run progress: 5,24% complete, ETA 00:02:44
# Fork: 4 of 5
# Warmup Iteration   1: 932,900 us/op
Iteration   1: 61,600 us/op

# Run progress: 5,38% complete, ETA 00:02:44
# Fork: 5 of 5
# Warmup Iteration   1: 1019,800 us/op
Iteration   1: 97,500 us/op


Result "de.codecentric.fpl.Construct.appendAtStart":
  N = 5
  mean =     77,440 ±(99.9%) 78,300 us/op

  Histogram, us/op:
    [ 50,000,  55,000) = 1 
    [ 55,000,  60,000) = 0 
    [ 60,000,  65,000) = 1 
    [ 65,000,  70,000) = 0 
    [ 70,000,  75,000) = 0 
    [ 75,000,  80,000) = 0 
    [ 80,000,  85,000) = 1 
    [ 85,000,  90,000) = 0 
    [ 90,000,  95,000) = 1 

  Percentiles, us/op:
      p(0,0000) =     50,700 us/op
     p(50,0000) =     84,700 us/op
     p(90,0000) =     97,500 us/op
     p(95,0000) =     97,500 us/op
     p(99,0000) =     97,500 us/op
     p(99,9000) =     97,500 us/op
     p(99,9900) =     97,500 us/op
     p(99,9990) =     97,500 us/op
     p(99,9999) =     97,500 us/op
    p(100,0000) =     97,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtStart
# Parameters: (size = 1000)

# Run progress: 5,52% complete, ETA 00:02:43
# Fork: 1 of 5
# Warmup Iteration   1: 1451,400 us/op
Iteration   1: 150,900 us/op

# Run progress: 5,66% complete, ETA 00:02:43
# Fork: 2 of 5
# Warmup Iteration   1: 1377,000 us/op
Iteration   1: 146,400 us/op

# Run progress: 5,79% complete, ETA 00:02:43
# Fork: 3 of 5
# Warmup Iteration   1: 1412,600 us/op
Iteration   1: 120,500 us/op

# Run progress: 5,93% complete, ETA 00:02:42
# Fork: 4 of 5
# Warmup Iteration   1: 1479,300 us/op
Iteration   1: 123,900 us/op

# Run progress: 6,07% complete, ETA 00:02:42
# Fork: 5 of 5
# Warmup Iteration   1: 1563,200 us/op
Iteration   1: 126,900 us/op


Result "de.codecentric.fpl.Construct.appendAtStart":
  N = 5
  mean =    133,720 ±(99.9%) 53,552 us/op

  Histogram, us/op:
    [120,000, 122,500) = 1 
    [122,500, 125,000) = 1 
    [125,000, 127,500) = 1 
    [127,500, 130,000) = 0 
    [130,000, 132,500) = 0 
    [132,500, 135,000) = 0 
    [135,000, 137,500) = 0 
    [137,500, 140,000) = 0 
    [140,000, 142,500) = 0 
    [142,500, 145,000) = 0 
    [145,000, 147,500) = 1 
    [147,500, 150,000) = 0 
    [150,000, 152,500) = 1 
    [152,500, 155,000) = 0 
    [155,000, 157,500) = 0 

  Percentiles, us/op:
      p(0,0000) =    120,500 us/op
     p(50,0000) =    126,900 us/op
     p(90,0000) =    150,900 us/op
     p(95,0000) =    150,900 us/op
     p(99,0000) =    150,900 us/op
     p(99,9000) =    150,900 us/op
     p(99,9900) =    150,900 us/op
     p(99,9990) =    150,900 us/op
     p(99,9999) =    150,900 us/op
    p(100,0000) =    150,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendAtStart
# Parameters: (size = 10000)

# Run progress: 6,21% complete, ETA 00:02:42
# Fork: 1 of 5
# Warmup Iteration   1: 2336,100 us/op
Iteration   1: 1055,400 us/op

# Run progress: 6,34% complete, ETA 00:02:42
# Fork: 2 of 5
# Warmup Iteration   1: 2349,300 us/op
Iteration   1: 1115,000 us/op

# Run progress: 6,48% complete, ETA 00:02:41
# Fork: 3 of 5
# Warmup Iteration   1: 2205,500 us/op
Iteration   1: 1026,500 us/op

# Run progress: 6,62% complete, ETA 00:02:41
# Fork: 4 of 5
# Warmup Iteration   1: 2298,300 us/op
Iteration   1: 1069,700 us/op

# Run progress: 6,76% complete, ETA 00:02:41
# Fork: 5 of 5
# Warmup Iteration   1: 2549,400 us/op
Iteration   1: 1124,200 us/op


Result "de.codecentric.fpl.Construct.appendAtStart":
  N = 5
  mean =   1078,160 ±(99.9%) 158,008 us/op

  Histogram, us/op:
    [1020,000, 1030,000) = 1 
    [1030,000, 1040,000) = 0 
    [1040,000, 1050,000) = 0 
    [1050,000, 1060,000) = 1 
    [1060,000, 1070,000) = 1 
    [1070,000, 1080,000) = 0 
    [1080,000, 1090,000) = 0 
    [1090,000, 1100,000) = 0 
    [1100,000, 1110,000) = 0 
    [1110,000, 1120,000) = 1 

  Percentiles, us/op:
      p(0,0000) =   1026,500 us/op
     p(50,0000) =   1069,700 us/op
     p(90,0000) =   1124,200 us/op
     p(95,0000) =   1124,200 us/op
     p(99,0000) =   1124,200 us/op
     p(99,9000) =   1124,200 us/op
     p(99,9900) =   1124,200 us/op
     p(99,9990) =   1124,200 us/op
     p(99,9999) =   1124,200 us/op
    p(100,0000) =   1124,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendLists
# Parameters: (size = 1)

# Run progress: 6,90% complete, ETA 00:02:41
# Fork: 1 of 5
# Warmup Iteration   1: 1025,100 us/op
Iteration   1: 28,300 us/op

# Run progress: 7,03% complete, ETA 00:02:41
# Fork: 2 of 5
# Warmup Iteration   1: 1059,900 us/op
Iteration   1: 31,300 us/op

# Run progress: 7,17% complete, ETA 00:02:40
# Fork: 3 of 5
# Warmup Iteration   1: 1072,100 us/op
Iteration   1: 31,800 us/op

# Run progress: 7,31% complete, ETA 00:02:40
# Fork: 4 of 5
# Warmup Iteration   1: 833,800 us/op
Iteration   1: 7,400 us/op

# Run progress: 7,45% complete, ETA 00:02:40
# Fork: 5 of 5
# Warmup Iteration   1: 925,100 us/op
Iteration   1: 2,300 us/op


Result "de.codecentric.fpl.Construct.appendLists":
  N = 5
  mean =     20,220 ±(99.9%) 54,715 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 1 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 1 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 1 
    [30,000, 32,500) = 2 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,300 us/op
     p(50,0000) =     28,300 us/op
     p(90,0000) =     31,800 us/op
     p(95,0000) =     31,800 us/op
     p(99,0000) =     31,800 us/op
     p(99,9000) =     31,800 us/op
     p(99,9900) =     31,800 us/op
     p(99,9990) =     31,800 us/op
     p(99,9999) =     31,800 us/op
    p(100,0000) =     31,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendLists
# Parameters: (size = 10)

# Run progress: 7,59% complete, ETA 00:02:39
# Fork: 1 of 5
# Warmup Iteration   1: 911,800 us/op
Iteration   1: 15,700 us/op

# Run progress: 7,72% complete, ETA 00:02:39
# Fork: 2 of 5
# Warmup Iteration   1: 910,600 us/op
Iteration   1: 54,600 us/op

# Run progress: 7,86% complete, ETA 00:02:39
# Fork: 3 of 5
# Warmup Iteration   1: 1054,300 us/op
Iteration   1: 15,700 us/op

# Run progress: 8,00% complete, ETA 00:02:39
# Fork: 4 of 5
# Warmup Iteration   1: 951,500 us/op
Iteration   1: 14,400 us/op

# Run progress: 8,14% complete, ETA 00:02:39
# Fork: 5 of 5
# Warmup Iteration   1: 842,100 us/op
Iteration   1: 41,200 us/op


Result "de.codecentric.fpl.Construct.appendLists":
  N = 5
  mean =     28,320 ±(99.9%) 71,232 us/op

  Histogram, us/op:
    [10,000, 15,000) = 1 
    [15,000, 20,000) = 2 
    [20,000, 25,000) = 0 
    [25,000, 30,000) = 0 
    [30,000, 35,000) = 0 
    [35,000, 40,000) = 0 
    [40,000, 45,000) = 1 
    [45,000, 50,000) = 0 
    [50,000, 55,000) = 1 

  Percentiles, us/op:
      p(0,0000) =     14,400 us/op
     p(50,0000) =     15,700 us/op
     p(90,0000) =     54,600 us/op
     p(95,0000) =     54,600 us/op
     p(99,0000) =     54,600 us/op
     p(99,9000) =     54,600 us/op
     p(99,9900) =     54,600 us/op
     p(99,9990) =     54,600 us/op
     p(99,9999) =     54,600 us/op
    p(100,0000) =     54,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendLists
# Parameters: (size = 100)

# Run progress: 8,28% complete, ETA 00:02:38
# Fork: 1 of 5
# Warmup Iteration   1: 999,900 us/op
Iteration   1: 131,400 us/op

# Run progress: 8,41% complete, ETA 00:02:38
# Fork: 2 of 5
# Warmup Iteration   1: 1050,200 us/op
Iteration   1: 119,000 us/op

# Run progress: 8,55% complete, ETA 00:02:38
# Fork: 3 of 5
# Warmup Iteration   1: 1192,500 us/op
Iteration   1: 131,200 us/op

# Run progress: 8,69% complete, ETA 00:02:38
# Fork: 4 of 5
# Warmup Iteration   1: 965,600 us/op
Iteration   1: 108,900 us/op

# Run progress: 8,83% complete, ETA 00:02:38
# Fork: 5 of 5
# Warmup Iteration   1: 1266,900 us/op
Iteration   1: 153,300 us/op


Result "de.codecentric.fpl.Construct.appendLists":
  N = 5
  mean =    128,760 ±(99.9%) 63,995 us/op

  Histogram, us/op:
    [100,000, 105,000) = 0 
    [105,000, 110,000) = 1 
    [110,000, 115,000) = 0 
    [115,000, 120,000) = 1 
    [120,000, 125,000) = 0 
    [125,000, 130,000) = 0 
    [130,000, 135,000) = 2 
    [135,000, 140,000) = 0 
    [140,000, 145,000) = 0 
    [145,000, 150,000) = 0 
    [150,000, 155,000) = 1 

  Percentiles, us/op:
      p(0,0000) =    108,900 us/op
     p(50,0000) =    131,200 us/op
     p(90,0000) =    153,300 us/op
     p(95,0000) =    153,300 us/op
     p(99,0000) =    153,300 us/op
     p(99,9000) =    153,300 us/op
     p(99,9900) =    153,300 us/op
     p(99,9990) =    153,300 us/op
     p(99,9999) =    153,300 us/op
    p(100,0000) =    153,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendLists
# Parameters: (size = 1000)

# Run progress: 8,97% complete, ETA 00:02:37
# Fork: 1 of 5
# Warmup Iteration   1: 2001,600 us/op
Iteration   1: 355,100 us/op

# Run progress: 9,10% complete, ETA 00:02:37
# Fork: 2 of 5
# Warmup Iteration   1: 1951,200 us/op
Iteration   1: 374,600 us/op

# Run progress: 9,24% complete, ETA 00:02:37
# Fork: 3 of 5
# Warmup Iteration   1: 1844,300 us/op
Iteration   1: 387,300 us/op

# Run progress: 9,38% complete, ETA 00:02:37
# Fork: 4 of 5
# Warmup Iteration   1: 2126,000 us/op
Iteration   1: 392,700 us/op

# Run progress: 9,52% complete, ETA 00:02:37
# Fork: 5 of 5
# Warmup Iteration   1: 2030,100 us/op
Iteration   1: 419,700 us/op


Result "de.codecentric.fpl.Construct.appendLists":
  N = 5
  mean =    385,880 ±(99.9%) 91,670 us/op

  Histogram, us/op:
    [350,000, 355,000) = 0 
    [355,000, 360,000) = 1 
    [360,000, 365,000) = 0 
    [365,000, 370,000) = 0 
    [370,000, 375,000) = 1 
    [375,000, 380,000) = 0 
    [380,000, 385,000) = 0 
    [385,000, 390,000) = 1 
    [390,000, 395,000) = 1 
    [395,000, 400,000) = 0 
    [400,000, 405,000) = 0 
    [405,000, 410,000) = 0 
    [410,000, 415,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    355,100 us/op
     p(50,0000) =    387,300 us/op
     p(90,0000) =    419,700 us/op
     p(95,0000) =    419,700 us/op
     p(99,0000) =    419,700 us/op
     p(99,9000) =    419,700 us/op
     p(99,9900) =    419,700 us/op
     p(99,9990) =    419,700 us/op
     p(99,9999) =    419,700 us/op
    p(100,0000) =    419,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.appendLists
# Parameters: (size = 10000)

# Run progress: 9,66% complete, ETA 00:02:36
# Fork: 1 of 5
# Warmup Iteration   1: 4384,000 us/op
Iteration   1: 1485,700 us/op

# Run progress: 9,79% complete, ETA 00:02:36
# Fork: 2 of 5
# Warmup Iteration   1: 4727,400 us/op
Iteration   1: 1526,900 us/op

# Run progress: 9,93% complete, ETA 00:02:36
# Fork: 3 of 5
# Warmup Iteration   1: 4948,400 us/op
Iteration   1: 1430,000 us/op

# Run progress: 10,07% complete, ETA 00:02:36
# Fork: 4 of 5
# Warmup Iteration   1: 4615,800 us/op
Iteration   1: 1562,800 us/op

# Run progress: 10,21% complete, ETA 00:02:35
# Fork: 5 of 5
# Warmup Iteration   1: 4666,200 us/op
Iteration   1: 1646,500 us/op


Result "de.codecentric.fpl.Construct.appendLists":
  N = 5
  mean =   1530,380 ±(99.9%) 314,125 us/op

  Histogram, us/op:
    [1400,000, 1425,000) = 0 
    [1425,000, 1450,000) = 1 
    [1450,000, 1475,000) = 0 
    [1475,000, 1500,000) = 1 
    [1500,000, 1525,000) = 0 
    [1525,000, 1550,000) = 1 
    [1550,000, 1575,000) = 1 
    [1575,000, 1600,000) = 0 
    [1600,000, 1625,000) = 0 
    [1625,000, 1650,000) = 1 
    [1650,000, 1675,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1430,000 us/op
     p(50,0000) =   1526,900 us/op
     p(90,0000) =   1646,500 us/op
     p(95,0000) =   1646,500 us/op
     p(99,0000) =   1646,500 us/op
     p(99,9000) =   1646,500 us/op
     p(99,9900) =   1646,500 us/op
     p(99,9990) =   1646,500 us/op
     p(99,9999) =   1646,500 us/op
    p(100,0000) =   1646,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIterator
# Parameters: (size = 1)

# Run progress: 10,34% complete, ETA 00:02:35
# Fork: 1 of 5
# Warmup Iteration   1: 1275,400 us/op
Iteration   1: 15,600 us/op

# Run progress: 10,48% complete, ETA 00:02:35
# Fork: 2 of 5
# Warmup Iteration   1: 1029,800 us/op
Iteration   1: 3,800 us/op

# Run progress: 10,62% complete, ETA 00:02:35
# Fork: 3 of 5
# Warmup Iteration   1: 1084,100 us/op
Iteration   1: 14,500 us/op

# Run progress: 10,76% complete, ETA 00:02:34
# Fork: 4 of 5
# Warmup Iteration   1: 1062,300 us/op
Iteration   1: 21,300 us/op

# Run progress: 10,90% complete, ETA 00:02:34
# Fork: 5 of 5
# Warmup Iteration   1: 1073,700 us/op
Iteration   1: 3,700 us/op


Result "de.codecentric.fpl.Construct.constructFromIterator":
  N = 5
  mean =     11,780 ±(99.9%) 29,925 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 2 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 1 
    [15,000, 17,500) = 1 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 1 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      3,700 us/op
     p(50,0000) =     14,500 us/op
     p(90,0000) =     21,300 us/op
     p(95,0000) =     21,300 us/op
     p(99,0000) =     21,300 us/op
     p(99,9000) =     21,300 us/op
     p(99,9900) =     21,300 us/op
     p(99,9990) =     21,300 us/op
     p(99,9999) =     21,300 us/op
    p(100,0000) =     21,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIterator
# Parameters: (size = 10)

# Run progress: 11,03% complete, ETA 00:02:34
# Fork: 1 of 5
# Warmup Iteration   1: 1042,200 us/op
Iteration   1: 17,100 us/op

# Run progress: 11,17% complete, ETA 00:02:33
# Fork: 2 of 5
# Warmup Iteration   1: 973,400 us/op
Iteration   1: 5,900 us/op

# Run progress: 11,31% complete, ETA 00:02:33
# Fork: 3 of 5
# Warmup Iteration   1: 1258,300 us/op
Iteration   1: 17,600 us/op

# Run progress: 11,45% complete, ETA 00:02:33
# Fork: 4 of 5
# Warmup Iteration   1: 1121,900 us/op
Iteration   1: 5,900 us/op

# Run progress: 11,59% complete, ETA 00:02:33
# Fork: 5 of 5
# Warmup Iteration   1: 998,000 us/op
Iteration   1: 9,400 us/op


Result "de.codecentric.fpl.Construct.constructFromIterator":
  N = 5
  mean =     11,180 ±(99.9%) 22,386 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 0 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 2 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 1 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 0 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 1 
    [17,500, 18,750) = 1 

  Percentiles, us/op:
      p(0,0000) =      5,900 us/op
     p(50,0000) =      9,400 us/op
     p(90,0000) =     17,600 us/op
     p(95,0000) =     17,600 us/op
     p(99,0000) =     17,600 us/op
     p(99,9000) =     17,600 us/op
     p(99,9900) =     17,600 us/op
     p(99,9990) =     17,600 us/op
     p(99,9999) =     17,600 us/op
    p(100,0000) =     17,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIterator
# Parameters: (size = 100)

# Run progress: 11,72% complete, ETA 00:02:32
# Fork: 1 of 5
# Warmup Iteration   1: 1052,900 us/op
Iteration   1: 15,100 us/op

# Run progress: 11,86% complete, ETA 00:02:32
# Fork: 2 of 5
# Warmup Iteration   1: 1069,200 us/op
Iteration   1: 24,800 us/op

# Run progress: 12,00% complete, ETA 00:02:32
# Fork: 3 of 5
# Warmup Iteration   1: 907,000 us/op
Iteration   1: 20,500 us/op

# Run progress: 12,14% complete, ETA 00:02:31
# Fork: 4 of 5
# Warmup Iteration   1: 1103,200 us/op
Iteration   1: 30,000 us/op

# Run progress: 12,28% complete, ETA 00:02:31
# Fork: 5 of 5
# Warmup Iteration   1: 1026,600 us/op
Iteration   1: 17,000 us/op


Result "de.codecentric.fpl.Construct.constructFromIterator":
  N = 5
  mean =     21,480 ±(99.9%) 23,212 us/op

  Histogram, us/op:
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 0 
    [15,000, 16,250) = 1 
    [16,250, 17,500) = 1 
    [17,500, 18,750) = 0 
    [18,750, 20,000) = 0 
    [20,000, 21,250) = 1 
    [21,250, 22,500) = 0 
    [22,500, 23,750) = 0 
    [23,750, 25,000) = 1 
    [25,000, 26,250) = 0 
    [26,250, 27,500) = 0 
    [27,500, 28,750) = 0 

  Percentiles, us/op:
      p(0,0000) =     15,100 us/op
     p(50,0000) =     20,500 us/op
     p(90,0000) =     30,000 us/op
     p(95,0000) =     30,000 us/op
     p(99,0000) =     30,000 us/op
     p(99,9000) =     30,000 us/op
     p(99,9900) =     30,000 us/op
     p(99,9990) =     30,000 us/op
     p(99,9999) =     30,000 us/op
    p(100,0000) =     30,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIterator
# Parameters: (size = 1000)

# Run progress: 12,41% complete, ETA 00:02:31
# Fork: 1 of 5
# Warmup Iteration   1: 1126,200 us/op
Iteration   1: 71,700 us/op

# Run progress: 12,55% complete, ETA 00:02:31
# Fork: 2 of 5
# Warmup Iteration   1: 1386,500 us/op
Iteration   1: 75,900 us/op

# Run progress: 12,69% complete, ETA 00:02:30
# Fork: 3 of 5
# Warmup Iteration   1: 1293,500 us/op
Iteration   1: 75,800 us/op

# Run progress: 12,83% complete, ETA 00:02:30
# Fork: 4 of 5
# Warmup Iteration   1: 1208,200 us/op
Iteration   1: 91,200 us/op

# Run progress: 12,97% complete, ETA 00:02:30
# Fork: 5 of 5
# Warmup Iteration   1: 1316,800 us/op
Iteration   1: 76,400 us/op


Result "de.codecentric.fpl.Construct.constructFromIterator":
  N = 5
  mean =     78,200 ±(99.9%) 28,914 us/op

  Histogram, us/op:
    [ 70,000,  72,500) = 1 
    [ 72,500,  75,000) = 0 
    [ 75,000,  77,500) = 3 
    [ 77,500,  80,000) = 0 
    [ 80,000,  82,500) = 0 
    [ 82,500,  85,000) = 0 
    [ 85,000,  87,500) = 0 
    [ 87,500,  90,000) = 0 
    [ 90,000,  92,500) = 1 
    [ 92,500,  95,000) = 0 
    [ 95,000,  97,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     71,700 us/op
     p(50,0000) =     75,900 us/op
     p(90,0000) =     91,200 us/op
     p(95,0000) =     91,200 us/op
     p(99,0000) =     91,200 us/op
     p(99,9000) =     91,200 us/op
     p(99,9900) =     91,200 us/op
     p(99,9990) =     91,200 us/op
     p(99,9999) =     91,200 us/op
    p(100,0000) =     91,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIterator
# Parameters: (size = 10000)

# Run progress: 13,10% complete, ETA 00:02:30
# Fork: 1 of 5
# Warmup Iteration   1: 1788,900 us/op
Iteration   1: 509,700 us/op

# Run progress: 13,24% complete, ETA 00:02:29
# Fork: 2 of 5
# Warmup Iteration   1: 1764,000 us/op
Iteration   1: 531,200 us/op

# Run progress: 13,38% complete, ETA 00:02:29
# Fork: 3 of 5
# Warmup Iteration   1: 1761,500 us/op
Iteration   1: 538,300 us/op

# Run progress: 13,52% complete, ETA 00:02:29
# Fork: 4 of 5
# Warmup Iteration   1: 1721,200 us/op
Iteration   1: 511,400 us/op

# Run progress: 13,66% complete, ETA 00:02:29
# Fork: 5 of 5
# Warmup Iteration   1: 1976,000 us/op
Iteration   1: 578,300 us/op


Result "de.codecentric.fpl.Construct.constructFromIterator":
  N = 5
  mean =    533,780 ±(99.9%) 107,021 us/op

  Histogram, us/op:
    [500,000, 505,000) = 0 
    [505,000, 510,000) = 1 
    [510,000, 515,000) = 1 
    [515,000, 520,000) = 0 
    [520,000, 525,000) = 0 
    [525,000, 530,000) = 0 
    [530,000, 535,000) = 1 
    [535,000, 540,000) = 1 
    [540,000, 545,000) = 0 
    [545,000, 550,000) = 0 
    [550,000, 555,000) = 0 
    [555,000, 560,000) = 0 
    [560,000, 565,000) = 0 
    [565,000, 570,000) = 0 
    [570,000, 575,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    509,700 us/op
     p(50,0000) =    531,200 us/op
     p(90,0000) =    578,300 us/op
     p(95,0000) =    578,300 us/op
     p(99,0000) =    578,300 us/op
     p(99,9000) =    578,300 us/op
     p(99,9900) =    578,300 us/op
     p(99,9990) =    578,300 us/op
     p(99,9999) =    578,300 us/op
    p(100,0000) =    578,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize
# Parameters: (size = 1)

# Run progress: 13,79% complete, ETA 00:02:28
# Fork: 1 of 5
# Warmup Iteration   1: 1335,300 us/op
Iteration   1: 18,300 us/op

# Run progress: 13,93% complete, ETA 00:02:28
# Fork: 2 of 5
# Warmup Iteration   1: 958,100 us/op
Iteration   1: 26,000 us/op

# Run progress: 14,07% complete, ETA 00:02:28
# Fork: 3 of 5
# Warmup Iteration   1: 1197,000 us/op
Iteration   1: 3,200 us/op

# Run progress: 14,21% complete, ETA 00:02:28
# Fork: 4 of 5
# Warmup Iteration   1: 1233,300 us/op
Iteration   1: 3,500 us/op

# Run progress: 14,34% complete, ETA 00:02:27
# Fork: 5 of 5
# Warmup Iteration   1: 1312,800 us/op
Iteration   1: 3,200 us/op


Result "de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize":
  N = 5
  mean =     10,840 ±(99.9%) 41,118 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 3 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 1 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 1 

  Percentiles, us/op:
      p(0,0000) =      3,200 us/op
     p(50,0000) =      3,500 us/op
     p(90,0000) =     26,000 us/op
     p(95,0000) =     26,000 us/op
     p(99,0000) =     26,000 us/op
     p(99,9000) =     26,000 us/op
     p(99,9900) =     26,000 us/op
     p(99,9990) =     26,000 us/op
     p(99,9999) =     26,000 us/op
    p(100,0000) =     26,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize
# Parameters: (size = 10)

# Run progress: 14,48% complete, ETA 00:02:27
# Fork: 1 of 5
# Warmup Iteration   1: 938,400 us/op
Iteration   1: 14,800 us/op

# Run progress: 14,62% complete, ETA 00:02:27
# Fork: 2 of 5
# Warmup Iteration   1: 1191,000 us/op
Iteration   1: 4,000 us/op

# Run progress: 14,76% complete, ETA 00:02:27
# Fork: 3 of 5
# Warmup Iteration   1: 1007,900 us/op
Iteration   1: 15,800 us/op

# Run progress: 14,90% complete, ETA 00:02:26
# Fork: 4 of 5
# Warmup Iteration   1: 1356,600 us/op
Iteration   1: 4,500 us/op

# Run progress: 15,03% complete, ETA 00:02:26
# Fork: 5 of 5
# Warmup Iteration   1: 1095,400 us/op
Iteration   1: 4,700 us/op


Result "de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize":
  N = 5
  mean =      8,760 ±(99.9%) 23,050 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 0 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 3 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 1 
    [15,000, 16,250) = 1 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      4,000 us/op
     p(50,0000) =      4,700 us/op
     p(90,0000) =     15,800 us/op
     p(95,0000) =     15,800 us/op
     p(99,0000) =     15,800 us/op
     p(99,9000) =     15,800 us/op
     p(99,9900) =     15,800 us/op
     p(99,9990) =     15,800 us/op
     p(99,9999) =     15,800 us/op
    p(100,0000) =     15,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize
# Parameters: (size = 100)

# Run progress: 15,17% complete, ETA 00:02:26
# Fork: 1 of 5
# Warmup Iteration   1: 1179,800 us/op
Iteration   1: 10,500 us/op

# Run progress: 15,31% complete, ETA 00:02:26
# Fork: 2 of 5
# Warmup Iteration   1: 1164,100 us/op
Iteration   1: 13,000 us/op

# Run progress: 15,45% complete, ETA 00:02:25
# Fork: 3 of 5
# Warmup Iteration   1: 1543,200 us/op
Iteration   1: 23,200 us/op

# Run progress: 15,59% complete, ETA 00:02:25
# Fork: 4 of 5
# Warmup Iteration   1: 1300,000 us/op
Iteration   1: 34,100 us/op

# Run progress: 15,72% complete, ETA 00:02:25
# Fork: 5 of 5
# Warmup Iteration   1: 1305,800 us/op
Iteration   1: 27,500 us/op


Result "de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize":
  N = 5
  mean =     21,660 ±(99.9%) 38,060 us/op

  Histogram, us/op:
    [10,000, 12,500) = 1 
    [12,500, 15,000) = 1 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 1 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 1 
    [30,000, 32,500) = 0 
    [32,500, 35,000) = 1 
    [35,000, 37,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     10,500 us/op
     p(50,0000) =     23,200 us/op
     p(90,0000) =     34,100 us/op
     p(95,0000) =     34,100 us/op
     p(99,0000) =     34,100 us/op
     p(99,9000) =     34,100 us/op
     p(99,9900) =     34,100 us/op
     p(99,9990) =     34,100 us/op
     p(99,9999) =     34,100 us/op
    p(100,0000) =     34,100 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize
# Parameters: (size = 1000)

# Run progress: 15,86% complete, ETA 00:02:25
# Fork: 1 of 5
# Warmup Iteration   1: 1305,600 us/op
Iteration   1: 44,500 us/op

# Run progress: 16,00% complete, ETA 00:02:25
# Fork: 2 of 5
# Warmup Iteration   1: 1411,400 us/op
Iteration   1: 45,300 us/op

# Run progress: 16,14% complete, ETA 00:02:24
# Fork: 3 of 5
# Warmup Iteration   1: 1039,000 us/op
Iteration   1: 56,000 us/op

# Run progress: 16,28% complete, ETA 00:02:24
# Fork: 4 of 5
# Warmup Iteration   1: 1316,200 us/op
Iteration   1: 61,500 us/op

# Run progress: 16,41% complete, ETA 00:02:24
# Fork: 5 of 5
# Warmup Iteration   1: 1285,100 us/op
Iteration   1: 62,000 us/op


Result "de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize":
  N = 5
  mean =     53,860 ±(99.9%) 32,792 us/op

  Histogram, us/op:
    [40,000, 42,500) = 0 
    [42,500, 45,000) = 1 
    [45,000, 47,500) = 1 
    [47,500, 50,000) = 0 
    [50,000, 52,500) = 0 
    [52,500, 55,000) = 0 
    [55,000, 57,500) = 1 
    [57,500, 60,000) = 0 
    [60,000, 62,500) = 2 
    [62,500, 65,000) = 0 
    [65,000, 67,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     44,500 us/op
     p(50,0000) =     56,000 us/op
     p(90,0000) =     62,000 us/op
     p(95,0000) =     62,000 us/op
     p(99,0000) =     62,000 us/op
     p(99,9000) =     62,000 us/op
     p(99,9900) =     62,000 us/op
     p(99,9990) =     62,000 us/op
     p(99,9999) =     62,000 us/op
    p(100,0000) =     62,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize
# Parameters: (size = 10000)

# Run progress: 16,55% complete, ETA 00:02:23
# Fork: 1 of 5
# Warmup Iteration   1: 2000,800 us/op
Iteration   1: 340,700 us/op

# Run progress: 16,69% complete, ETA 00:02:23
# Fork: 2 of 5
# Warmup Iteration   1: 1616,800 us/op
Iteration   1: 341,300 us/op

# Run progress: 16,83% complete, ETA 00:02:23
# Fork: 3 of 5
# Warmup Iteration   1: 1876,400 us/op
Iteration   1: 334,900 us/op

# Run progress: 16,97% complete, ETA 00:02:22
# Fork: 4 of 5
# Warmup Iteration   1: 1893,400 us/op
Iteration   1: 326,600 us/op

# Run progress: 17,10% complete, ETA 00:02:22
# Fork: 5 of 5
# Warmup Iteration   1: 1969,000 us/op
Iteration   1: 358,400 us/op


Result "de.codecentric.fpl.Construct.constructFromIteratorWithKnownSize":
  N = 5
  mean =    340,380 ±(99.9%) 44,971 us/op

  Histogram, us/op:
    [320,000, 322,500) = 0 
    [322,500, 325,000) = 0 
    [325,000, 327,500) = 1 
    [327,500, 330,000) = 0 
    [330,000, 332,500) = 0 
    [332,500, 335,000) = 1 
    [335,000, 337,500) = 0 
    [337,500, 340,000) = 0 
    [340,000, 342,500) = 2 
    [342,500, 345,000) = 0 
    [345,000, 347,500) = 0 
    [347,500, 350,000) = 0 
    [350,000, 352,500) = 0 
    [352,500, 355,000) = 0 
    [355,000, 357,500) = 0 

  Percentiles, us/op:
      p(0,0000) =    326,600 us/op
     p(50,0000) =    340,700 us/op
     p(90,0000) =    358,400 us/op
     p(95,0000) =    358,400 us/op
     p(99,0000) =    358,400 us/op
     p(99,9000) =    358,400 us/op
     p(99,9900) =    358,400 us/op
     p(99,9990) =    358,400 us/op
     p(99,9999) =    358,400 us/op
    p(100,0000) =    358,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromEnd
# Parameters: (size = 1)

# Run progress: 17,24% complete, ETA 00:02:22
# Fork: 1 of 5
# Warmup Iteration   1: 14,100 us/op
Iteration   1: 3,300 us/op

# Run progress: 17,38% complete, ETA 00:02:22
# Fork: 2 of 5
# Warmup Iteration   1: 16,000 us/op
Iteration   1: 3,700 us/op

# Run progress: 17,52% complete, ETA 00:02:21
# Fork: 3 of 5
# Warmup Iteration   1: 14,300 us/op
Iteration   1: 3,400 us/op

# Run progress: 17,66% complete, ETA 00:02:21
# Fork: 4 of 5
# Warmup Iteration   1: 14,600 us/op
Iteration   1: 3,300 us/op

# Run progress: 17,79% complete, ETA 00:02:21
# Fork: 5 of 5
# Warmup Iteration   1: 15,100 us/op
Iteration   1: 3,800 us/op


Result "de.codecentric.fpl.Consume.consumeFromEnd":
  N = 5
  mean =      3,500 ±(99.9%) 0,903 us/op

  Histogram, us/op:
    [3,200, 3,250) = 0 
    [3,250, 3,300) = 2 
    [3,300, 3,350) = 0 
    [3,350, 3,400) = 1 
    [3,400, 3,450) = 0 
    [3,450, 3,500) = 0 
    [3,500, 3,550) = 0 
    [3,550, 3,600) = 0 
    [3,600, 3,650) = 0 
    [3,650, 3,700) = 0 
    [3,700, 3,750) = 1 
    [3,750, 3,800) = 1 

  Percentiles, us/op:
      p(0,0000) =      3,300 us/op
     p(50,0000) =      3,400 us/op
     p(90,0000) =      3,800 us/op
     p(95,0000) =      3,800 us/op
     p(99,0000) =      3,800 us/op
     p(99,9000) =      3,800 us/op
     p(99,9900) =      3,800 us/op
     p(99,9990) =      3,800 us/op
     p(99,9999) =      3,800 us/op
    p(100,0000) =      3,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromEnd
# Parameters: (size = 10)

# Run progress: 17,93% complete, ETA 00:02:21
# Fork: 1 of 5
# Warmup Iteration   1: 27,400 us/op
Iteration   1: 19,300 us/op

# Run progress: 18,07% complete, ETA 00:02:20
# Fork: 2 of 5
# Warmup Iteration   1: 26,700 us/op
Iteration   1: 12,100 us/op

# Run progress: 18,21% complete, ETA 00:02:20
# Fork: 3 of 5
# Warmup Iteration   1: 24,500 us/op
Iteration   1: 12,200 us/op

# Run progress: 18,34% complete, ETA 00:02:20
# Fork: 4 of 5
# Warmup Iteration   1: 33,800 us/op
Iteration   1: 15,300 us/op

# Run progress: 18,48% complete, ETA 00:02:20
# Fork: 5 of 5
# Warmup Iteration   1: 24,300 us/op
Iteration   1: 11,700 us/op


Result "de.codecentric.fpl.Consume.consumeFromEnd":
  N = 5
  mean =     14,120 ±(99.9%) 12,455 us/op

  Histogram, us/op:
    [11,000, 11,500) = 0 
    [11,500, 12,000) = 1 
    [12,000, 12,500) = 2 
    [12,500, 13,000) = 0 
    [13,000, 13,500) = 0 
    [13,500, 14,000) = 0 
    [14,000, 14,500) = 0 
    [14,500, 15,000) = 0 
    [15,000, 15,500) = 1 
    [15,500, 16,000) = 0 
    [16,000, 16,500) = 0 
    [16,500, 17,000) = 0 
    [17,000, 17,500) = 0 
    [17,500, 18,000) = 0 
    [18,000, 18,500) = 0 
    [18,500, 19,000) = 0 
    [19,000, 19,500) = 1 

  Percentiles, us/op:
      p(0,0000) =     11,700 us/op
     p(50,0000) =     12,200 us/op
     p(90,0000) =     19,300 us/op
     p(95,0000) =     19,300 us/op
     p(99,0000) =     19,300 us/op
     p(99,9000) =     19,300 us/op
     p(99,9900) =     19,300 us/op
     p(99,9990) =     19,300 us/op
     p(99,9999) =     19,300 us/op
    p(100,0000) =     19,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromEnd
# Parameters: (size = 100)

# Run progress: 18,62% complete, ETA 00:02:19
# Fork: 1 of 5
# Warmup Iteration   1: 232,400 us/op
Iteration   1: 94,300 us/op

# Run progress: 18,76% complete, ETA 00:02:19
# Fork: 2 of 5
# Warmup Iteration   1: 132,100 us/op
Iteration   1: 60,900 us/op

# Run progress: 18,90% complete, ETA 00:02:19
# Fork: 3 of 5
# Warmup Iteration   1: 249,900 us/op
Iteration   1: 61,700 us/op

# Run progress: 19,03% complete, ETA 00:02:18
# Fork: 4 of 5
# Warmup Iteration   1: 81,700 us/op
Iteration   1: 62,700 us/op

# Run progress: 19,17% complete, ETA 00:02:18
# Fork: 5 of 5
# Warmup Iteration   1: 208,900 us/op
Iteration   1: 62,800 us/op


Result "de.codecentric.fpl.Consume.consumeFromEnd":
  N = 5
  mean =     68,480 ±(99.9%) 55,660 us/op

  Histogram, us/op:
    [ 60,000,  62,500) = 2 
    [ 62,500,  65,000) = 2 
    [ 65,000,  67,500) = 0 
    [ 67,500,  70,000) = 0 
    [ 70,000,  72,500) = 0 
    [ 72,500,  75,000) = 0 
    [ 75,000,  77,500) = 0 
    [ 77,500,  80,000) = 0 
    [ 80,000,  82,500) = 0 
    [ 82,500,  85,000) = 0 
    [ 85,000,  87,500) = 0 
    [ 87,500,  90,000) = 0 
    [ 90,000,  92,500) = 0 
    [ 92,500,  95,000) = 1 
    [ 95,000,  97,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     60,900 us/op
     p(50,0000) =     62,700 us/op
     p(90,0000) =     94,300 us/op
     p(95,0000) =     94,300 us/op
     p(99,0000) =     94,300 us/op
     p(99,9000) =     94,300 us/op
     p(99,9900) =     94,300 us/op
     p(99,9990) =     94,300 us/op
     p(99,9999) =     94,300 us/op
    p(100,0000) =     94,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromEnd
# Parameters: (size = 1000)

# Run progress: 19,31% complete, ETA 00:02:18
# Fork: 1 of 5
# Warmup Iteration   1: 572,200 us/op
Iteration   1: 294,100 us/op

# Run progress: 19,45% complete, ETA 00:02:18
# Fork: 2 of 5
# Warmup Iteration   1: 629,300 us/op
Iteration   1: 249,900 us/op

# Run progress: 19,59% complete, ETA 00:02:18
# Fork: 3 of 5
# Warmup Iteration   1: 712,700 us/op
Iteration   1: 276,000 us/op

# Run progress: 19,72% complete, ETA 00:02:17
# Fork: 4 of 5
# Warmup Iteration   1: 789,500 us/op
Iteration   1: 257,600 us/op

# Run progress: 19,86% complete, ETA 00:02:17
# Fork: 5 of 5
# Warmup Iteration   1: 565,300 us/op
Iteration   1: 249,800 us/op


Result "de.codecentric.fpl.Consume.consumeFromEnd":
  N = 5
  mean =    265,480 ±(99.9%) 74,080 us/op

  Histogram, us/op:
    [240,000, 245,000) = 0 
    [245,000, 250,000) = 2 
    [250,000, 255,000) = 0 
    [255,000, 260,000) = 1 
    [260,000, 265,000) = 0 
    [265,000, 270,000) = 0 
    [270,000, 275,000) = 0 
    [275,000, 280,000) = 1 
    [280,000, 285,000) = 0 
    [285,000, 290,000) = 0 
    [290,000, 295,000) = 1 

  Percentiles, us/op:
      p(0,0000) =    249,800 us/op
     p(50,0000) =    257,600 us/op
     p(90,0000) =    294,100 us/op
     p(95,0000) =    294,100 us/op
     p(99,0000) =    294,100 us/op
     p(99,9000) =    294,100 us/op
     p(99,9900) =    294,100 us/op
     p(99,9990) =    294,100 us/op
     p(99,9999) =    294,100 us/op
    p(100,0000) =    294,100 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromEnd
# Parameters: (size = 10000)

# Run progress: 20,00% complete, ETA 00:02:17
# Fork: 1 of 5
# Warmup Iteration   1: 2831,000 us/op
Iteration   1: 2401,400 us/op

# Run progress: 20,14% complete, ETA 00:02:16
# Fork: 2 of 5
# Warmup Iteration   1: 3163,700 us/op
Iteration   1: 1478,800 us/op

# Run progress: 20,28% complete, ETA 00:02:16
# Fork: 3 of 5
# Warmup Iteration   1: 3519,500 us/op
Iteration   1: 1789,000 us/op

# Run progress: 20,41% complete, ETA 00:02:16
# Fork: 4 of 5
# Warmup Iteration   1: 2919,200 us/op
Iteration   1: 2442,700 us/op

# Run progress: 20,55% complete, ETA 00:02:16
# Fork: 5 of 5
# Warmup Iteration   1: 2917,500 us/op
Iteration   1: 1467,700 us/op


Result "de.codecentric.fpl.Consume.consumeFromEnd":
  N = 5
  mean =   1915,920 ±(99.9%) 1847,980 us/op

  Histogram, us/op:
    [1400,000, 1500,000) = 2 
    [1500,000, 1600,000) = 0 
    [1600,000, 1700,000) = 0 
    [1700,000, 1800,000) = 1 
    [1800,000, 1900,000) = 0 
    [1900,000, 2000,000) = 0 
    [2000,000, 2100,000) = 0 
    [2100,000, 2200,000) = 0 
    [2200,000, 2300,000) = 0 
    [2300,000, 2400,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1467,700 us/op
     p(50,0000) =   1789,000 us/op
     p(90,0000) =   2442,700 us/op
     p(95,0000) =   2442,700 us/op
     p(99,0000) =   2442,700 us/op
     p(99,9000) =   2442,700 us/op
     p(99,9900) =   2442,700 us/op
     p(99,9990) =   2442,700 us/op
     p(99,9999) =   2442,700 us/op
    p(100,0000) =   2442,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromStart
# Parameters: (size = 1)

# Run progress: 20,69% complete, ETA 00:02:16
# Fork: 1 of 5
# Warmup Iteration   1: 13,400 us/op
Iteration   1: 4,500 us/op

# Run progress: 20,83% complete, ETA 00:02:15
# Fork: 2 of 5
# Warmup Iteration   1: 13,400 us/op
Iteration   1: 4,600 us/op

# Run progress: 20,97% complete, ETA 00:02:15
# Fork: 3 of 5
# Warmup Iteration   1: 18,700 us/op
Iteration   1: 5,000 us/op

# Run progress: 21,10% complete, ETA 00:02:15
# Fork: 4 of 5
# Warmup Iteration   1: 14,300 us/op
Iteration   1: 4,500 us/op

# Run progress: 21,24% complete, ETA 00:02:15
# Fork: 5 of 5
# Warmup Iteration   1: 12,800 us/op
Iteration   1: 4,100 us/op


Result "de.codecentric.fpl.Consume.consumeFromStart":
  N = 5
  mean =      4,540 ±(99.9%) 1,236 us/op

  Histogram, us/op:
    [4,000, 4,100) = 0 
    [4,100, 4,200) = 1 
    [4,200, 4,300) = 0 
    [4,300, 4,400) = 0 
    [4,400, 4,500) = 0 
    [4,500, 4,600) = 2 
    [4,600, 4,700) = 1 
    [4,700, 4,800) = 0 
    [4,800, 4,900) = 0 

  Percentiles, us/op:
      p(0,0000) =      4,100 us/op
     p(50,0000) =      4,500 us/op
     p(90,0000) =      5,000 us/op
     p(95,0000) =      5,000 us/op
     p(99,0000) =      5,000 us/op
     p(99,9000) =      5,000 us/op
     p(99,9900) =      5,000 us/op
     p(99,9990) =      5,000 us/op
     p(99,9999) =      5,000 us/op
    p(100,0000) =      5,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromStart
# Parameters: (size = 10)

# Run progress: 21,38% complete, ETA 00:02:15
# Fork: 1 of 5
# Warmup Iteration   1: 37,300 us/op
Iteration   1: 15,000 us/op

# Run progress: 21,52% complete, ETA 00:02:14
# Fork: 2 of 5
# Warmup Iteration   1: 29,100 us/op
Iteration   1: 15,200 us/op

# Run progress: 21,66% complete, ETA 00:02:14
# Fork: 3 of 5
# Warmup Iteration   1: 25,500 us/op
Iteration   1: 12,900 us/op

# Run progress: 21,79% complete, ETA 00:02:14
# Fork: 4 of 5
# Warmup Iteration   1: 26,500 us/op
Iteration   1: 13,300 us/op

# Run progress: 21,93% complete, ETA 00:02:13
# Fork: 5 of 5
# Warmup Iteration   1: 27,500 us/op
Iteration   1: 14,000 us/op


Result "de.codecentric.fpl.Consume.consumeFromStart":
  N = 5
  mean =     14,080 ±(99.9%) 3,902 us/op

  Histogram, us/op:
    [12,000, 12,250) = 0 
    [12,250, 12,500) = 0 
    [12,500, 12,750) = 0 
    [12,750, 13,000) = 1 
    [13,000, 13,250) = 0 
    [13,250, 13,500) = 1 
    [13,500, 13,750) = 0 
    [13,750, 14,000) = 0 
    [14,000, 14,250) = 1 
    [14,250, 14,500) = 0 
    [14,500, 14,750) = 0 
    [14,750, 15,000) = 0 
    [15,000, 15,250) = 2 
    [15,250, 15,500) = 0 
    [15,500, 15,750) = 0 

  Percentiles, us/op:
      p(0,0000) =     12,900 us/op
     p(50,0000) =     14,000 us/op
     p(90,0000) =     15,200 us/op
     p(95,0000) =     15,200 us/op
     p(99,0000) =     15,200 us/op
     p(99,9000) =     15,200 us/op
     p(99,9900) =     15,200 us/op
     p(99,9990) =     15,200 us/op
     p(99,9999) =     15,200 us/op
    p(100,0000) =     15,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromStart
# Parameters: (size = 100)

# Run progress: 22,07% complete, ETA 00:02:13
# Fork: 1 of 5
# Warmup Iteration   1: 196,500 us/op
Iteration   1: 118,200 us/op

# Run progress: 22,21% complete, ETA 00:02:13
# Fork: 2 of 5
# Warmup Iteration   1: 228,600 us/op
Iteration   1: 89,200 us/op

# Run progress: 22,34% complete, ETA 00:02:13
# Fork: 3 of 5
# Warmup Iteration   1: 133,400 us/op
Iteration   1: 97,000 us/op

# Run progress: 22,48% complete, ETA 00:02:13
# Fork: 4 of 5
# Warmup Iteration   1: 139,400 us/op
Iteration   1: 91,300 us/op

# Run progress: 22,62% complete, ETA 00:02:12
# Fork: 5 of 5
# Warmup Iteration   1: 126,700 us/op
Iteration   1: 87,000 us/op


Result "de.codecentric.fpl.Consume.consumeFromStart":
  N = 5
  mean =     96,540 ±(99.9%) 48,772 us/op

  Histogram, us/op:
    [ 80,000,  82,500) = 0 
    [ 82,500,  85,000) = 0 
    [ 85,000,  87,500) = 1 
    [ 87,500,  90,000) = 1 
    [ 90,000,  92,500) = 1 
    [ 92,500,  95,000) = 0 
    [ 95,000,  97,500) = 1 
    [ 97,500, 100,000) = 0 
    [100,000, 102,500) = 0 
    [102,500, 105,000) = 0 
    [105,000, 107,500) = 0 
    [107,500, 110,000) = 0 
    [110,000, 112,500) = 0 
    [112,500, 115,000) = 0 
    [115,000, 117,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     87,000 us/op
     p(50,0000) =     91,300 us/op
     p(90,0000) =    118,200 us/op
     p(95,0000) =    118,200 us/op
     p(99,0000) =    118,200 us/op
     p(99,9000) =    118,200 us/op
     p(99,9900) =    118,200 us/op
     p(99,9990) =    118,200 us/op
     p(99,9999) =    118,200 us/op
    p(100,0000) =    118,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromStart
# Parameters: (size = 1000)

# Run progress: 22,76% complete, ETA 00:02:12
# Fork: 1 of 5
# Warmup Iteration   1: 898,900 us/op
Iteration   1: 305,800 us/op

# Run progress: 22,90% complete, ETA 00:02:12
# Fork: 2 of 5
# Warmup Iteration   1: 901,000 us/op
Iteration   1: 314,700 us/op

# Run progress: 23,03% complete, ETA 00:02:12
# Fork: 3 of 5
# Warmup Iteration   1: 824,100 us/op
Iteration   1: 259,900 us/op

# Run progress: 23,17% complete, ETA 00:02:11
# Fork: 4 of 5
# Warmup Iteration   1: 984,700 us/op
Iteration   1: 279,700 us/op

# Run progress: 23,31% complete, ETA 00:02:11
# Fork: 5 of 5
# Warmup Iteration   1: 828,400 us/op
Iteration   1: 268,600 us/op


Result "de.codecentric.fpl.Consume.consumeFromStart":
  N = 5
  mean =    285,740 ±(99.9%) 91,104 us/op

  Histogram, us/op:
    [250,000, 255,000) = 0 
    [255,000, 260,000) = 1 
    [260,000, 265,000) = 0 
    [265,000, 270,000) = 1 
    [270,000, 275,000) = 0 
    [275,000, 280,000) = 1 
    [280,000, 285,000) = 0 
    [285,000, 290,000) = 0 
    [290,000, 295,000) = 0 
    [295,000, 300,000) = 0 
    [300,000, 305,000) = 0 
    [305,000, 310,000) = 1 
    [310,000, 315,000) = 1 

  Percentiles, us/op:
      p(0,0000) =    259,900 us/op
     p(50,0000) =    279,700 us/op
     p(90,0000) =    314,700 us/op
     p(95,0000) =    314,700 us/op
     p(99,0000) =    314,700 us/op
     p(99,9000) =    314,700 us/op
     p(99,9900) =    314,700 us/op
     p(99,9990) =    314,700 us/op
     p(99,9999) =    314,700 us/op
    p(100,0000) =    314,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.consumeFromStart
# Parameters: (size = 10000)

# Run progress: 23,45% complete, ETA 00:02:11
# Fork: 1 of 5
# Warmup Iteration   1: 3013,700 us/op
Iteration   1: 1443,200 us/op

# Run progress: 23,59% complete, ETA 00:02:11
# Fork: 2 of 5
# Warmup Iteration   1: 3178,300 us/op
Iteration   1: 2337,400 us/op

# Run progress: 23,72% complete, ETA 00:02:10
# Fork: 3 of 5
# Warmup Iteration   1: 3616,300 us/op
Iteration   1: 2785,600 us/op

# Run progress: 23,86% complete, ETA 00:02:10
# Fork: 4 of 5
# Warmup Iteration   1: 3241,900 us/op
Iteration   1: 2363,000 us/op

# Run progress: 24,00% complete, ETA 00:02:10
# Fork: 5 of 5
# Warmup Iteration   1: 3402,500 us/op
Iteration   1: 2520,400 us/op


Result "de.codecentric.fpl.Consume.consumeFromStart":
  N = 5
  mean =   2289,920 ±(99.9%) 1947,670 us/op

  Histogram, us/op:
    [1000,000, 1125,000) = 0 
    [1125,000, 1250,000) = 0 
    [1250,000, 1375,000) = 0 
    [1375,000, 1500,000) = 1 
    [1500,000, 1625,000) = 0 
    [1625,000, 1750,000) = 0 
    [1750,000, 1875,000) = 0 
    [1875,000, 2000,000) = 0 
    [2000,000, 2125,000) = 0 
    [2125,000, 2250,000) = 0 
    [2250,000, 2375,000) = 2 
    [2375,000, 2500,000) = 0 
    [2500,000, 2625,000) = 1 
    [2625,000, 2750,000) = 0 
    [2750,000, 2875,000) = 1 

  Percentiles, us/op:
      p(0,0000) =   1443,200 us/op
     p(50,0000) =   2363,000 us/op
     p(90,0000) =   2785,600 us/op
     p(95,0000) =   2785,600 us/op
     p(99,0000) =   2785,600 us/op
     p(99,9000) =   2785,600 us/op
     p(99,9900) =   2785,600 us/op
     p(99,9990) =   2785,600 us/op
     p(99,9999) =   2785,600 us/op
    p(100,0000) =   2785,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllByIterator
# Parameters: (size = 1)

# Run progress: 24,14% complete, ETA 00:02:10
# Fork: 1 of 5
# Warmup Iteration   1: 134,600 us/op
Iteration   1: 14,400 us/op

# Run progress: 24,28% complete, ETA 00:02:10
# Fork: 2 of 5
# Warmup Iteration   1: 134,300 us/op
Iteration   1: 2,100 us/op

# Run progress: 24,41% complete, ETA 00:02:09
# Fork: 3 of 5
# Warmup Iteration   1: 142,600 us/op
Iteration   1: 16,400 us/op

# Run progress: 24,55% complete, ETA 00:02:09
# Fork: 4 of 5
# Warmup Iteration   1: 135,200 us/op
Iteration   1: 13,300 us/op

# Run progress: 24,69% complete, ETA 00:02:09
# Fork: 5 of 5
# Warmup Iteration   1: 145,100 us/op
Iteration   1: 2,000 us/op


Result "de.codecentric.fpl.Consume.getAllByIterator":
  N = 5
  mean =      9,640 ±(99.9%) 27,021 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 2 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 1 
    [13,750, 15,000) = 1 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 1 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,000 us/op
     p(50,0000) =     13,300 us/op
     p(90,0000) =     16,400 us/op
     p(95,0000) =     16,400 us/op
     p(99,0000) =     16,400 us/op
     p(99,9000) =     16,400 us/op
     p(99,9900) =     16,400 us/op
     p(99,9990) =     16,400 us/op
     p(99,9999) =     16,400 us/op
    p(100,0000) =     16,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllByIterator
# Parameters: (size = 10)

# Run progress: 24,83% complete, ETA 00:02:09
# Fork: 1 of 5
# Warmup Iteration   1: 145,300 us/op
Iteration   1: 3,300 us/op

# Run progress: 24,97% complete, ETA 00:02:08
# Fork: 2 of 5
# Warmup Iteration   1: 151,700 us/op
Iteration   1: 3,400 us/op

# Run progress: 25,10% complete, ETA 00:02:08
# Fork: 3 of 5
# Warmup Iteration   1: 150,600 us/op
Iteration   1: 3,700 us/op

# Run progress: 25,24% complete, ETA 00:02:08
# Fork: 4 of 5
# Warmup Iteration   1: 174,000 us/op
Iteration   1: 3,900 us/op

# Run progress: 25,38% complete, ETA 00:02:08
# Fork: 5 of 5
# Warmup Iteration   1: 155,600 us/op
Iteration   1: 3,200 us/op


Result "de.codecentric.fpl.Consume.getAllByIterator":
  N = 5
  mean =      3,500 ±(99.9%) 1,123 us/op

  Histogram, us/op:
    [3,200, 3,250) = 1 
    [3,250, 3,300) = 1 
    [3,300, 3,350) = 0 
    [3,350, 3,400) = 1 
    [3,400, 3,450) = 0 
    [3,450, 3,500) = 0 
    [3,500, 3,550) = 0 
    [3,550, 3,600) = 0 
    [3,600, 3,650) = 0 
    [3,650, 3,700) = 0 
    [3,700, 3,750) = 1 
    [3,750, 3,800) = 0 
    [3,800, 3,850) = 0 
    [3,850, 3,900) = 1 

  Percentiles, us/op:
      p(0,0000) =      3,200 us/op
     p(50,0000) =      3,400 us/op
     p(90,0000) =      3,900 us/op
     p(95,0000) =      3,900 us/op
     p(99,0000) =      3,900 us/op
     p(99,9000) =      3,900 us/op
     p(99,9900) =      3,900 us/op
     p(99,9990) =      3,900 us/op
     p(99,9999) =      3,900 us/op
    p(100,0000) =      3,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllByIterator
# Parameters: (size = 100)

# Run progress: 25,52% complete, ETA 00:02:07
# Fork: 1 of 5
# Warmup Iteration   1: 166,300 us/op
Iteration   1: 13,400 us/op

# Run progress: 25,66% complete, ETA 00:02:07
# Fork: 2 of 5
# Warmup Iteration   1: 152,800 us/op
Iteration   1: 13,900 us/op

# Run progress: 25,79% complete, ETA 00:02:07
# Fork: 3 of 5
# Warmup Iteration   1: 157,300 us/op
Iteration   1: 14,200 us/op

# Run progress: 25,93% complete, ETA 00:02:07
# Fork: 4 of 5
# Warmup Iteration   1: 187,500 us/op
Iteration   1: 13,200 us/op

# Run progress: 26,07% complete, ETA 00:02:06
# Fork: 5 of 5
# Warmup Iteration   1: 159,600 us/op
Iteration   1: 13,900 us/op


Result "de.codecentric.fpl.Consume.getAllByIterator":
  N = 5
  mean =     13,720 ±(99.9%) 1,574 us/op

  Histogram, us/op:
    [13,000, 13,125) = 0 
    [13,125, 13,250) = 1 
    [13,250, 13,375) = 0 
    [13,375, 13,500) = 1 
    [13,500, 13,625) = 0 
    [13,625, 13,750) = 0 
    [13,750, 13,875) = 0 
    [13,875, 14,000) = 2 
    [14,000, 14,125) = 0 
    [14,125, 14,250) = 1 
    [14,250, 14,375) = 0 
    [14,375, 14,500) = 0 
    [14,500, 14,625) = 0 
    [14,625, 14,750) = 0 
    [14,750, 14,875) = 0 

  Percentiles, us/op:
      p(0,0000) =     13,200 us/op
     p(50,0000) =     13,900 us/op
     p(90,0000) =     14,200 us/op
     p(95,0000) =     14,200 us/op
     p(99,0000) =     14,200 us/op
     p(99,9000) =     14,200 us/op
     p(99,9900) =     14,200 us/op
     p(99,9990) =     14,200 us/op
     p(99,9999) =     14,200 us/op
    p(100,0000) =     14,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllByIterator
# Parameters: (size = 1000)

# Run progress: 26,21% complete, ETA 00:02:06
# Fork: 1 of 5
# Warmup Iteration   1: 273,200 us/op
Iteration   1: 65,600 us/op

# Run progress: 26,34% complete, ETA 00:02:06
# Fork: 2 of 5
# Warmup Iteration   1: 272,300 us/op
Iteration   1: 63,500 us/op

# Run progress: 26,48% complete, ETA 00:02:06
# Fork: 3 of 5
# Warmup Iteration   1: 268,800 us/op
Iteration   1: 64,100 us/op

# Run progress: 26,62% complete, ETA 00:02:05
# Fork: 4 of 5
# Warmup Iteration   1: 276,300 us/op
Iteration   1: 62,100 us/op

# Run progress: 26,76% complete, ETA 00:02:05
# Fork: 5 of 5
# Warmup Iteration   1: 288,600 us/op
Iteration   1: 74,800 us/op


Result "de.codecentric.fpl.Consume.getAllByIterator":
  N = 5
  mean =     66,020 ±(99.9%) 19,508 us/op

  Histogram, us/op:
    [60,000, 61,250) = 0 
    [61,250, 62,500) = 1 
    [62,500, 63,750) = 1 
    [63,750, 65,000) = 1 
    [65,000, 66,250) = 1 
    [66,250, 67,500) = 0 
    [67,500, 68,750) = 0 
    [68,750, 70,000) = 0 
    [70,000, 71,250) = 0 
    [71,250, 72,500) = 0 
    [72,500, 73,750) = 0 
    [73,750, 75,000) = 1 
    [75,000, 76,250) = 0 
    [76,250, 77,500) = 0 
    [77,500, 78,750) = 0 

  Percentiles, us/op:
      p(0,0000) =     62,100 us/op
     p(50,0000) =     64,100 us/op
     p(90,0000) =     74,800 us/op
     p(95,0000) =     74,800 us/op
     p(99,0000) =     74,800 us/op
     p(99,9000) =     74,800 us/op
     p(99,9900) =     74,800 us/op
     p(99,9990) =     74,800 us/op
     p(99,9999) =     74,800 us/op
    p(100,0000) =     74,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllByIterator
# Parameters: (size = 10000)

# Run progress: 26,90% complete, ETA 00:02:05
# Fork: 1 of 5
# Warmup Iteration   1: 979,100 us/op
Iteration   1: 519,500 us/op

# Run progress: 27,03% complete, ETA 00:02:05
# Fork: 2 of 5
# Warmup Iteration   1: 844,800 us/op
Iteration   1: 466,500 us/op

# Run progress: 27,17% complete, ETA 00:02:04
# Fork: 3 of 5
# Warmup Iteration   1: 788,800 us/op
Iteration   1: 470,500 us/op

# Run progress: 27,31% complete, ETA 00:02:04
# Fork: 4 of 5
# Warmup Iteration   1: 1156,400 us/op
Iteration   1: 471,700 us/op

# Run progress: 27,45% complete, ETA 00:02:04
# Fork: 5 of 5
# Warmup Iteration   1: 779,000 us/op
Iteration   1: 473,300 us/op


Result "de.codecentric.fpl.Consume.getAllByIterator":
  N = 5
  mean =    480,300 ±(99.9%) 84,934 us/op

  Histogram, us/op:
    [460,000, 465,000) = 0 
    [465,000, 470,000) = 1 
    [470,000, 475,000) = 3 
    [475,000, 480,000) = 0 
    [480,000, 485,000) = 0 
    [485,000, 490,000) = 0 
    [490,000, 495,000) = 0 
    [495,000, 500,000) = 0 
    [500,000, 505,000) = 0 
    [505,000, 510,000) = 0 
    [510,000, 515,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    466,500 us/op
     p(50,0000) =    471,700 us/op
     p(90,0000) =    519,500 us/op
     p(95,0000) =    519,500 us/op
     p(99,0000) =    519,500 us/op
     p(99,9000) =    519,500 us/op
     p(99,9900) =    519,500 us/op
     p(99,9990) =    519,500 us/op
     p(99,9999) =    519,500 us/op
    p(100,0000) =    519,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllRandomly
# Parameters: (size = 1)

# Run progress: 27,59% complete, ETA 00:02:03
# Fork: 1 of 5
# Warmup Iteration   1: 15,400 us/op
Iteration   1: 1,700 us/op

# Run progress: 27,72% complete, ETA 00:02:03
# Fork: 2 of 5
# Warmup Iteration   1: 15,500 us/op
Iteration   1: 1,800 us/op

# Run progress: 27,86% complete, ETA 00:02:03
# Fork: 3 of 5
# Warmup Iteration   1: 7,200 us/op
Iteration   1: 12,400 us/op

# Run progress: 28,00% complete, ETA 00:02:03
# Fork: 4 of 5
# Warmup Iteration   1: 15,000 us/op
Iteration   1: 1,500 us/op

# Run progress: 28,14% complete, ETA 00:02:03
# Fork: 5 of 5
# Warmup Iteration   1: 17,100 us/op
Iteration   1: 2,300 us/op


Result "de.codecentric.fpl.Consume.getAllRandomly":
  N = 5
  mean =      3,940 ±(99.9%) 18,246 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 4 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 1 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 0 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,500 us/op
     p(50,0000) =      1,800 us/op
     p(90,0000) =     12,400 us/op
     p(95,0000) =     12,400 us/op
     p(99,0000) =     12,400 us/op
     p(99,9000) =     12,400 us/op
     p(99,9900) =     12,400 us/op
     p(99,9990) =     12,400 us/op
     p(99,9999) =     12,400 us/op
    p(100,0000) =     12,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllRandomly
# Parameters: (size = 10)

# Run progress: 28,28% complete, ETA 00:02:02
# Fork: 1 of 5
# Warmup Iteration   1: 17,400 us/op
Iteration   1: 2,700 us/op

# Run progress: 28,41% complete, ETA 00:02:02
# Fork: 2 of 5
# Warmup Iteration   1: 16,300 us/op
Iteration   1: 3,000 us/op

# Run progress: 28,55% complete, ETA 00:02:02
# Fork: 3 of 5
# Warmup Iteration   1: 18,000 us/op
Iteration   1: 2,900 us/op

# Run progress: 28,69% complete, ETA 00:02:01
# Fork: 4 of 5
# Warmup Iteration   1: 18,100 us/op
Iteration   1: 2,600 us/op

# Run progress: 28,83% complete, ETA 00:02:01
# Fork: 5 of 5
# Warmup Iteration   1: 18,900 us/op
Iteration   1: 3,100 us/op


Result "de.codecentric.fpl.Consume.getAllRandomly":
  N = 5
  mean =      2,860 ±(99.9%) 0,798 us/op

  Histogram, us/op:
    [2,600, 2,650) = 1 
    [2,650, 2,700) = 0 
    [2,700, 2,750) = 1 
    [2,750, 2,800) = 0 
    [2,800, 2,850) = 0 
    [2,850, 2,900) = 1 
    [2,900, 2,950) = 0 
    [2,950, 3,000) = 0 
    [3,000, 3,050) = 1 

  Percentiles, us/op:
      p(0,0000) =      2,600 us/op
     p(50,0000) =      2,900 us/op
     p(90,0000) =      3,100 us/op
     p(95,0000) =      3,100 us/op
     p(99,0000) =      3,100 us/op
     p(99,9000) =      3,100 us/op
     p(99,9900) =      3,100 us/op
     p(99,9990) =      3,100 us/op
     p(99,9999) =      3,100 us/op
    p(100,0000) =      3,100 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllRandomly
# Parameters: (size = 100)

# Run progress: 28,97% complete, ETA 00:02:01
# Fork: 1 of 5
# Warmup Iteration   1: 34,400 us/op
Iteration   1: 24,500 us/op

# Run progress: 29,10% complete, ETA 00:02:01
# Fork: 2 of 5
# Warmup Iteration   1: 36,600 us/op
Iteration   1: 18,500 us/op

# Run progress: 29,24% complete, ETA 00:02:00
# Fork: 3 of 5
# Warmup Iteration   1: 31,500 us/op
Iteration   1: 17,600 us/op

# Run progress: 29,38% complete, ETA 00:02:00
# Fork: 4 of 5
# Warmup Iteration   1: 30,300 us/op
Iteration   1: 18,000 us/op

# Run progress: 29,52% complete, ETA 00:02:00
# Fork: 5 of 5
# Warmup Iteration   1: 33,100 us/op
Iteration   1: 20,600 us/op


Result "de.codecentric.fpl.Consume.getAllRandomly":
  N = 5
  mean =     19,840 ±(99.9%) 10,975 us/op

  Histogram, us/op:
    [17,000, 17,500) = 0 
    [17,500, 18,000) = 1 
    [18,000, 18,500) = 1 
    [18,500, 19,000) = 1 
    [19,000, 19,500) = 0 
    [19,500, 20,000) = 0 
    [20,000, 20,500) = 0 
    [20,500, 21,000) = 1 
    [21,000, 21,500) = 0 
    [21,500, 22,000) = 0 
    [22,000, 22,500) = 0 
    [22,500, 23,000) = 0 
    [23,000, 23,500) = 0 
    [23,500, 24,000) = 0 
    [24,000, 24,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     17,600 us/op
     p(50,0000) =     18,500 us/op
     p(90,0000) =     24,500 us/op
     p(95,0000) =     24,500 us/op
     p(99,0000) =     24,500 us/op
     p(99,9000) =     24,500 us/op
     p(99,9900) =     24,500 us/op
     p(99,9990) =     24,500 us/op
     p(99,9999) =     24,500 us/op
    p(100,0000) =     24,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllRandomly
# Parameters: (size = 1000)

# Run progress: 29,66% complete, ETA 00:02:00
# Fork: 1 of 5
# Warmup Iteration   1: 184,600 us/op
Iteration   1: 56,800 us/op

# Run progress: 29,79% complete, ETA 00:01:59
# Fork: 2 of 5
# Warmup Iteration   1: 193,300 us/op
Iteration   1: 69,700 us/op

# Run progress: 29,93% complete, ETA 00:01:59
# Fork: 3 of 5
# Warmup Iteration   1: 187,800 us/op
Iteration   1: 56,600 us/op

# Run progress: 30,07% complete, ETA 00:01:59
# Fork: 4 of 5
# Warmup Iteration   1: 194,600 us/op
Iteration   1: 61,400 us/op

# Run progress: 30,21% complete, ETA 00:01:59
# Fork: 5 of 5
# Warmup Iteration   1: 226,800 us/op
Iteration   1: 64,100 us/op


Result "de.codecentric.fpl.Consume.getAllRandomly":
  N = 5
  mean =     61,720 ±(99.9%) 21,079 us/op

  Histogram, us/op:
    [50,000, 51,250) = 0 
    [51,250, 52,500) = 0 
    [52,500, 53,750) = 0 
    [53,750, 55,000) = 0 
    [55,000, 56,250) = 0 
    [56,250, 57,500) = 2 
    [57,500, 58,750) = 0 
    [58,750, 60,000) = 0 
    [60,000, 61,250) = 0 
    [61,250, 62,500) = 1 
    [62,500, 63,750) = 0 
    [63,750, 65,000) = 1 
    [65,000, 66,250) = 0 
    [66,250, 67,500) = 0 
    [67,500, 68,750) = 0 

  Percentiles, us/op:
      p(0,0000) =     56,600 us/op
     p(50,0000) =     61,400 us/op
     p(90,0000) =     69,700 us/op
     p(95,0000) =     69,700 us/op
     p(99,0000) =     69,700 us/op
     p(99,9000) =     69,700 us/op
     p(99,9900) =     69,700 us/op
     p(99,9990) =     69,700 us/op
     p(99,9999) =     69,700 us/op
    p(100,0000) =     69,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getAllRandomly
# Parameters: (size = 10000)

# Run progress: 30,34% complete, ETA 00:01:59
# Fork: 1 of 5
# Warmup Iteration   1: 816,900 us/op
Iteration   1: 436,300 us/op

# Run progress: 30,48% complete, ETA 00:01:58
# Fork: 2 of 5
# Warmup Iteration   1: 807,300 us/op
Iteration   1: 763,200 us/op

# Run progress: 30,62% complete, ETA 00:01:58
# Fork: 3 of 5
# Warmup Iteration   1: 822,800 us/op
Iteration   1: 467,000 us/op

# Run progress: 30,76% complete, ETA 00:01:58
# Fork: 4 of 5
# Warmup Iteration   1: 876,200 us/op
Iteration   1: 454,500 us/op

# Run progress: 30,90% complete, ETA 00:01:57
# Fork: 5 of 5
# Warmup Iteration   1: 854,100 us/op
Iteration   1: 452,300 us/op


Result "de.codecentric.fpl.Consume.getAllRandomly":
  N = 5
  mean =    514,660 ±(99.9%) 536,650 us/op

  Histogram, us/op:
    [400,000, 425,000) = 0 
    [425,000, 450,000) = 1 
    [450,000, 475,000) = 3 
    [475,000, 500,000) = 0 
    [500,000, 525,000) = 0 
    [525,000, 550,000) = 0 
    [550,000, 575,000) = 0 
    [575,000, 600,000) = 0 
    [600,000, 625,000) = 0 
    [625,000, 650,000) = 0 
    [650,000, 675,000) = 0 
    [675,000, 700,000) = 0 
    [700,000, 725,000) = 0 
    [725,000, 750,000) = 0 
    [750,000, 775,000) = 1 

  Percentiles, us/op:
      p(0,0000) =    436,300 us/op
     p(50,0000) =    454,500 us/op
     p(90,0000) =    763,200 us/op
     p(95,0000) =    763,200 us/op
     p(99,0000) =    763,200 us/op
     p(99,9000) =    763,200 us/op
     p(99,9900) =    763,200 us/op
     p(99,9990) =    763,200 us/op
     p(99,9999) =    763,200 us/op
    p(100,0000) =    763,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getFirst
# Parameters: (size = 1)

# Run progress: 31,03% complete, ETA 00:01:57
# Fork: 1 of 5
# Warmup Iteration   1: 14,600 us/op
Iteration   1: 1,300 us/op

# Run progress: 31,17% complete, ETA 00:01:57
# Fork: 2 of 5
# Warmup Iteration   1: 14,600 us/op
Iteration   1: 1,100 us/op

# Run progress: 31,31% complete, ETA 00:01:57
# Fork: 3 of 5
# Warmup Iteration   1: 15,600 us/op
Iteration   1: 1,200 us/op

# Run progress: 31,45% complete, ETA 00:01:56
# Fork: 4 of 5
# Warmup Iteration   1: 14,800 us/op
Iteration   1: 1,500 us/op

# Run progress: 31,59% complete, ETA 00:01:56
# Fork: 5 of 5
# Warmup Iteration   1: 15,300 us/op
Iteration   1: 1,300 us/op


Result "de.codecentric.fpl.Consume.getFirst":
  N = 5
  mean =      1,280 ±(99.9%) 0,571 us/op

  Histogram, us/op:
    [1,100, 1,125) = 1 
    [1,125, 1,150) = 0 
    [1,150, 1,175) = 0 
    [1,175, 1,200) = 1 
    [1,200, 1,225) = 0 
    [1,225, 1,250) = 0 
    [1,250, 1,275) = 0 
    [1,275, 1,300) = 0 
    [1,300, 1,325) = 2 
    [1,325, 1,350) = 0 
    [1,350, 1,375) = 0 
    [1,375, 1,400) = 0 
    [1,400, 1,425) = 0 
    [1,425, 1,450) = 0 
    [1,450, 1,475) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,100 us/op
     p(50,0000) =      1,300 us/op
     p(90,0000) =      1,500 us/op
     p(95,0000) =      1,500 us/op
     p(99,0000) =      1,500 us/op
     p(99,9000) =      1,500 us/op
     p(99,9900) =      1,500 us/op
     p(99,9990) =      1,500 us/op
     p(99,9999) =      1,500 us/op
    p(100,0000) =      1,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getFirst
# Parameters: (size = 10)

# Run progress: 31,72% complete, ETA 00:01:56
# Fork: 1 of 5
# Warmup Iteration   1: 6,500 us/op
Iteration   1: 12,800 us/op

# Run progress: 31,86% complete, ETA 00:01:56
# Fork: 2 of 5
# Warmup Iteration   1: 15,200 us/op
Iteration   1: 1,400 us/op

# Run progress: 32,00% complete, ETA 00:01:55
# Fork: 3 of 5
# Warmup Iteration   1: 14,900 us/op
Iteration   1: 1,200 us/op

# Run progress: 32,14% complete, ETA 00:01:55
# Fork: 4 of 5
# Warmup Iteration   1: 15,500 us/op
Iteration   1: 1,900 us/op

# Run progress: 32,28% complete, ETA 00:01:55
# Fork: 5 of 5
# Warmup Iteration   1: 6,500 us/op
Iteration   1: 13,200 us/op


Result "de.codecentric.fpl.Consume.getFirst":
  N = 5
  mean =      6,100 ±(99.9%) 24,280 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 1 
    [ 1,250,  2,500) = 2 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 2 
    [13,750, 15,000) = 0 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,200 us/op
     p(50,0000) =      1,900 us/op
     p(90,0000) =     13,200 us/op
     p(95,0000) =     13,200 us/op
     p(99,0000) =     13,200 us/op
     p(99,9000) =     13,200 us/op
     p(99,9900) =     13,200 us/op
     p(99,9990) =     13,200 us/op
     p(99,9999) =     13,200 us/op
    p(100,0000) =     13,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getFirst
# Parameters: (size = 100)

# Run progress: 32,41% complete, ETA 00:01:55
# Fork: 1 of 5
# Warmup Iteration   1: 7,700 us/op
Iteration   1: 14,200 us/op

# Run progress: 32,55% complete, ETA 00:01:54
# Fork: 2 of 5
# Warmup Iteration   1: 7,100 us/op
Iteration   1: 13,200 us/op

# Run progress: 32,69% complete, ETA 00:01:54
# Fork: 3 of 5
# Warmup Iteration   1: 15,800 us/op
Iteration   1: 2,100 us/op

# Run progress: 32,83% complete, ETA 00:01:54
# Fork: 4 of 5
# Warmup Iteration   1: 7,700 us/op
Iteration   1: 12,700 us/op

# Run progress: 32,97% complete, ETA 00:01:54
# Fork: 5 of 5
# Warmup Iteration   1: 30,600 us/op
Iteration   1: 1,300 us/op


Result "de.codecentric.fpl.Consume.getFirst":
  N = 5
  mean =      8,700 ±(99.9%) 24,718 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 2 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 2 
    [13,750, 15,000) = 1 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,300 us/op
     p(50,0000) =     12,700 us/op
     p(90,0000) =     14,200 us/op
     p(95,0000) =     14,200 us/op
     p(99,0000) =     14,200 us/op
     p(99,9000) =     14,200 us/op
     p(99,9900) =     14,200 us/op
     p(99,9990) =     14,200 us/op
     p(99,9999) =     14,200 us/op
    p(100,0000) =     14,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getFirst
# Parameters: (size = 1000)

# Run progress: 33,10% complete, ETA 00:01:54
# Fork: 1 of 5
# Warmup Iteration   1: 15,900 us/op
Iteration   1: 1,100 us/op

# Run progress: 33,24% complete, ETA 00:01:53
# Fork: 2 of 5
# Warmup Iteration   1: 8,000 us/op
Iteration   1: 22,700 us/op

# Run progress: 33,38% complete, ETA 00:01:53
# Fork: 3 of 5
# Warmup Iteration   1: 24,400 us/op
Iteration   1: 2,100 us/op

# Run progress: 33,52% complete, ETA 00:01:53
# Fork: 4 of 5
# Warmup Iteration   1: 6,800 us/op
Iteration   1: 13,800 us/op

# Run progress: 33,66% complete, ETA 00:01:53
# Fork: 5 of 5
# Warmup Iteration   1: 15,400 us/op
Iteration   1: 18,600 us/op


Result "de.codecentric.fpl.Consume.getFirst":
  N = 5
  mean =     11,660 ±(99.9%) 37,409 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 2 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 1 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 1 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 1 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,100 us/op
     p(50,0000) =     13,800 us/op
     p(90,0000) =     22,700 us/op
     p(95,0000) =     22,700 us/op
     p(99,0000) =     22,700 us/op
     p(99,9000) =     22,700 us/op
     p(99,9900) =     22,700 us/op
     p(99,9990) =     22,700 us/op
     p(99,9999) =     22,700 us/op
    p(100,0000) =     22,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getFirst
# Parameters: (size = 10000)

# Run progress: 33,79% complete, ETA 00:01:52
# Fork: 1 of 5
# Warmup Iteration   1: 8,700 us/op
Iteration   1: 22,200 us/op

# Run progress: 33,93% complete, ETA 00:01:52
# Fork: 2 of 5
# Warmup Iteration   1: 18,800 us/op
Iteration   1: 1,500 us/op

# Run progress: 34,07% complete, ETA 00:01:52
# Fork: 3 of 5
# Warmup Iteration   1: 16,900 us/op
Iteration   1: 1,200 us/op

# Run progress: 34,21% complete, ETA 00:01:52
# Fork: 4 of 5
# Warmup Iteration   1: 8,200 us/op
Iteration   1: 17,900 us/op

# Run progress: 34,34% complete, ETA 00:01:51
# Fork: 5 of 5
# Warmup Iteration   1: 8,500 us/op
Iteration   1: 19,400 us/op


Result "de.codecentric.fpl.Consume.getFirst":
  N = 5
  mean =     12,440 ±(99.9%) 39,435 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 2 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 2 
    [20,000, 22,500) = 1 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,200 us/op
     p(50,0000) =     17,900 us/op
     p(90,0000) =     22,200 us/op
     p(95,0000) =     22,200 us/op
     p(99,0000) =     22,200 us/op
     p(99,9000) =     22,200 us/op
     p(99,9900) =     22,200 us/op
     p(99,9990) =     22,200 us/op
     p(99,9999) =     22,200 us/op
    p(100,0000) =     22,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getLast
# Parameters: (size = 1)

# Run progress: 34,48% complete, ETA 00:01:51
# Fork: 1 of 5
# Warmup Iteration   1: 14,900 us/op
Iteration   1: 1,700 us/op

# Run progress: 34,62% complete, ETA 00:01:51
# Fork: 2 of 5
# Warmup Iteration   1: 15,000 us/op
Iteration   1: 1,700 us/op

# Run progress: 34,76% complete, ETA 00:01:51
# Fork: 3 of 5
# Warmup Iteration   1: 7,700 us/op
Iteration   1: 17,700 us/op

# Run progress: 34,90% complete, ETA 00:01:50
# Fork: 4 of 5
# Warmup Iteration   1: 7,100 us/op
Iteration   1: 13,900 us/op

# Run progress: 35,03% complete, ETA 00:01:50
# Fork: 5 of 5
# Warmup Iteration   1: 15,200 us/op
Iteration   1: 1,400 us/op


Result "de.codecentric.fpl.Consume.getLast":
  N = 5
  mean =      7,280 ±(99.9%) 30,396 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 3 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 1 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 1 

  Percentiles, us/op:
      p(0,0000) =      1,400 us/op
     p(50,0000) =      1,700 us/op
     p(90,0000) =     17,700 us/op
     p(95,0000) =     17,700 us/op
     p(99,0000) =     17,700 us/op
     p(99,9000) =     17,700 us/op
     p(99,9900) =     17,700 us/op
     p(99,9990) =     17,700 us/op
     p(99,9999) =     17,700 us/op
    p(100,0000) =     17,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getLast
# Parameters: (size = 10)

# Run progress: 35,17% complete, ETA 00:01:50
# Fork: 1 of 5
# Warmup Iteration   1: 6,600 us/op
Iteration   1: 12,400 us/op

# Run progress: 35,31% complete, ETA 00:01:50
# Fork: 2 of 5
# Warmup Iteration   1: 6,800 us/op
Iteration   1: 13,800 us/op

# Run progress: 35,45% complete, ETA 00:01:49
# Fork: 3 of 5
# Warmup Iteration   1: 15,500 us/op
Iteration   1: 1,700 us/op

# Run progress: 35,59% complete, ETA 00:01:49
# Fork: 4 of 5
# Warmup Iteration   1: 7,000 us/op
Iteration   1: 12,900 us/op

# Run progress: 35,72% complete, ETA 00:01:49
# Fork: 5 of 5
# Warmup Iteration   1: 14,500 us/op
Iteration   1: 1,900 us/op


Result "de.codecentric.fpl.Consume.getLast":
  N = 5
  mean =      8,540 ±(99.9%) 23,772 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 2 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 1 
    [12,500, 13,750) = 1 
    [13,750, 15,000) = 1 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,700 us/op
     p(50,0000) =     12,400 us/op
     p(90,0000) =     13,800 us/op
     p(95,0000) =     13,800 us/op
     p(99,0000) =     13,800 us/op
     p(99,9000) =     13,800 us/op
     p(99,9900) =     13,800 us/op
     p(99,9990) =     13,800 us/op
     p(99,9999) =     13,800 us/op
    p(100,0000) =     13,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getLast
# Parameters: (size = 100)

# Run progress: 35,86% complete, ETA 00:01:49
# Fork: 1 of 5
# Warmup Iteration   1: 9,200 us/op
Iteration   1: 12,600 us/op

# Run progress: 36,00% complete, ETA 00:01:48
# Fork: 2 of 5
# Warmup Iteration   1: 6,800 us/op
Iteration   1: 25,300 us/op

# Run progress: 36,14% complete, ETA 00:01:48
# Fork: 3 of 5
# Warmup Iteration   1: 22,500 us/op
Iteration   1: 1,300 us/op

# Run progress: 36,28% complete, ETA 00:01:48
# Fork: 4 of 5
# Warmup Iteration   1: 6,900 us/op
Iteration   1: 12,800 us/op

# Run progress: 36,41% complete, ETA 00:01:48
# Fork: 5 of 5
# Warmup Iteration   1: 16,800 us/op
Iteration   1: 1,700 us/op


Result "de.codecentric.fpl.Consume.getLast":
  N = 5
  mean =     10,740 ±(99.9%) 38,048 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 2 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 2 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 1 

  Percentiles, us/op:
      p(0,0000) =      1,300 us/op
     p(50,0000) =     12,600 us/op
     p(90,0000) =     25,300 us/op
     p(95,0000) =     25,300 us/op
     p(99,0000) =     25,300 us/op
     p(99,9000) =     25,300 us/op
     p(99,9900) =     25,300 us/op
     p(99,9990) =     25,300 us/op
     p(99,9999) =     25,300 us/op
    p(100,0000) =     25,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getLast
# Parameters: (size = 1000)

# Run progress: 36,55% complete, ETA 00:01:47
# Fork: 1 of 5
# Warmup Iteration   1: 17,500 us/op
Iteration   1: 1,400 us/op

# Run progress: 36,69% complete, ETA 00:01:47
# Fork: 2 of 5
# Warmup Iteration   1: 8,000 us/op
Iteration   1: 18,600 us/op

# Run progress: 36,83% complete, ETA 00:01:47
# Fork: 3 of 5
# Warmup Iteration   1: 6,600 us/op
Iteration   1: 18,500 us/op

# Run progress: 36,97% complete, ETA 00:01:47
# Fork: 4 of 5
# Warmup Iteration   1: 18,000 us/op
Iteration   1: 1,300 us/op

# Run progress: 37,10% complete, ETA 00:01:46
# Fork: 5 of 5
# Warmup Iteration   1: 18,500 us/op
Iteration   1: 1,800 us/op


Result "de.codecentric.fpl.Consume.getLast":
  N = 5
  mean =      8,320 ±(99.9%) 35,967 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 3 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 0 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 2 

  Percentiles, us/op:
      p(0,0000) =      1,300 us/op
     p(50,0000) =      1,800 us/op
     p(90,0000) =     18,600 us/op
     p(95,0000) =     18,600 us/op
     p(99,0000) =     18,600 us/op
     p(99,9000) =     18,600 us/op
     p(99,9900) =     18,600 us/op
     p(99,9990) =     18,600 us/op
     p(99,9999) =     18,600 us/op
    p(100,0000) =     18,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.getLast
# Parameters: (size = 10000)

# Run progress: 37,24% complete, ETA 00:01:46
# Fork: 1 of 5
# Warmup Iteration   1: 8,100 us/op
Iteration   1: 13,200 us/op

# Run progress: 37,38% complete, ETA 00:01:48
# Fork: 2 of 5
# Warmup Iteration   1: 9,500 us/op
Iteration   1: 37,000 us/op

# Run progress: 37,52% complete, ETA 00:01:47
# Fork: 3 of 5
# Warmup Iteration   1: 20,500 us/op
Iteration   1: 1,900 us/op

# Run progress: 37,66% complete, ETA 00:01:47
# Fork: 4 of 5
# Warmup Iteration   1: 27,100 us/op
Iteration   1: 2,800 us/op

# Run progress: 37,79% complete, ETA 00:01:47
# Fork: 5 of 5
# Warmup Iteration   1: 23,500 us/op
Iteration   1: 1,600 us/op


Result "de.codecentric.fpl.Consume.getLast":
  N = 5
  mean =     11,300 ±(99.9%) 58,360 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 2 
    [ 2,500,  5,000) = 1 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 1 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 0 
    [30,000, 32,500) = 0 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 1 

  Percentiles, us/op:
      p(0,0000) =      1,600 us/op
     p(50,0000) =      2,800 us/op
     p(90,0000) =     37,000 us/op
     p(95,0000) =     37,000 us/op
     p(99,0000) =     37,000 us/op
     p(99,9000) =     37,000 us/op
     p(99,9900) =     37,000 us/op
     p(99,9990) =     37,000 us/op
     p(99,9999) =     37,000 us/op
    p(100,0000) =     37,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.recursiveSplit
# Parameters: (size = 1)

# Run progress: 37,93% complete, ETA 00:01:47
# Fork: 1 of 5
# Warmup Iteration   1: 8,600 us/op
Iteration   1: 1,700 us/op

# Run progress: 38,07% complete, ETA 00:01:47
# Fork: 2 of 5
# Warmup Iteration   1: 9,600 us/op
Iteration   1: 1,900 us/op

# Run progress: 38,21% complete, ETA 00:01:46
# Fork: 3 of 5
# Warmup Iteration   1: 10,500 us/op
Iteration   1: 2,200 us/op

# Run progress: 38,34% complete, ETA 00:01:46
# Fork: 4 of 5
# Warmup Iteration   1: 10,100 us/op
Iteration   1: 2,300 us/op

# Run progress: 38,48% complete, ETA 00:01:46
# Fork: 5 of 5
# Warmup Iteration   1: 13,800 us/op
Iteration   1: 2,500 us/op


Result "de.codecentric.fpl.Consume.recursiveSplit":
  N = 5
  mean =      2,120 ±(99.9%) 1,230 us/op

  Histogram, us/op:
    [1,700, 1,750) = 0 
    [1,750, 1,800) = 0 
    [1,800, 1,850) = 0 
    [1,850, 1,900) = 0 
    [1,900, 1,950) = 0 
    [1,950, 2,000) = 0 
    [2,000, 2,050) = 0 
    [2,050, 2,100) = 0 
    [2,100, 2,150) = 0 
    [2,150, 2,200) = 0 
    [2,200, 2,250) = 0 
    [2,250, 2,300) = 0 
    [2,300, 2,350) = 0 
    [2,350, 2,400) = 0 
    [2,400, 2,450) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,700 us/op
     p(50,0000) =      2,200 us/op
     p(90,0000) =      2,500 us/op
     p(95,0000) =      2,500 us/op
     p(99,0000) =      2,500 us/op
     p(99,9000) =      2,500 us/op
     p(99,9900) =      2,500 us/op
     p(99,9990) =      2,500 us/op
     p(99,9999) =      2,500 us/op
    p(100,0000) =      2,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.recursiveSplit
# Parameters: (size = 10)

# Run progress: 38,62% complete, ETA 00:01:46
# Fork: 1 of 5
# Warmup Iteration   1: 23,700 us/op
Iteration   1: 13,000 us/op

# Run progress: 38,76% complete, ETA 00:01:45
# Fork: 2 of 5
# Warmup Iteration   1: 25,300 us/op
Iteration   1: 15,300 us/op

# Run progress: 38,90% complete, ETA 00:01:45
# Fork: 3 of 5
# Warmup Iteration   1: 24,400 us/op
Iteration   1: 14,400 us/op

# Run progress: 39,03% complete, ETA 00:01:45
# Fork: 4 of 5
# Warmup Iteration   1: 30,300 us/op
Iteration   1: 14,000 us/op

# Run progress: 39,17% complete, ETA 00:01:45
# Fork: 5 of 5
# Warmup Iteration   1: 25,500 us/op
Iteration   1: 15,600 us/op


Result "de.codecentric.fpl.Consume.recursiveSplit":
  N = 5
  mean =     14,460 ±(99.9%) 4,017 us/op

  Histogram, us/op:
    [13,000, 13,250) = 1 
    [13,250, 13,500) = 0 
    [13,500, 13,750) = 0 
    [13,750, 14,000) = 0 
    [14,000, 14,250) = 1 
    [14,250, 14,500) = 1 
    [14,500, 14,750) = 0 
    [14,750, 15,000) = 0 
    [15,000, 15,250) = 0 
    [15,250, 15,500) = 1 
    [15,500, 15,750) = 1 

  Percentiles, us/op:
      p(0,0000) =     13,000 us/op
     p(50,0000) =     14,400 us/op
     p(90,0000) =     15,600 us/op
     p(95,0000) =     15,600 us/op
     p(99,0000) =     15,600 us/op
     p(99,9000) =     15,600 us/op
     p(99,9900) =     15,600 us/op
     p(99,9990) =     15,600 us/op
     p(99,9999) =     15,600 us/op
    p(100,0000) =     15,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.recursiveSplit
# Parameters: (size = 100)

# Run progress: 39,31% complete, ETA 00:01:44
# Fork: 1 of 5
# Warmup Iteration   1: 149,700 us/op
Iteration   1: 121,100 us/op

# Run progress: 39,45% complete, ETA 00:01:44
# Fork: 2 of 5
# Warmup Iteration   1: 186,200 us/op
Iteration   1: 153,800 us/op

# Run progress: 39,59% complete, ETA 00:01:44
# Fork: 3 of 5
# Warmup Iteration   1: 186,300 us/op
Iteration   1: 129,800 us/op

# Run progress: 39,72% complete, ETA 00:01:44
# Fork: 4 of 5
# Warmup Iteration   1: 173,000 us/op
Iteration   1: 127,200 us/op

# Run progress: 39,86% complete, ETA 00:01:43
# Fork: 5 of 5
# Warmup Iteration   1: 154,000 us/op
Iteration   1: 134,500 us/op


Result "de.codecentric.fpl.Consume.recursiveSplit":
  N = 5
  mean =    133,280 ±(99.9%) 47,940 us/op

  Histogram, us/op:
    [120,000, 122,500) = 1 
    [122,500, 125,000) = 0 
    [125,000, 127,500) = 1 
    [127,500, 130,000) = 1 
    [130,000, 132,500) = 0 
    [132,500, 135,000) = 1 
    [135,000, 137,500) = 0 
    [137,500, 140,000) = 0 
    [140,000, 142,500) = 0 
    [142,500, 145,000) = 0 
    [145,000, 147,500) = 0 
    [147,500, 150,000) = 0 
    [150,000, 152,500) = 0 
    [152,500, 155,000) = 1 
    [155,000, 157,500) = 0 

  Percentiles, us/op:
      p(0,0000) =    121,100 us/op
     p(50,0000) =    129,800 us/op
     p(90,0000) =    153,800 us/op
     p(95,0000) =    153,800 us/op
     p(99,0000) =    153,800 us/op
     p(99,9000) =    153,800 us/op
     p(99,9900) =    153,800 us/op
     p(99,9990) =    153,800 us/op
     p(99,9999) =    153,800 us/op
    p(100,0000) =    153,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.recursiveSplit
# Parameters: (size = 1000)

# Run progress: 40,00% complete, ETA 00:01:43
# Fork: 1 of 5
# Warmup Iteration   1: 956,700 us/op
Iteration   1: 269,800 us/op

# Run progress: 40,14% complete, ETA 00:01:43
# Fork: 2 of 5
# Warmup Iteration   1: 886,000 us/op
Iteration   1: 275,300 us/op

# Run progress: 40,28% complete, ETA 00:01:43
# Fork: 3 of 5
# Warmup Iteration   1: 1302,700 us/op
Iteration   1: 270,100 us/op

# Run progress: 40,41% complete, ETA 00:01:42
# Fork: 4 of 5
# Warmup Iteration   1: 883,500 us/op
Iteration   1: 267,900 us/op

# Run progress: 40,55% complete, ETA 00:01:42
# Fork: 5 of 5
# Warmup Iteration   1: 861,400 us/op
Iteration   1: 268,900 us/op


Result "de.codecentric.fpl.Consume.recursiveSplit":
  N = 5
  mean =    270,400 ±(99.9%) 11,053 us/op

  Histogram, us/op:
    [267,000, 267,500) = 0 
    [267,500, 268,000) = 1 
    [268,000, 268,500) = 0 
    [268,500, 269,000) = 1 
    [269,000, 269,500) = 0 
    [269,500, 270,000) = 1 
    [270,000, 270,500) = 1 
    [270,500, 271,000) = 0 
    [271,000, 271,500) = 0 
    [271,500, 272,000) = 0 
    [272,000, 272,500) = 0 
    [272,500, 273,000) = 0 
    [273,000, 273,500) = 0 
    [273,500, 274,000) = 0 
    [274,000, 274,500) = 0 
    [274,500, 275,000) = 0 
    [275,000, 275,500) = 1 

  Percentiles, us/op:
      p(0,0000) =    267,900 us/op
     p(50,0000) =    269,800 us/op
     p(90,0000) =    275,300 us/op
     p(95,0000) =    275,300 us/op
     p(99,0000) =    275,300 us/op
     p(99,9000) =    275,300 us/op
     p(99,9900) =    275,300 us/op
     p(99,9990) =    275,300 us/op
     p(99,9999) =    275,300 us/op
    p(100,0000) =    275,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Consume.recursiveSplit
# Parameters: (size = 10000)

# Run progress: 40,69% complete, ETA 00:01:42
# Fork: 1 of 5
# Warmup Iteration   1: 2673,400 us/op
Iteration   1: 1728,200 us/op

# Run progress: 40,83% complete, ETA 00:01:42
# Fork: 2 of 5
# Warmup Iteration   1: 2864,700 us/op
Iteration   1: 1645,200 us/op

# Run progress: 40,97% complete, ETA 00:01:41
# Fork: 3 of 5
# Warmup Iteration   1: 2776,300 us/op
Iteration   1: 1708,300 us/op

# Run progress: 41,10% complete, ETA 00:01:41
# Fork: 4 of 5
# Warmup Iteration   1: 2734,000 us/op
Iteration   1: 1712,900 us/op

# Run progress: 41,24% complete, ETA 00:01:41
# Fork: 5 of 5
# Warmup Iteration   1: 2827,400 us/op
Iteration   1: 1738,500 us/op


Result "de.codecentric.fpl.Consume.recursiveSplit":
  N = 5
  mean =   1706,620 ±(99.9%) 140,122 us/op

  Histogram, us/op:
    [1640,000, 1650,000) = 1 
    [1650,000, 1660,000) = 0 
    [1660,000, 1670,000) = 0 
    [1670,000, 1680,000) = 0 
    [1680,000, 1690,000) = 0 
    [1690,000, 1700,000) = 0 
    [1700,000, 1710,000) = 1 
    [1710,000, 1720,000) = 1 
    [1720,000, 1730,000) = 1 

  Percentiles, us/op:
      p(0,0000) =   1645,200 us/op
     p(50,0000) =   1712,900 us/op
     p(90,0000) =   1738,500 us/op
     p(95,0000) =   1738,500 us/op
     p(99,0000) =   1738,500 us/op
     p(99,9000) =   1738,500 us/op
     p(99,9900) =   1738,500 us/op
     p(99,9990) =   1738,500 us/op
     p(99,9999) =   1738,500 us/op
    p(100,0000) =   1738,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf
# Parameters: (size = 1)

# Run progress: 41,38% complete, ETA 00:01:41
# Fork: 1 of 5
# Warmup Iteration   1: 17,300 us/op
Iteration   1: 2,000 us/op

# Run progress: 41,52% complete, ETA 00:01:40
# Fork: 2 of 5
# Warmup Iteration   1: 18,100 us/op
Iteration   1: 2,300 us/op

# Run progress: 41,66% complete, ETA 00:01:40
# Fork: 3 of 5
# Warmup Iteration   1: 9,100 us/op
Iteration   1: 28,400 us/op

# Run progress: 41,79% complete, ETA 00:01:40
# Fork: 4 of 5
# Warmup Iteration   1: 8,700 us/op
Iteration   1: 15,300 us/op

# Run progress: 41,93% complete, ETA 00:01:40
# Fork: 5 of 5
# Warmup Iteration   1: 8,500 us/op
Iteration   1: 25,900 us/op


Result "de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf":
  N = 5
  mean =     14,780 ±(99.9%) 48,268 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 2 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 1 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 1 

  Percentiles, us/op:
      p(0,0000) =      2,000 us/op
     p(50,0000) =     15,300 us/op
     p(90,0000) =     28,400 us/op
     p(95,0000) =     28,400 us/op
     p(99,0000) =     28,400 us/op
     p(99,9000) =     28,400 us/op
     p(99,9900) =     28,400 us/op
     p(99,9990) =     28,400 us/op
     p(99,9999) =     28,400 us/op
    p(100,0000) =     28,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf
# Parameters: (size = 10)

# Run progress: 42,07% complete, ETA 00:01:40
# Fork: 1 of 5
# Warmup Iteration   1: 19,000 us/op
Iteration   1: 2,300 us/op

# Run progress: 42,21% complete, ETA 00:01:39
# Fork: 2 of 5
# Warmup Iteration   1: 8,000 us/op
Iteration   1: 16,200 us/op

# Run progress: 42,34% complete, ETA 00:01:39
# Fork: 3 of 5
# Warmup Iteration   1: 18,500 us/op
Iteration   1: 2,000 us/op

# Run progress: 42,48% complete, ETA 00:01:39
# Fork: 4 of 5
# Warmup Iteration   1: 19,100 us/op
Iteration   1: 2,100 us/op

# Run progress: 42,62% complete, ETA 00:01:39
# Fork: 5 of 5
# Warmup Iteration   1: 8,100 us/op
Iteration   1: 20,300 us/op


Result "de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf":
  N = 5
  mean =      8,580 ±(99.9%) 34,449 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 3 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 1 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 1 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,000 us/op
     p(50,0000) =      2,300 us/op
     p(90,0000) =     20,300 us/op
     p(95,0000) =     20,300 us/op
     p(99,0000) =     20,300 us/op
     p(99,9000) =     20,300 us/op
     p(99,9900) =     20,300 us/op
     p(99,9990) =     20,300 us/op
     p(99,9999) =     20,300 us/op
    p(100,0000) =     20,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf
# Parameters: (size = 100)

# Run progress: 42,76% complete, ETA 00:01:38
# Fork: 1 of 5
# Warmup Iteration   1: 7,500 us/op
Iteration   1: 14,300 us/op

# Run progress: 42,90% complete, ETA 00:01:38
# Fork: 2 of 5
# Warmup Iteration   1: 8,200 us/op
Iteration   1: 18,800 us/op

# Run progress: 43,03% complete, ETA 00:01:38
# Fork: 3 of 5
# Warmup Iteration   1: 17,200 us/op
Iteration   1: 2,000 us/op

# Run progress: 43,17% complete, ETA 00:01:38
# Fork: 4 of 5
# Warmup Iteration   1: 17,400 us/op
Iteration   1: 2,000 us/op

# Run progress: 43,31% complete, ETA 00:01:37
# Fork: 5 of 5
# Warmup Iteration   1: 22,300 us/op
Iteration   1: 2,100 us/op


Result "de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf":
  N = 5
  mean =      7,840 ±(99.9%) 31,224 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 3 
    [ 2,500,  3,750) = 0 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 1 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,000 us/op
     p(50,0000) =      2,100 us/op
     p(90,0000) =     18,800 us/op
     p(95,0000) =     18,800 us/op
     p(99,0000) =     18,800 us/op
     p(99,9000) =     18,800 us/op
     p(99,9900) =     18,800 us/op
     p(99,9990) =     18,800 us/op
     p(99,9999) =     18,800 us/op
    p(100,0000) =     18,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf
# Parameters: (size = 1000)

# Run progress: 43,45% complete, ETA 00:01:37
# Fork: 1 of 5
# Warmup Iteration   1: 11,700 us/op
Iteration   1: 24,000 us/op

# Run progress: 43,59% complete, ETA 00:01:37
# Fork: 2 of 5
# Warmup Iteration   1: 10,200 us/op
Iteration   1: 21,500 us/op

# Run progress: 43,72% complete, ETA 00:01:37
# Fork: 3 of 5
# Warmup Iteration   1: 9,400 us/op
Iteration   1: 30,400 us/op

# Run progress: 43,86% complete, ETA 00:01:37
# Fork: 4 of 5
# Warmup Iteration   1: 8,700 us/op
Iteration   1: 15,200 us/op

# Run progress: 44,00% complete, ETA 00:01:36
# Fork: 5 of 5
# Warmup Iteration   1: 20,100 us/op
Iteration   1: 4,000 us/op


Result "de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf":
  N = 5
  mean =     19,020 ±(99.9%) 38,538 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 1 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 1 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 1 
    [22,500, 25,000) = 1 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 0 
    [30,000, 32,500) = 1 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      4,000 us/op
     p(50,0000) =     21,500 us/op
     p(90,0000) =     30,400 us/op
     p(95,0000) =     30,400 us/op
     p(99,0000) =     30,400 us/op
     p(99,9000) =     30,400 us/op
     p(99,9900) =     30,400 us/op
     p(99,9990) =     30,400 us/op
     p(99,9999) =     30,400 us/op
    p(100,0000) =     30,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf
# Parameters: (size = 10000)

# Run progress: 44,14% complete, ETA 00:01:36
# Fork: 1 of 5
# Warmup Iteration   1: 30,400 us/op
Iteration   1: 15,900 us/op

# Run progress: 44,28% complete, ETA 00:01:36
# Fork: 2 of 5
# Warmup Iteration   1: 28,900 us/op
Iteration   1: 49,600 us/op

# Run progress: 44,41% complete, ETA 00:01:36
# Fork: 3 of 5
# Warmup Iteration   1: 20,500 us/op
Iteration   1: 28,400 us/op

# Run progress: 44,55% complete, ETA 00:01:35
# Fork: 4 of 5
# Warmup Iteration   1: 32,800 us/op
Iteration   1: 16,900 us/op

# Run progress: 44,69% complete, ETA 00:01:35
# Fork: 5 of 5
# Warmup Iteration   1: 23,000 us/op
Iteration   1: 28,300 us/op


Result "de.codecentric.fpl.CopyOfVsNewAndArraycopy.withCopyOf":
  N = 5
  mean =     27,820 ±(99.9%) 52,242 us/op

  Histogram, us/op:
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 2 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 2 
    [30,000, 32,500) = 0 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 0 
    [37,500, 40,000) = 0 
    [40,000, 42,500) = 0 
    [42,500, 45,000) = 0 
    [45,000, 47,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     15,900 us/op
     p(50,0000) =     28,300 us/op
     p(90,0000) =     49,600 us/op
     p(95,0000) =     49,600 us/op
     p(99,0000) =     49,600 us/op
     p(99,9000) =     49,600 us/op
     p(99,9900) =     49,600 us/op
     p(99,9990) =     49,600 us/op
     p(99,9999) =     49,600 us/op
    p(100,0000) =     49,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy
# Parameters: (size = 1)

# Run progress: 44,83% complete, ETA 00:01:35
# Fork: 1 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2 out of bounds for int[1]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 44,97% complete, ETA 00:01:35
# Fork: 2 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2 out of bounds for int[1]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 45,10% complete, ETA 00:01:34
# Fork: 3 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2 out of bounds for int[1]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 45,24% complete, ETA 00:01:34
# Fork: 4 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2 out of bounds for int[1]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 45,38% complete, ETA 00:01:34
# Fork: 5 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2 out of bounds for int[1]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy
# Parameters: (size = 10)

# Run progress: 45,52% complete, ETA 00:01:33
# Fork: 1 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20 out of bounds for int[10]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 45,66% complete, ETA 00:01:33
# Fork: 2 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20 out of bounds for int[10]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 45,79% complete, ETA 00:01:33
# Fork: 3 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20 out of bounds for int[10]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 45,93% complete, ETA 00:01:33
# Fork: 4 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20 out of bounds for int[10]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 46,07% complete, ETA 00:01:32
# Fork: 5 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20 out of bounds for int[10]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy
# Parameters: (size = 100)

# Run progress: 46,21% complete, ETA 00:01:32
# Fork: 1 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 200 out of bounds for int[100]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 46,34% complete, ETA 00:01:32
# Fork: 2 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 200 out of bounds for int[100]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 46,48% complete, ETA 00:01:32
# Fork: 3 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 200 out of bounds for int[100]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 46,62% complete, ETA 00:01:31
# Fork: 4 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 200 out of bounds for int[100]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 46,76% complete, ETA 00:01:31
# Fork: 5 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 200 out of bounds for int[100]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy
# Parameters: (size = 1000)

# Run progress: 46,90% complete, ETA 00:01:31
# Fork: 1 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2000 out of bounds for int[1000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 47,03% complete, ETA 00:01:31
# Fork: 2 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2000 out of bounds for int[1000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 47,17% complete, ETA 00:01:30
# Fork: 3 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2000 out of bounds for int[1000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 47,31% complete, ETA 00:01:30
# Fork: 4 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2000 out of bounds for int[1000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 47,45% complete, ETA 00:01:30
# Fork: 5 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 2000 out of bounds for int[1000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy
# Parameters: (size = 10000)

# Run progress: 47,59% complete, ETA 00:01:30
# Fork: 1 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20000 out of bounds for int[10000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 47,72% complete, ETA 00:01:29
# Fork: 2 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20000 out of bounds for int[10000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 47,86% complete, ETA 00:01:29
# Fork: 3 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20000 out of bounds for int[10000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 48,00% complete, ETA 00:01:29
# Fork: 4 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20000 out of bounds for int[10000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)



# Run progress: 48,14% complete, ETA 00:01:29
# Fork: 5 of 5
# Warmup Iteration   1: <failure>

java.lang.ArrayIndexOutOfBoundsException: arraycopy: last source index 20000 out of bounds for int[10000]
	at java.base/java.lang.System.arraycopy(Native Method)
	at de.codecentric.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy(CopyOfVsNewAndArraycopy.java:47)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_ss_jmhStub(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:416)
	at de.codecentric.fpl.jmh_generated.CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.withNewAndArrayCopy_SingleShotTime(CopyOfVsNewAndArraycopy_withNewAndArrayCopy_jmhTest.java:371)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:475)
	at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:458)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:829)




# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap
# Parameters: (size = 1)

# Run progress: 48,28% complete, ETA 00:01:28
# Fork: 1 of 5
# Warmup Iteration   1: 868,000 us/op
Iteration   1: 35,500 us/op

# Run progress: 48,41% complete, ETA 00:01:28
# Fork: 2 of 5
# Warmup Iteration   1: 875,700 us/op
Iteration   1: 29,300 us/op

# Run progress: 48,55% complete, ETA 00:01:28
# Fork: 3 of 5
# Warmup Iteration   1: 781,000 us/op
Iteration   1: 20,100 us/op

# Run progress: 48,69% complete, ETA 00:01:28
# Fork: 4 of 5
# Warmup Iteration   1: 712,200 us/op
Iteration   1: 26,900 us/op

# Run progress: 48,83% complete, ETA 00:01:27
# Fork: 5 of 5
# Warmup Iteration   1: 759,100 us/op
Iteration   1: 21,000 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap":
  N = 5
  mean =     26,560 ±(99.9%) 24,368 us/op

  Histogram, us/op:
    [20,000, 21,250) = 2 
    [21,250, 22,500) = 0 
    [22,500, 23,750) = 0 
    [23,750, 25,000) = 0 
    [25,000, 26,250) = 0 
    [26,250, 27,500) = 1 
    [27,500, 28,750) = 0 
    [28,750, 30,000) = 1 
    [30,000, 31,250) = 0 
    [31,250, 32,500) = 0 
    [32,500, 33,750) = 0 
    [33,750, 35,000) = 0 
    [35,000, 36,250) = 1 
    [36,250, 37,500) = 0 
    [37,500, 38,750) = 0 

  Percentiles, us/op:
      p(0,0000) =     20,100 us/op
     p(50,0000) =     26,900 us/op
     p(90,0000) =     35,500 us/op
     p(95,0000) =     35,500 us/op
     p(99,0000) =     35,500 us/op
     p(99,9000) =     35,500 us/op
     p(99,9900) =     35,500 us/op
     p(99,9990) =     35,500 us/op
     p(99,9999) =     35,500 us/op
    p(100,0000) =     35,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap
# Parameters: (size = 10)

# Run progress: 48,97% complete, ETA 00:01:27
# Fork: 1 of 5
# Warmup Iteration   1: 780,600 us/op
Iteration   1: 20,900 us/op

# Run progress: 49,10% complete, ETA 00:01:27
# Fork: 2 of 5
# Warmup Iteration   1: 774,000 us/op
Iteration   1: 34,100 us/op

# Run progress: 49,24% complete, ETA 00:01:27
# Fork: 3 of 5
# Warmup Iteration   1: 888,300 us/op
Iteration   1: 21,300 us/op

# Run progress: 49,38% complete, ETA 00:01:26
# Fork: 4 of 5
# Warmup Iteration   1: 753,600 us/op
Iteration   1: 22,300 us/op

# Run progress: 49,52% complete, ETA 00:01:26
# Fork: 5 of 5
# Warmup Iteration   1: 746,700 us/op
Iteration   1: 65,800 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap":
  N = 5
  mean =     32,880 ±(99.9%) 73,938 us/op

  Histogram, us/op:
    [20,000, 25,000) = 3 
    [25,000, 30,000) = 0 
    [30,000, 35,000) = 1 
    [35,000, 40,000) = 0 
    [40,000, 45,000) = 0 
    [45,000, 50,000) = 0 
    [50,000, 55,000) = 0 
    [55,000, 60,000) = 0 
    [60,000, 65,000) = 0 

  Percentiles, us/op:
      p(0,0000) =     20,900 us/op
     p(50,0000) =     22,300 us/op
     p(90,0000) =     65,800 us/op
     p(95,0000) =     65,800 us/op
     p(99,0000) =     65,800 us/op
     p(99,9000) =     65,800 us/op
     p(99,9900) =     65,800 us/op
     p(99,9990) =     65,800 us/op
     p(99,9999) =     65,800 us/op
    p(100,0000) =     65,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap
# Parameters: (size = 100)

# Run progress: 49,66% complete, ETA 00:01:26
# Fork: 1 of 5
# Warmup Iteration   1: 969,800 us/op
Iteration   1: 141,800 us/op

# Run progress: 49,79% complete, ETA 00:01:26
# Fork: 2 of 5
# Warmup Iteration   1: 941,700 us/op
Iteration   1: 195,300 us/op

# Run progress: 49,93% complete, ETA 00:01:25
# Fork: 3 of 5
# Warmup Iteration   1: 945,900 us/op
Iteration   1: 163,500 us/op

# Run progress: 50,07% complete, ETA 00:01:25
# Fork: 4 of 5
# Warmup Iteration   1: 939,000 us/op
Iteration   1: 145,200 us/op

# Run progress: 50,21% complete, ETA 00:01:25
# Fork: 5 of 5
# Warmup Iteration   1: 966,000 us/op
Iteration   1: 191,500 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap":
  N = 5
  mean =    167,460 ±(99.9%) 96,700 us/op

  Histogram, us/op:
    [140,000, 145,000) = 1 
    [145,000, 150,000) = 1 
    [150,000, 155,000) = 0 
    [155,000, 160,000) = 0 
    [160,000, 165,000) = 1 
    [165,000, 170,000) = 0 
    [170,000, 175,000) = 0 
    [175,000, 180,000) = 0 
    [180,000, 185,000) = 0 
    [185,000, 190,000) = 0 
    [190,000, 195,000) = 1 

  Percentiles, us/op:
      p(0,0000) =    141,800 us/op
     p(50,0000) =    163,500 us/op
     p(90,0000) =    195,300 us/op
     p(95,0000) =    195,300 us/op
     p(99,0000) =    195,300 us/op
     p(99,9000) =    195,300 us/op
     p(99,9900) =    195,300 us/op
     p(99,9990) =    195,300 us/op
     p(99,9999) =    195,300 us/op
    p(100,0000) =    195,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap
# Parameters: (size = 1000)

# Run progress: 50,34% complete, ETA 00:01:25
# Fork: 1 of 5
# Warmup Iteration   1: 2021,300 us/op
Iteration   1: 343,000 us/op

# Run progress: 50,48% complete, ETA 00:01:24
# Fork: 2 of 5
# Warmup Iteration   1: 1955,200 us/op
Iteration   1: 358,200 us/op

# Run progress: 50,62% complete, ETA 00:01:24
# Fork: 3 of 5
# Warmup Iteration   1: 2053,100 us/op
Iteration   1: 351,600 us/op

# Run progress: 50,76% complete, ETA 00:01:24
# Fork: 4 of 5
# Warmup Iteration   1: 2154,900 us/op
Iteration   1: 330,600 us/op

# Run progress: 50,90% complete, ETA 00:01:24
# Fork: 5 of 5
# Warmup Iteration   1: 1865,200 us/op
Iteration   1: 364,900 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap":
  N = 5
  mean =    349,660 ±(99.9%) 51,539 us/op

  Histogram, us/op:
    [330,000, 332,500) = 1 
    [332,500, 335,000) = 0 
    [335,000, 337,500) = 0 
    [337,500, 340,000) = 0 
    [340,000, 342,500) = 0 
    [342,500, 345,000) = 1 
    [345,000, 347,500) = 0 
    [347,500, 350,000) = 0 
    [350,000, 352,500) = 1 
    [352,500, 355,000) = 0 
    [355,000, 357,500) = 0 
    [357,500, 360,000) = 1 
    [360,000, 362,500) = 0 
    [362,500, 365,000) = 1 
    [365,000, 367,500) = 0 

  Percentiles, us/op:
      p(0,0000) =    330,600 us/op
     p(50,0000) =    351,600 us/op
     p(90,0000) =    364,900 us/op
     p(95,0000) =    364,900 us/op
     p(99,0000) =    364,900 us/op
     p(99,9000) =    364,900 us/op
     p(99,9900) =    364,900 us/op
     p(99,9990) =    364,900 us/op
     p(99,9999) =    364,900 us/op
    p(100,0000) =    364,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap
# Parameters: (size = 10000)

# Run progress: 51,03% complete, ETA 00:01:24
# Fork: 1 of 5
# Warmup Iteration   1: 4655,400 us/op
Iteration   1: 2332,600 us/op

# Run progress: 51,17% complete, ETA 00:01:23
# Fork: 2 of 5
# Warmup Iteration   1: 4681,400 us/op
Iteration   1: 2251,900 us/op

# Run progress: 51,31% complete, ETA 00:01:23
# Fork: 3 of 5
# Warmup Iteration   1: 4273,400 us/op
Iteration   1: 2136,700 us/op

# Run progress: 51,45% complete, ETA 00:01:23
# Fork: 4 of 5
# Warmup Iteration   1: 4229,600 us/op
Iteration   1: 2103,600 us/op

# Run progress: 51,59% complete, ETA 00:01:23
# Fork: 5 of 5
# Warmup Iteration   1: 4564,800 us/op
Iteration   1: 2195,500 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap":
  N = 5
  mean =   2204,060 ±(99.9%) 352,466 us/op

  Histogram, us/op:
    [2100,000, 2125,000) = 1 
    [2125,000, 2150,000) = 1 
    [2150,000, 2175,000) = 0 
    [2175,000, 2200,000) = 1 
    [2200,000, 2225,000) = 0 
    [2225,000, 2250,000) = 0 
    [2250,000, 2275,000) = 1 
    [2275,000, 2300,000) = 0 
    [2300,000, 2325,000) = 0 
    [2325,000, 2350,000) = 1 
    [2350,000, 2375,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   2103,600 us/op
     p(50,0000) =   2195,500 us/op
     p(90,0000) =   2332,600 us/op
     p(95,0000) =   2332,600 us/op
     p(99,0000) =   2332,600 us/op
     p(99,9000) =   2332,600 us/op
     p(99,9900) =   2332,600 us/op
     p(99,9990) =   2332,600 us/op
     p(99,9999) =   2332,600 us/op
    p(100,0000) =   2332,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap100
# Parameters: (size = 1)

# Run progress: 51,72% complete, ETA 00:01:22
# Fork: 1 of 5
# Warmup Iteration   1: 892,100 us/op
Iteration   1: 47,400 us/op

# Run progress: 51,86% complete, ETA 00:01:22
# Fork: 2 of 5
# Warmup Iteration   1: 744,800 us/op
Iteration   1: 38,300 us/op

# Run progress: 52,00% complete, ETA 00:01:22
# Fork: 3 of 5
# Warmup Iteration   1: 706,600 us/op
Iteration   1: 42,500 us/op

# Run progress: 52,14% complete, ETA 00:01:22
# Fork: 4 of 5
# Warmup Iteration   1: 733,000 us/op
Iteration   1: 50,600 us/op

# Run progress: 52,28% complete, ETA 00:01:22
# Fork: 5 of 5
# Warmup Iteration   1: 674,500 us/op
Iteration   1: 29,600 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap100":
  N = 5
  mean =     41,680 ±(99.9%) 31,654 us/op

  Histogram, us/op:
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 1 
    [30,000, 32,500) = 0 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 0 
    [37,500, 40,000) = 1 
    [40,000, 42,500) = 0 
    [42,500, 45,000) = 1 
    [45,000, 47,500) = 1 
    [47,500, 50,000) = 0 
    [50,000, 52,500) = 1 
    [52,500, 55,000) = 0 
    [55,000, 57,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     29,600 us/op
     p(50,0000) =     42,500 us/op
     p(90,0000) =     50,600 us/op
     p(95,0000) =     50,600 us/op
     p(99,0000) =     50,600 us/op
     p(99,9000) =     50,600 us/op
     p(99,9900) =     50,600 us/op
     p(99,9990) =     50,600 us/op
     p(99,9999) =     50,600 us/op
    p(100,0000) =     50,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap100
# Parameters: (size = 10)

# Run progress: 52,41% complete, ETA 00:01:21
# Fork: 1 of 5
# Warmup Iteration   1: 839,600 us/op
Iteration   1: 117,600 us/op

# Run progress: 52,55% complete, ETA 00:01:21
# Fork: 2 of 5
# Warmup Iteration   1: 981,700 us/op
Iteration   1: 129,400 us/op

# Run progress: 52,69% complete, ETA 00:01:21
# Fork: 3 of 5
# Warmup Iteration   1: 1050,300 us/op
Iteration   1: 114,600 us/op

# Run progress: 52,83% complete, ETA 00:01:21
# Fork: 4 of 5
# Warmup Iteration   1: 965,900 us/op
Iteration   1: 142,500 us/op

# Run progress: 52,97% complete, ETA 00:01:20
# Fork: 5 of 5
# Warmup Iteration   1: 818,900 us/op
Iteration   1: 94,700 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap100":
  N = 5
  mean =    119,760 ±(99.9%) 68,595 us/op

  Histogram, us/op:
    [ 90,000,  95,000) = 1 
    [ 95,000, 100,000) = 0 
    [100,000, 105,000) = 0 
    [105,000, 110,000) = 0 
    [110,000, 115,000) = 1 
    [115,000, 120,000) = 1 
    [120,000, 125,000) = 0 
    [125,000, 130,000) = 1 
    [130,000, 135,000) = 0 
    [135,000, 140,000) = 0 
    [140,000, 145,000) = 1 

  Percentiles, us/op:
      p(0,0000) =     94,700 us/op
     p(50,0000) =    117,600 us/op
     p(90,0000) =    142,500 us/op
     p(95,0000) =    142,500 us/op
     p(99,0000) =    142,500 us/op
     p(99,9000) =    142,500 us/op
     p(99,9900) =    142,500 us/op
     p(99,9990) =    142,500 us/op
     p(99,9999) =    142,500 us/op
    p(100,0000) =    142,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap100
# Parameters: (size = 100)

# Run progress: 53,10% complete, ETA 00:01:20
# Fork: 1 of 5
# Warmup Iteration   1: 1691,900 us/op
Iteration   1: 558,600 us/op

# Run progress: 53,24% complete, ETA 00:01:20
# Fork: 2 of 5
# Warmup Iteration   1: 1683,400 us/op
Iteration   1: 588,100 us/op

# Run progress: 53,38% complete, ETA 00:01:20
# Fork: 3 of 5
# Warmup Iteration   1: 1587,200 us/op
Iteration   1: 574,400 us/op

# Run progress: 53,52% complete, ETA 00:01:19
# Fork: 4 of 5
# Warmup Iteration   1: 1646,200 us/op
Iteration   1: 561,300 us/op

# Run progress: 53,66% complete, ETA 00:01:19
# Fork: 5 of 5
# Warmup Iteration   1: 1589,500 us/op
Iteration   1: 629,000 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap100":
  N = 5
  mean =    582,280 ±(99.9%) 110,259 us/op

  Histogram, us/op:
    [550,000, 555,000) = 0 
    [555,000, 560,000) = 1 
    [560,000, 565,000) = 1 
    [565,000, 570,000) = 0 
    [570,000, 575,000) = 1 
    [575,000, 580,000) = 0 
    [580,000, 585,000) = 0 
    [585,000, 590,000) = 1 
    [590,000, 595,000) = 0 
    [595,000, 600,000) = 0 
    [600,000, 605,000) = 0 
    [605,000, 610,000) = 0 
    [610,000, 615,000) = 0 
    [615,000, 620,000) = 0 
    [620,000, 625,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    558,600 us/op
     p(50,0000) =    574,400 us/op
     p(90,0000) =    629,000 us/op
     p(95,0000) =    629,000 us/op
     p(99,0000) =    629,000 us/op
     p(99,9000) =    629,000 us/op
     p(99,9900) =    629,000 us/op
     p(99,9990) =    629,000 us/op
     p(99,9999) =    629,000 us/op
    p(100,0000) =    629,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap100
# Parameters: (size = 1000)

# Run progress: 53,79% complete, ETA 00:01:19
# Fork: 1 of 5
# Warmup Iteration   1: 5144,600 us/op
Iteration   1: 2050,000 us/op

# Run progress: 53,93% complete, ETA 00:01:19
# Fork: 2 of 5
# Warmup Iteration   1: 5249,300 us/op
Iteration   1: 1933,300 us/op

# Run progress: 54,07% complete, ETA 00:01:18
# Fork: 3 of 5
# Warmup Iteration   1: 5272,600 us/op
Iteration   1: 2025,000 us/op

# Run progress: 54,21% complete, ETA 00:01:18
# Fork: 4 of 5
# Warmup Iteration   1: 5480,200 us/op
Iteration   1: 2324,500 us/op

# Run progress: 54,34% complete, ETA 00:01:18
# Fork: 5 of 5
# Warmup Iteration   1: 5366,800 us/op
Iteration   1: 2004,200 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap100":
  N = 5
  mean =   2067,400 ±(99.9%) 578,167 us/op

  Histogram, us/op:
    [1900,000, 1950,000) = 1 
    [1950,000, 2000,000) = 0 
    [2000,000, 2050,000) = 2 
    [2050,000, 2100,000) = 1 
    [2100,000, 2150,000) = 0 
    [2150,000, 2200,000) = 0 
    [2200,000, 2250,000) = 0 
    [2250,000, 2300,000) = 0 
    [2300,000, 2350,000) = 1 

  Percentiles, us/op:
      p(0,0000) =   1933,300 us/op
     p(50,0000) =   2025,000 us/op
     p(90,0000) =   2324,500 us/op
     p(95,0000) =   2324,500 us/op
     p(99,0000) =   2324,500 us/op
     p(99,9000) =   2324,500 us/op
     p(99,9900) =   2324,500 us/op
     p(99,9990) =   2324,500 us/op
     p(99,9999) =   2324,500 us/op
    p(100,0000) =   2324,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.flatMap100
# Parameters: (size = 10000)

# Run progress: 54,48% complete, ETA 00:01:18
# Fork: 1 of 5
# Warmup Iteration   1: 18859,500 us/op
Iteration   1: 9477,300 us/op

# Run progress: 54,62% complete, ETA 00:01:18
# Fork: 2 of 5
# Warmup Iteration   1: 20436,800 us/op
Iteration   1: 9759,400 us/op

# Run progress: 54,76% complete, ETA 00:01:17
# Fork: 3 of 5
# Warmup Iteration   1: 20894,500 us/op
Iteration   1: 9887,800 us/op

# Run progress: 54,90% complete, ETA 00:01:17
# Fork: 4 of 5
# Warmup Iteration   1: 20580,900 us/op
Iteration   1: 9552,400 us/op

# Run progress: 55,03% complete, ETA 00:01:17
# Fork: 5 of 5
# Warmup Iteration   1: 20671,000 us/op
Iteration   1: 9974,600 us/op


Result "de.codecentric.fpl.MapAndFlatMap.flatMap100":
  N = 5
  mean =   9730,300 ±(99.9%) 819,095 us/op

  Histogram, us/op:
    [ 9400,000,  9450,000) = 0 
    [ 9450,000,  9500,000) = 1 
    [ 9500,000,  9550,000) = 0 
    [ 9550,000,  9600,000) = 1 
    [ 9600,000,  9650,000) = 0 
    [ 9650,000,  9700,000) = 0 
    [ 9700,000,  9750,000) = 0 
    [ 9750,000,  9800,000) = 1 
    [ 9800,000,  9850,000) = 0 
    [ 9850,000,  9900,000) = 1 
    [ 9900,000,  9950,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   9477,300 us/op
     p(50,0000) =   9759,400 us/op
     p(90,0000) =   9974,600 us/op
     p(95,0000) =   9974,600 us/op
     p(99,0000) =   9974,600 us/op
     p(99,9000) =   9974,600 us/op
     p(99,9900) =   9974,600 us/op
     p(99,9990) =   9974,600 us/op
     p(99,9999) =   9974,600 us/op
    p(100,0000) =   9974,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 1)

# Run progress: 55,17% complete, ETA 00:01:17
# Fork: 1 of 5
# Warmup Iteration   1: 530,700 us/op
Iteration   1: 5,100 us/op

# Run progress: 55,31% complete, ETA 00:01:16
# Fork: 2 of 5
# Warmup Iteration   1: 545,800 us/op
Iteration   1: 23,300 us/op

# Run progress: 55,45% complete, ETA 00:01:16
# Fork: 3 of 5
# Warmup Iteration   1: 481,800 us/op
Iteration   1: 4,800 us/op

# Run progress: 55,59% complete, ETA 00:01:16
# Fork: 4 of 5
# Warmup Iteration   1: 467,300 us/op
Iteration   1: 5,700 us/op

# Run progress: 55,72% complete, ETA 00:01:16
# Fork: 5 of 5
# Warmup Iteration   1: 465,100 us/op
Iteration   1: 18,100 us/op


Result "de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =     11,400 ±(99.9%) 33,472 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 1 
    [ 5,000,  7,500) = 2 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 1 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 1 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      4,800 us/op
     p(50,0000) =      5,700 us/op
     p(90,0000) =     23,300 us/op
     p(95,0000) =     23,300 us/op
     p(99,0000) =     23,300 us/op
     p(99,9000) =     23,300 us/op
     p(99,9900) =     23,300 us/op
     p(99,9990) =     23,300 us/op
     p(99,9999) =     23,300 us/op
    p(100,0000) =     23,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 10)

# Run progress: 55,86% complete, ETA 00:01:16
# Fork: 1 of 5
# Warmup Iteration   1: 485,100 us/op
Iteration   1: 19,000 us/op

# Run progress: 56,00% complete, ETA 00:01:15
# Fork: 2 of 5
# Warmup Iteration   1: 477,000 us/op
Iteration   1: 6,100 us/op

# Run progress: 56,14% complete, ETA 00:01:15
# Fork: 3 of 5
# Warmup Iteration   1: 464,400 us/op
Iteration   1: 21,900 us/op

# Run progress: 56,28% complete, ETA 00:01:15
# Fork: 4 of 5
# Warmup Iteration   1: 518,100 us/op
Iteration   1: 6,900 us/op

# Run progress: 56,41% complete, ETA 00:01:15
# Fork: 5 of 5
# Warmup Iteration   1: 461,600 us/op
Iteration   1: 21,800 us/op


Result "de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =     15,140 ±(99.9%) 30,719 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 2 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 1 
    [20,000, 22,500) = 2 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      6,100 us/op
     p(50,0000) =     19,000 us/op
     p(90,0000) =     21,900 us/op
     p(95,0000) =     21,900 us/op
     p(99,0000) =     21,900 us/op
     p(99,9000) =     21,900 us/op
     p(99,9900) =     21,900 us/op
     p(99,9990) =     21,900 us/op
     p(99,9999) =     21,900 us/op
    p(100,0000) =     21,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 100)

# Run progress: 56,55% complete, ETA 00:01:14
# Fork: 1 of 5
# Warmup Iteration   1: 756,000 us/op
Iteration   1: 30,500 us/op

# Run progress: 56,69% complete, ETA 00:01:14
# Fork: 2 of 5
# Warmup Iteration   1: 477,100 us/op
Iteration   1: 32,000 us/op

# Run progress: 56,83% complete, ETA 00:01:14
# Fork: 3 of 5
# Warmup Iteration   1: 509,200 us/op
Iteration   1: 20,100 us/op

# Run progress: 56,97% complete, ETA 00:01:14
# Fork: 4 of 5
# Warmup Iteration   1: 670,100 us/op
Iteration   1: 40,300 us/op

# Run progress: 57,10% complete, ETA 00:01:13
# Fork: 5 of 5
# Warmup Iteration   1: 506,600 us/op
Iteration   1: 37,100 us/op


Result "de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =     32,000 ±(99.9%) 29,750 us/op

  Histogram, us/op:
    [20,000, 22,500) = 1 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 0 
    [30,000, 32,500) = 2 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 1 
    [37,500, 40,000) = 0 
    [40,000, 42,500) = 1 
    [42,500, 45,000) = 0 
    [45,000, 47,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     20,100 us/op
     p(50,0000) =     32,000 us/op
     p(90,0000) =     40,300 us/op
     p(95,0000) =     40,300 us/op
     p(99,0000) =     40,300 us/op
     p(99,9000) =     40,300 us/op
     p(99,9900) =     40,300 us/op
     p(99,9990) =     40,300 us/op
     p(99,9999) =     40,300 us/op
    p(100,0000) =     40,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 1000)

# Run progress: 57,24% complete, ETA 00:01:13
# Fork: 1 of 5
# Warmup Iteration   1: 671,300 us/op
Iteration   1: 64,800 us/op

# Run progress: 57,38% complete, ETA 00:01:13
# Fork: 2 of 5
# Warmup Iteration   1: 696,400 us/op
Iteration   1: 72,400 us/op

# Run progress: 57,52% complete, ETA 00:01:13
# Fork: 3 of 5
# Warmup Iteration   1: 653,300 us/op
Iteration   1: 72,800 us/op

# Run progress: 57,66% complete, ETA 00:01:12
# Fork: 4 of 5
# Warmup Iteration   1: 723,300 us/op
Iteration   1: 76,600 us/op

# Run progress: 57,79% complete, ETA 00:01:12
# Fork: 5 of 5
# Warmup Iteration   1: 740,300 us/op
Iteration   1: 85,500 us/op


Result "de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =     74,420 ±(99.9%) 28,993 us/op

  Histogram, us/op:
    [60,000, 62,500) = 0 
    [62,500, 65,000) = 1 
    [65,000, 67,500) = 0 
    [67,500, 70,000) = 0 
    [70,000, 72,500) = 1 
    [72,500, 75,000) = 1 
    [75,000, 77,500) = 1 
    [77,500, 80,000) = 0 
    [80,000, 82,500) = 0 
    [82,500, 85,000) = 0 
    [85,000, 87,500) = 1 

  Percentiles, us/op:
      p(0,0000) =     64,800 us/op
     p(50,0000) =     72,800 us/op
     p(90,0000) =     85,500 us/op
     p(95,0000) =     85,500 us/op
     p(99,0000) =     85,500 us/op
     p(99,9000) =     85,500 us/op
     p(99,9900) =     85,500 us/op
     p(99,9990) =     85,500 us/op
     p(99,9999) =     85,500 us/op
    p(100,0000) =     85,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 10000)

# Run progress: 57,93% complete, ETA 00:01:12
# Fork: 1 of 5
# Warmup Iteration   1: 1218,800 us/op
Iteration   1: 357,600 us/op

# Run progress: 58,07% complete, ETA 00:01:12
# Fork: 2 of 5
# Warmup Iteration   1: 1242,600 us/op
Iteration   1: 373,200 us/op

# Run progress: 58,21% complete, ETA 00:01:11
# Fork: 3 of 5
# Warmup Iteration   1: 1071,600 us/op
Iteration   1: 330,800 us/op

# Run progress: 58,34% complete, ETA 00:01:11
# Fork: 4 of 5
# Warmup Iteration   1: 1220,400 us/op
Iteration   1: 376,600 us/op

# Run progress: 58,48% complete, ETA 00:01:11
# Fork: 5 of 5
# Warmup Iteration   1: 1186,600 us/op
Iteration   1: 396,400 us/op


Result "de.codecentric.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =    366,920 ±(99.9%) 94,198 us/op

  Histogram, us/op:
    [330,000, 335,000) = 1 
    [335,000, 340,000) = 0 
    [340,000, 345,000) = 0 
    [345,000, 350,000) = 0 
    [350,000, 355,000) = 0 
    [355,000, 360,000) = 1 
    [360,000, 365,000) = 0 
    [365,000, 370,000) = 0 
    [370,000, 375,000) = 1 
    [375,000, 380,000) = 1 
    [380,000, 385,000) = 0 
    [385,000, 390,000) = 0 
    [390,000, 395,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    330,800 us/op
     p(50,0000) =    373,200 us/op
     p(90,0000) =    396,400 us/op
     p(95,0000) =    396,400 us/op
     p(99,0000) =    396,400 us/op
     p(99,9000) =    396,400 us/op
     p(99,9900) =    396,400 us/op
     p(99,9990) =    396,400 us/op
     p(99,9999) =    396,400 us/op
    p(100,0000) =    396,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentRandom
# Parameters: (size = 1)

# Run progress: 58,62% complete, ETA 00:01:11
# Fork: 1 of 5
# Warmup Iteration   1: 2,400 us/op
Iteration   1: 0,700 us/op

# Run progress: 58,76% complete, ETA 00:01:11
# Fork: 2 of 5
# Warmup Iteration   1: 2,600 us/op
Iteration   1: 0,700 us/op

# Run progress: 58,90% complete, ETA 00:01:10
# Fork: 3 of 5
# Warmup Iteration   1: 2,300 us/op
Iteration   1: 0,500 us/op

# Run progress: 59,03% complete, ETA 00:01:10
# Fork: 4 of 5
# Warmup Iteration   1: 2,300 us/op
Iteration   1: 0,600 us/op

# Run progress: 59,17% complete, ETA 00:01:10
# Fork: 5 of 5
# Warmup Iteration   1: 2,200 us/op
Iteration   1: 0,600 us/op


Result "de.codecentric.fpl.Set.set10PercentRandom":
  N = 5
  mean =      0,620 ±(99.9%) 0,322 us/op

  Histogram, us/op:
    [0,500, 0,513) = 1 
    [0,513, 0,525) = 0 
    [0,525, 0,538) = 0 
    [0,538, 0,550) = 0 
    [0,550, 0,563) = 0 
    [0,563, 0,575) = 0 
    [0,575, 0,588) = 0 
    [0,588, 0,600) = 0 
    [0,600, 0,613) = 2 
    [0,613, 0,625) = 0 
    [0,625, 0,638) = 0 
    [0,638, 0,650) = 0 
    [0,650, 0,663) = 0 
    [0,663, 0,675) = 0 
    [0,675, 0,688) = 0 
    [0,688, 0,700) = 0 

  Percentiles, us/op:
      p(0,0000) =      0,500 us/op
     p(50,0000) =      0,600 us/op
     p(90,0000) =      0,700 us/op
     p(95,0000) =      0,700 us/op
     p(99,0000) =      0,700 us/op
     p(99,9000) =      0,700 us/op
     p(99,9900) =      0,700 us/op
     p(99,9990) =      0,700 us/op
     p(99,9999) =      0,700 us/op
    p(100,0000) =      0,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentRandom
# Parameters: (size = 10)

# Run progress: 59,31% complete, ETA 00:01:10
# Fork: 1 of 5
# Warmup Iteration   1: 17,400 us/op
Iteration   1: 22,400 us/op

# Run progress: 59,45% complete, ETA 00:01:09
# Fork: 2 of 5
# Warmup Iteration   1: 24,700 us/op
Iteration   1: 5,800 us/op

# Run progress: 59,59% complete, ETA 00:01:09
# Fork: 3 of 5
# Warmup Iteration   1: 16,600 us/op
Iteration   1: 18,400 us/op

# Run progress: 59,72% complete, ETA 00:01:09
# Fork: 4 of 5
# Warmup Iteration   1: 25,700 us/op
Iteration   1: 6,200 us/op

# Run progress: 59,86% complete, ETA 00:01:09
# Fork: 5 of 5
# Warmup Iteration   1: 25,900 us/op
Iteration   1: 6,000 us/op


Result "de.codecentric.fpl.Set.set10PercentRandom":
  N = 5
  mean =     11,760 ±(99.9%) 30,860 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 3 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 1 
    [20,000, 22,500) = 1 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      5,800 us/op
     p(50,0000) =      6,200 us/op
     p(90,0000) =     22,400 us/op
     p(95,0000) =     22,400 us/op
     p(99,0000) =     22,400 us/op
     p(99,9000) =     22,400 us/op
     p(99,9900) =     22,400 us/op
     p(99,9990) =     22,400 us/op
     p(99,9999) =     22,400 us/op
    p(100,0000) =     22,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentRandom
# Parameters: (size = 100)

# Run progress: 60,00% complete, ETA 00:01:08
# Fork: 1 of 5
# Warmup Iteration   1: 47,100 us/op
Iteration   1: 33,300 us/op

# Run progress: 60,14% complete, ETA 00:01:08
# Fork: 2 of 5
# Warmup Iteration   1: 62,400 us/op
Iteration   1: 16,800 us/op

# Run progress: 60,28% complete, ETA 00:01:08
# Fork: 3 of 5
# Warmup Iteration   1: 70,000 us/op
Iteration   1: 22,000 us/op

# Run progress: 60,41% complete, ETA 00:01:08
# Fork: 4 of 5
# Warmup Iteration   1: 41,600 us/op
Iteration   1: 15,200 us/op

# Run progress: 60,55% complete, ETA 00:01:07
# Fork: 5 of 5
# Warmup Iteration   1: 44,200 us/op
Iteration   1: 18,700 us/op


Result "de.codecentric.fpl.Set.set10PercentRandom":
  N = 5
  mean =     21,200 ±(99.9%) 27,811 us/op

  Histogram, us/op:
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 2 
    [17,500, 20,000) = 1 
    [20,000, 22,500) = 1 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 0 
    [30,000, 32,500) = 0 
    [32,500, 35,000) = 1 
    [35,000, 37,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     15,200 us/op
     p(50,0000) =     18,700 us/op
     p(90,0000) =     33,300 us/op
     p(95,0000) =     33,300 us/op
     p(99,0000) =     33,300 us/op
     p(99,9000) =     33,300 us/op
     p(99,9900) =     33,300 us/op
     p(99,9990) =     33,300 us/op
     p(99,9999) =     33,300 us/op
    p(100,0000) =     33,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentRandom
# Parameters: (size = 1000)

# Run progress: 60,69% complete, ETA 00:01:07
# Fork: 1 of 5
# Warmup Iteration   1: 258,800 us/op
Iteration   1: 192,900 us/op

# Run progress: 60,83% complete, ETA 00:01:07
# Fork: 2 of 5
# Warmup Iteration   1: 240,900 us/op
Iteration   1: 191,400 us/op

# Run progress: 60,97% complete, ETA 00:01:07
# Fork: 3 of 5
# Warmup Iteration   1: 201,500 us/op
Iteration   1: 173,500 us/op

# Run progress: 61,10% complete, ETA 00:01:07
# Fork: 4 of 5
# Warmup Iteration   1: 263,300 us/op
Iteration   1: 171,400 us/op

# Run progress: 61,24% complete, ETA 00:01:06
# Fork: 5 of 5
# Warmup Iteration   1: 234,200 us/op
Iteration   1: 180,000 us/op


Result "de.codecentric.fpl.Set.set10PercentRandom":
  N = 5
  mean =    181,840 ±(99.9%) 38,297 us/op

  Histogram, us/op:
    [170,000, 172,500) = 1 
    [172,500, 175,000) = 1 
    [175,000, 177,500) = 0 
    [177,500, 180,000) = 0 
    [180,000, 182,500) = 1 
    [182,500, 185,000) = 0 
    [185,000, 187,500) = 0 
    [187,500, 190,000) = 0 
    [190,000, 192,500) = 1 
    [192,500, 195,000) = 1 
    [195,000, 197,500) = 0 

  Percentiles, us/op:
      p(0,0000) =    171,400 us/op
     p(50,0000) =    180,000 us/op
     p(90,0000) =    192,900 us/op
     p(95,0000) =    192,900 us/op
     p(99,0000) =    192,900 us/op
     p(99,9000) =    192,900 us/op
     p(99,9900) =    192,900 us/op
     p(99,9990) =    192,900 us/op
     p(99,9999) =    192,900 us/op
    p(100,0000) =    192,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentRandom
# Parameters: (size = 10000)

# Run progress: 61,38% complete, ETA 00:01:06
# Fork: 1 of 5
# Warmup Iteration   1: 8703,900 us/op
Iteration   1: 3848,800 us/op

# Run progress: 61,52% complete, ETA 00:01:06
# Fork: 2 of 5
# Warmup Iteration   1: 8591,500 us/op
Iteration   1: 2638,800 us/op

# Run progress: 61,66% complete, ETA 00:01:06
# Fork: 3 of 5
# Warmup Iteration   1: 9118,200 us/op
Iteration   1: 2820,600 us/op

# Run progress: 61,79% complete, ETA 00:01:05
# Fork: 4 of 5
# Warmup Iteration   1: 8731,900 us/op
Iteration   1: 2746,100 us/op

# Run progress: 61,93% complete, ETA 00:01:05
# Fork: 5 of 5
# Warmup Iteration   1: 8650,300 us/op
Iteration   1: 2695,800 us/op


Result "de.codecentric.fpl.Set.set10PercentRandom":
  N = 5
  mean =   2950,020 ±(99.9%) 1951,733 us/op

  Histogram, us/op:
    [2000,000, 2125,000) = 0 
    [2125,000, 2250,000) = 0 
    [2250,000, 2375,000) = 0 
    [2375,000, 2500,000) = 0 
    [2500,000, 2625,000) = 0 
    [2625,000, 2750,000) = 3 
    [2750,000, 2875,000) = 1 
    [2875,000, 3000,000) = 0 
    [3000,000, 3125,000) = 0 
    [3125,000, 3250,000) = 0 
    [3250,000, 3375,000) = 0 
    [3375,000, 3500,000) = 0 
    [3500,000, 3625,000) = 0 
    [3625,000, 3750,000) = 0 
    [3750,000, 3875,000) = 1 

  Percentiles, us/op:
      p(0,0000) =   2638,800 us/op
     p(50,0000) =   2746,100 us/op
     p(90,0000) =   3848,800 us/op
     p(95,0000) =   3848,800 us/op
     p(99,0000) =   3848,800 us/op
     p(99,9000) =   3848,800 us/op
     p(99,9900) =   3848,800 us/op
     p(99,9990) =   3848,800 us/op
     p(99,9999) =   3848,800 us/op
    p(100,0000) =   3848,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentSequential
# Parameters: (size = 1)

# Run progress: 62,07% complete, ETA 00:01:05
# Fork: 1 of 5
# Warmup Iteration   1: 2,100 us/op
Iteration   1: 0,500 us/op

# Run progress: 62,21% complete, ETA 00:01:05
# Fork: 2 of 5
# Warmup Iteration   1: 2,000 us/op
Iteration   1: 0,600 us/op

# Run progress: 62,34% complete, ETA 00:01:04
# Fork: 3 of 5
# Warmup Iteration   1: 2,200 us/op
Iteration   1: 0,600 us/op

# Run progress: 62,48% complete, ETA 00:01:04
# Fork: 4 of 5
# Warmup Iteration   1: 2,400 us/op
Iteration   1: 0,500 us/op

# Run progress: 62,62% complete, ETA 00:01:04
# Fork: 5 of 5
# Warmup Iteration   1: 2,100 us/op
Iteration   1: 0,500 us/op


Result "de.codecentric.fpl.Set.set10PercentSequential":
  N = 5
  mean =      0,540 ±(99.9%) 0,211 us/op

  Histogram, us/op:
    [0,500, 0,506) = 3 
    [0,506, 0,513) = 0 
    [0,513, 0,519) = 0 
    [0,519, 0,525) = 0 
    [0,525, 0,531) = 0 
    [0,531, 0,538) = 0 
    [0,538, 0,544) = 0 
    [0,544, 0,550) = 0 
    [0,550, 0,556) = 0 
    [0,556, 0,563) = 0 
    [0,563, 0,569) = 0 
    [0,569, 0,575) = 0 
    [0,575, 0,581) = 0 
    [0,581, 0,588) = 0 
    [0,588, 0,594) = 0 
    [0,594, 0,600) = 0 

  Percentiles, us/op:
      p(0,0000) =      0,500 us/op
     p(50,0000) =      0,500 us/op
     p(90,0000) =      0,600 us/op
     p(95,0000) =      0,600 us/op
     p(99,0000) =      0,600 us/op
     p(99,9000) =      0,600 us/op
     p(99,9900) =      0,600 us/op
     p(99,9990) =      0,600 us/op
     p(99,9999) =      0,600 us/op
    p(100,0000) =      0,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentSequential
# Parameters: (size = 10)

# Run progress: 62,76% complete, ETA 00:01:04
# Fork: 1 of 5
# Warmup Iteration   1: 23,100 us/op
Iteration   1: 4,700 us/op

# Run progress: 62,90% complete, ETA 00:01:03
# Fork: 2 of 5
# Warmup Iteration   1: 15,300 us/op
Iteration   1: 16,300 us/op

# Run progress: 63,03% complete, ETA 00:01:03
# Fork: 3 of 5
# Warmup Iteration   1: 15,400 us/op
Iteration   1: 16,600 us/op

# Run progress: 63,17% complete, ETA 00:01:03
# Fork: 4 of 5
# Warmup Iteration   1: 22,600 us/op
Iteration   1: 23,100 us/op

# Run progress: 63,31% complete, ETA 00:01:03
# Fork: 5 of 5
# Warmup Iteration   1: 17,000 us/op
Iteration   1: 26,200 us/op


Result "de.codecentric.fpl.Set.set10PercentSequential":
  N = 5
  mean =     17,380 ±(99.9%) 31,816 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 1 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 2 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 1 
    [25,000, 27,500) = 1 

  Percentiles, us/op:
      p(0,0000) =      4,700 us/op
     p(50,0000) =     16,600 us/op
     p(90,0000) =     26,200 us/op
     p(95,0000) =     26,200 us/op
     p(99,0000) =     26,200 us/op
     p(99,9000) =     26,200 us/op
     p(99,9900) =     26,200 us/op
     p(99,9990) =     26,200 us/op
     p(99,9999) =     26,200 us/op
    p(100,0000) =     26,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentSequential
# Parameters: (size = 100)

# Run progress: 63,45% complete, ETA 00:01:02
# Fork: 1 of 5
# Warmup Iteration   1: 38,100 us/op
Iteration   1: 16,700 us/op

# Run progress: 63,59% complete, ETA 00:01:02
# Fork: 2 of 5
# Warmup Iteration   1: 73,100 us/op
Iteration   1: 18,700 us/op

# Run progress: 63,72% complete, ETA 00:01:02
# Fork: 3 of 5
# Warmup Iteration   1: 47,000 us/op
Iteration   1: 20,500 us/op

# Run progress: 63,86% complete, ETA 00:01:02
# Fork: 4 of 5
# Warmup Iteration   1: 63,800 us/op
Iteration   1: 16,800 us/op

# Run progress: 64,00% complete, ETA 00:01:01
# Fork: 5 of 5
# Warmup Iteration   1: 45,600 us/op
Iteration   1: 22,100 us/op


Result "de.codecentric.fpl.Set.set10PercentSequential":
  N = 5
  mean =     18,960 ±(99.9%) 9,045 us/op

  Histogram, us/op:
    [16,000, 16,500) = 0 
    [16,500, 17,000) = 2 
    [17,000, 17,500) = 0 
    [17,500, 18,000) = 0 
    [18,000, 18,500) = 0 
    [18,500, 19,000) = 1 
    [19,000, 19,500) = 0 
    [19,500, 20,000) = 0 
    [20,000, 20,500) = 0 
    [20,500, 21,000) = 1 
    [21,000, 21,500) = 0 
    [21,500, 22,000) = 0 
    [22,000, 22,500) = 1 

  Percentiles, us/op:
      p(0,0000) =     16,700 us/op
     p(50,0000) =     18,700 us/op
     p(90,0000) =     22,100 us/op
     p(95,0000) =     22,100 us/op
     p(99,0000) =     22,100 us/op
     p(99,9000) =     22,100 us/op
     p(99,9900) =     22,100 us/op
     p(99,9990) =     22,100 us/op
     p(99,9999) =     22,100 us/op
    p(100,0000) =     22,100 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentSequential
# Parameters: (size = 1000)

# Run progress: 64,14% complete, ETA 00:01:01
# Fork: 1 of 5
# Warmup Iteration   1: 231,800 us/op
Iteration   1: 214,500 us/op

# Run progress: 64,28% complete, ETA 00:01:01
# Fork: 2 of 5
# Warmup Iteration   1: 274,300 us/op
Iteration   1: 196,500 us/op

# Run progress: 64,41% complete, ETA 00:01:01
# Fork: 3 of 5
# Warmup Iteration   1: 222,600 us/op
Iteration   1: 175,700 us/op

# Run progress: 64,55% complete, ETA 00:01:01
# Fork: 4 of 5
# Warmup Iteration   1: 228,700 us/op
Iteration   1: 176,700 us/op

# Run progress: 64,69% complete, ETA 00:01:00
# Fork: 5 of 5
# Warmup Iteration   1: 244,000 us/op
Iteration   1: 198,500 us/op


Result "de.codecentric.fpl.Set.set10PercentSequential":
  N = 5
  mean =    192,380 ±(99.9%) 62,914 us/op

  Histogram, us/op:
    [170,000, 175,000) = 0 
    [175,000, 180,000) = 2 
    [180,000, 185,000) = 0 
    [185,000, 190,000) = 0 
    [190,000, 195,000) = 0 
    [195,000, 200,000) = 2 
    [200,000, 205,000) = 0 
    [205,000, 210,000) = 0 
    [210,000, 215,000) = 1 

  Percentiles, us/op:
      p(0,0000) =    175,700 us/op
     p(50,0000) =    196,500 us/op
     p(90,0000) =    214,500 us/op
     p(95,0000) =    214,500 us/op
     p(99,0000) =    214,500 us/op
     p(99,9000) =    214,500 us/op
     p(99,9900) =    214,500 us/op
     p(99,9990) =    214,500 us/op
     p(99,9999) =    214,500 us/op
    p(100,0000) =    214,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.set10PercentSequential
# Parameters: (size = 10000)

# Run progress: 64,83% complete, ETA 00:01:00
# Fork: 1 of 5
# Warmup Iteration   1: 8170,100 us/op
Iteration   1: 3081,900 us/op

# Run progress: 64,97% complete, ETA 00:01:00
# Fork: 2 of 5
# Warmup Iteration   1: 8238,000 us/op
Iteration   1: 2920,400 us/op

# Run progress: 65,10% complete, ETA 00:01:00
# Fork: 3 of 5
# Warmup Iteration   1: 9344,000 us/op
Iteration   1: 3258,500 us/op

# Run progress: 65,24% complete, ETA 00:00:59
# Fork: 4 of 5
# Warmup Iteration   1: 8788,100 us/op
Iteration   1: 3189,800 us/op

# Run progress: 65,38% complete, ETA 00:00:59
# Fork: 5 of 5
# Warmup Iteration   1: 8606,700 us/op
Iteration   1: 3443,400 us/op


Result "de.codecentric.fpl.Set.set10PercentSequential":
  N = 5
  mean =   3178,800 ±(99.9%) 752,223 us/op

  Histogram, us/op:
    [2900,000, 2950,000) = 1 
    [2950,000, 3000,000) = 0 
    [3000,000, 3050,000) = 0 
    [3050,000, 3100,000) = 1 
    [3100,000, 3150,000) = 0 
    [3150,000, 3200,000) = 1 
    [3200,000, 3250,000) = 0 
    [3250,000, 3300,000) = 1 
    [3300,000, 3350,000) = 0 
    [3350,000, 3400,000) = 0 
    [3400,000, 3450,000) = 1 

  Percentiles, us/op:
      p(0,0000) =   2920,400 us/op
     p(50,0000) =   3189,800 us/op
     p(90,0000) =   3443,400 us/op
     p(95,0000) =   3443,400 us/op
     p(99,0000) =   3443,400 us/op
     p(99,9000) =   3443,400 us/op
     p(99,9900) =   3443,400 us/op
     p(99,9990) =   3443,400 us/op
     p(99,9999) =   3443,400 us/op
    p(100,0000) =   3443,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllRandom
# Parameters: (size = 1)

# Run progress: 65,52% complete, ETA 00:00:59
# Fork: 1 of 5
# Warmup Iteration   1: 19,400 us/op
Iteration   1: 2,800 us/op

# Run progress: 65,66% complete, ETA 00:00:59
# Fork: 2 of 5
# Warmup Iteration   1: 12,400 us/op
Iteration   1: 13,900 us/op

# Run progress: 65,79% complete, ETA 00:00:58
# Fork: 3 of 5
# Warmup Iteration   1: 19,700 us/op
Iteration   1: 3,800 us/op

# Run progress: 65,93% complete, ETA 00:00:58
# Fork: 4 of 5
# Warmup Iteration   1: 13,000 us/op
Iteration   1: 14,600 us/op

# Run progress: 66,07% complete, ETA 00:00:58
# Fork: 5 of 5
# Warmup Iteration   1: 12,100 us/op
Iteration   1: 14,700 us/op


Result "de.codecentric.fpl.Set.setAllRandom":
  N = 5
  mean =      9,960 ±(99.9%) 23,480 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 0 
    [ 2,500,  3,750) = 1 
    [ 3,750,  5,000) = 1 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 3 
    [15,000, 16,250) = 0 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,800 us/op
     p(50,0000) =     13,900 us/op
     p(90,0000) =     14,700 us/op
     p(95,0000) =     14,700 us/op
     p(99,0000) =     14,700 us/op
     p(99,9000) =     14,700 us/op
     p(99,9900) =     14,700 us/op
     p(99,9990) =     14,700 us/op
     p(99,9999) =     14,700 us/op
    p(100,0000) =     14,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllRandom
# Parameters: (size = 10)

# Run progress: 66,21% complete, ETA 00:00:58
# Fork: 1 of 5
# Warmup Iteration   1: 37,500 us/op
Iteration   1: 12,900 us/op

# Run progress: 66,34% complete, ETA 00:00:57
# Fork: 2 of 5
# Warmup Iteration   1: 38,300 us/op
Iteration   1: 11,800 us/op

# Run progress: 66,48% complete, ETA 00:00:57
# Fork: 3 of 5
# Warmup Iteration   1: 33,900 us/op
Iteration   1: 12,500 us/op

# Run progress: 66,62% complete, ETA 00:00:57
# Fork: 4 of 5
# Warmup Iteration   1: 36,200 us/op
Iteration   1: 13,500 us/op

# Run progress: 66,76% complete, ETA 00:00:57
# Fork: 5 of 5
# Warmup Iteration   1: 38,500 us/op
Iteration   1: 13,300 us/op


Result "de.codecentric.fpl.Set.setAllRandom":
  N = 5
  mean =     12,800 ±(99.9%) 2,612 us/op

  Histogram, us/op:
    [11,000, 11,250) = 0 
    [11,250, 11,500) = 0 
    [11,500, 11,750) = 0 
    [11,750, 12,000) = 1 
    [12,000, 12,250) = 0 
    [12,250, 12,500) = 0 
    [12,500, 12,750) = 1 
    [12,750, 13,000) = 1 
    [13,000, 13,250) = 0 
    [13,250, 13,500) = 1 
    [13,500, 13,750) = 1 

  Percentiles, us/op:
      p(0,0000) =     11,800 us/op
     p(50,0000) =     12,900 us/op
     p(90,0000) =     13,500 us/op
     p(95,0000) =     13,500 us/op
     p(99,0000) =     13,500 us/op
     p(99,9000) =     13,500 us/op
     p(99,9900) =     13,500 us/op
     p(99,9990) =     13,500 us/op
     p(99,9999) =     13,500 us/op
    p(100,0000) =     13,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllRandom
# Parameters: (size = 100)

# Run progress: 66,90% complete, ETA 00:00:57
# Fork: 1 of 5
# Warmup Iteration   1: 153,800 us/op
Iteration   1: 102,200 us/op

# Run progress: 67,03% complete, ETA 00:00:56
# Fork: 2 of 5
# Warmup Iteration   1: 165,600 us/op
Iteration   1: 100,500 us/op

# Run progress: 67,17% complete, ETA 00:00:56
# Fork: 3 of 5
# Warmup Iteration   1: 183,400 us/op
Iteration   1: 108,400 us/op

# Run progress: 67,31% complete, ETA 00:00:56
# Fork: 4 of 5
# Warmup Iteration   1: 290,400 us/op
Iteration   1: 92,000 us/op

# Run progress: 67,45% complete, ETA 00:00:56
# Fork: 5 of 5
# Warmup Iteration   1: 148,000 us/op
Iteration   1: 102,500 us/op


Result "de.codecentric.fpl.Set.setAllRandom":
  N = 5
  mean =    101,120 ±(99.9%) 22,750 us/op

  Histogram, us/op:
    [ 90,000,  91,250) = 0 
    [ 91,250,  92,500) = 1 
    [ 92,500,  93,750) = 0 
    [ 93,750,  95,000) = 0 
    [ 95,000,  96,250) = 0 
    [ 96,250,  97,500) = 0 
    [ 97,500,  98,750) = 0 
    [ 98,750, 100,000) = 0 
    [100,000, 101,250) = 1 
    [101,250, 102,500) = 1 
    [102,500, 103,750) = 1 
    [103,750, 105,000) = 0 
    [105,000, 106,250) = 0 
    [106,250, 107,500) = 0 
    [107,500, 108,750) = 1 

  Percentiles, us/op:
      p(0,0000) =     92,000 us/op
     p(50,0000) =    102,200 us/op
     p(90,0000) =    108,400 us/op
     p(95,0000) =    108,400 us/op
     p(99,0000) =    108,400 us/op
     p(99,9000) =    108,400 us/op
     p(99,9900) =    108,400 us/op
     p(99,9990) =    108,400 us/op
     p(99,9999) =    108,400 us/op
    p(100,0000) =    108,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllRandom
# Parameters: (size = 1000)

# Run progress: 67,59% complete, ETA 00:00:55
# Fork: 1 of 5
# Warmup Iteration   1: 2047,000 us/op
Iteration   1: 1166,600 us/op

# Run progress: 67,72% complete, ETA 00:00:55
# Fork: 2 of 5
# Warmup Iteration   1: 1843,800 us/op
Iteration   1: 1178,500 us/op

# Run progress: 67,86% complete, ETA 00:00:55
# Fork: 3 of 5
# Warmup Iteration   1: 1807,800 us/op
Iteration   1: 1184,500 us/op

# Run progress: 68,00% complete, ETA 00:00:55
# Fork: 4 of 5
# Warmup Iteration   1: 2001,400 us/op
Iteration   1: 1078,500 us/op

# Run progress: 68,14% complete, ETA 00:00:54
# Fork: 5 of 5
# Warmup Iteration   1: 1953,300 us/op
Iteration   1: 1378,900 us/op


Result "de.codecentric.fpl.Set.setAllRandom":
  N = 5
  mean =   1197,400 ±(99.9%) 424,234 us/op

  Histogram, us/op:
    [1000,000, 1025,000) = 0 
    [1025,000, 1050,000) = 0 
    [1050,000, 1075,000) = 0 
    [1075,000, 1100,000) = 1 
    [1100,000, 1125,000) = 0 
    [1125,000, 1150,000) = 0 
    [1150,000, 1175,000) = 1 
    [1175,000, 1200,000) = 2 
    [1200,000, 1225,000) = 0 
    [1225,000, 1250,000) = 0 
    [1250,000, 1275,000) = 0 
    [1275,000, 1300,000) = 0 
    [1300,000, 1325,000) = 0 
    [1325,000, 1350,000) = 0 
    [1350,000, 1375,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1078,500 us/op
     p(50,0000) =   1178,500 us/op
     p(90,0000) =   1378,900 us/op
     p(95,0000) =   1378,900 us/op
     p(99,0000) =   1378,900 us/op
     p(99,9000) =   1378,900 us/op
     p(99,9900) =   1378,900 us/op
     p(99,9990) =   1378,900 us/op
     p(99,9999) =   1378,900 us/op
    p(100,0000) =   1378,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllRandom
# Parameters: (size = 10000)

# Run progress: 68,28% complete, ETA 00:00:54
# Fork: 1 of 5
# Warmup Iteration   1: 45545,000 us/op
Iteration   1: 32545,900 us/op

# Run progress: 68,41% complete, ETA 00:00:54
# Fork: 2 of 5
# Warmup Iteration   1: 44334,800 us/op
Iteration   1: 32927,500 us/op

# Run progress: 68,55% complete, ETA 00:00:54
# Fork: 3 of 5
# Warmup Iteration   1: 44554,900 us/op
Iteration   1: 32662,000 us/op

# Run progress: 68,69% complete, ETA 00:00:54
# Fork: 4 of 5
# Warmup Iteration   1: 62846,500 us/op
Iteration   1: 40530,000 us/op

# Run progress: 68,83% complete, ETA 00:00:53
# Fork: 5 of 5
# Warmup Iteration   1: 47740,400 us/op
Iteration   1: 33471,800 us/op


Result "de.codecentric.fpl.Set.setAllRandom":
  N = 5
  mean =  34427,440 ±(99.9%) 13207,944 us/op

  Histogram, us/op:
    [32000,000, 32500,000) = 0 
    [32500,000, 33000,000) = 3 
    [33000,000, 33500,000) = 1 
    [33500,000, 34000,000) = 0 
    [34000,000, 34500,000) = 0 
    [34500,000, 35000,000) = 0 
    [35000,000, 35500,000) = 0 
    [35500,000, 36000,000) = 0 
    [36000,000, 36500,000) = 0 
    [36500,000, 37000,000) = 0 
    [37000,000, 37500,000) = 0 
    [37500,000, 38000,000) = 0 
    [38000,000, 38500,000) = 0 
    [38500,000, 39000,000) = 0 
    [39000,000, 39500,000) = 0 
    [39500,000, 40000,000) = 0 
    [40000,000, 40500,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  32545,900 us/op
     p(50,0000) =  32927,500 us/op
     p(90,0000) =  40530,000 us/op
     p(95,0000) =  40530,000 us/op
     p(99,0000) =  40530,000 us/op
     p(99,9000) =  40530,000 us/op
     p(99,9900) =  40530,000 us/op
     p(99,9990) =  40530,000 us/op
     p(99,9999) =  40530,000 us/op
    p(100,0000) =  40530,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllSequential
# Parameters: (size = 1)

# Run progress: 68,97% complete, ETA 00:00:53
# Fork: 1 of 5
# Warmup Iteration   1: 20,000 us/op
Iteration   1: 2,600 us/op

# Run progress: 69,10% complete, ETA 00:00:53
# Fork: 2 of 5
# Warmup Iteration   1: 13,500 us/op
Iteration   1: 22,100 us/op

# Run progress: 69,24% complete, ETA 00:00:53
# Fork: 3 of 5
# Warmup Iteration   1: 22,400 us/op
Iteration   1: 3,500 us/op

# Run progress: 69,38% complete, ETA 00:00:52
# Fork: 4 of 5
# Warmup Iteration   1: 12,500 us/op
Iteration   1: 15,300 us/op

# Run progress: 69,52% complete, ETA 00:00:52
# Fork: 5 of 5
# Warmup Iteration   1: 24,800 us/op
Iteration   1: 21,900 us/op


Result "de.codecentric.fpl.Set.setAllSequential":
  N = 5
  mean =     13,080 ±(99.9%) 36,818 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 2 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 1 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 2 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,600 us/op
     p(50,0000) =     15,300 us/op
     p(90,0000) =     22,100 us/op
     p(95,0000) =     22,100 us/op
     p(99,0000) =     22,100 us/op
     p(99,9000) =     22,100 us/op
     p(99,9900) =     22,100 us/op
     p(99,9990) =     22,100 us/op
     p(99,9999) =     22,100 us/op
    p(100,0000) =     22,100 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllSequential
# Parameters: (size = 10)

# Run progress: 69,66% complete, ETA 00:00:52
# Fork: 1 of 5
# Warmup Iteration   1: 40,800 us/op
Iteration   1: 13,500 us/op

# Run progress: 69,79% complete, ETA 00:00:52
# Fork: 2 of 5
# Warmup Iteration   1: 43,100 us/op
Iteration   1: 13,200 us/op

# Run progress: 69,93% complete, ETA 00:00:51
# Fork: 3 of 5
# Warmup Iteration   1: 35,900 us/op
Iteration   1: 12,700 us/op

# Run progress: 70,07% complete, ETA 00:00:51
# Fork: 4 of 5
# Warmup Iteration   1: 41,200 us/op
Iteration   1: 12,600 us/op

# Run progress: 70,21% complete, ETA 00:00:51
# Fork: 5 of 5
# Warmup Iteration   1: 45,400 us/op
Iteration   1: 13,300 us/op


Result "de.codecentric.fpl.Set.setAllSequential":
  N = 5
  mean =     13,060 ±(99.9%) 1,506 us/op

  Histogram, us/op:
    [12,500, 12,600) = 0 
    [12,600, 12,700) = 1 
    [12,700, 12,800) = 1 
    [12,800, 12,900) = 0 
    [12,900, 13,000) = 0 
    [13,000, 13,100) = 0 
    [13,100, 13,200) = 0 
    [13,200, 13,300) = 1 
    [13,300, 13,400) = 1 

  Percentiles, us/op:
      p(0,0000) =     12,600 us/op
     p(50,0000) =     13,200 us/op
     p(90,0000) =     13,500 us/op
     p(95,0000) =     13,500 us/op
     p(99,0000) =     13,500 us/op
     p(99,9000) =     13,500 us/op
     p(99,9900) =     13,500 us/op
     p(99,9990) =     13,500 us/op
     p(99,9999) =     13,500 us/op
    p(100,0000) =     13,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllSequential
# Parameters: (size = 100)

# Run progress: 70,34% complete, ETA 00:00:51
# Fork: 1 of 5
# Warmup Iteration   1: 147,300 us/op
Iteration   1: 98,500 us/op

# Run progress: 70,48% complete, ETA 00:00:51
# Fork: 2 of 5
# Warmup Iteration   1: 152,500 us/op
Iteration   1: 99,200 us/op

# Run progress: 70,62% complete, ETA 00:00:50
# Fork: 3 of 5
# Warmup Iteration   1: 167,900 us/op
Iteration   1: 102,700 us/op

# Run progress: 70,76% complete, ETA 00:00:50
# Fork: 4 of 5
# Warmup Iteration   1: 127,300 us/op
Iteration   1: 86,100 us/op

# Run progress: 70,90% complete, ETA 00:00:50
# Fork: 5 of 5
# Warmup Iteration   1: 129,800 us/op
Iteration   1: 88,500 us/op


Result "de.codecentric.fpl.Set.setAllSequential":
  N = 5
  mean =     95,000 ±(99.9%) 27,943 us/op

  Histogram, us/op:
    [ 80,000,  82,500) = 0 
    [ 82,500,  85,000) = 0 
    [ 85,000,  87,500) = 1 
    [ 87,500,  90,000) = 1 
    [ 90,000,  92,500) = 0 
    [ 92,500,  95,000) = 0 
    [ 95,000,  97,500) = 0 
    [ 97,500, 100,000) = 2 
    [100,000, 102,500) = 0 
    [102,500, 105,000) = 1 
    [105,000, 107,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     86,100 us/op
     p(50,0000) =     98,500 us/op
     p(90,0000) =    102,700 us/op
     p(95,0000) =    102,700 us/op
     p(99,0000) =    102,700 us/op
     p(99,9000) =    102,700 us/op
     p(99,9900) =    102,700 us/op
     p(99,9990) =    102,700 us/op
     p(99,9999) =    102,700 us/op
    p(100,0000) =    102,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllSequential
# Parameters: (size = 1000)

# Run progress: 71,03% complete, ETA 00:00:50
# Fork: 1 of 5
# Warmup Iteration   1: 1801,900 us/op
Iteration   1: 1070,400 us/op

# Run progress: 71,17% complete, ETA 00:00:49
# Fork: 2 of 5
# Warmup Iteration   1: 1930,200 us/op
Iteration   1: 1229,600 us/op

# Run progress: 71,31% complete, ETA 00:00:49
# Fork: 3 of 5
# Warmup Iteration   1: 1864,300 us/op
Iteration   1: 1199,900 us/op

# Run progress: 71,45% complete, ETA 00:00:49
# Fork: 4 of 5
# Warmup Iteration   1: 1895,000 us/op
Iteration   1: 1100,500 us/op

# Run progress: 71,59% complete, ETA 00:00:49
# Fork: 5 of 5
# Warmup Iteration   1: 1859,700 us/op
Iteration   1: 985,400 us/op


Result "de.codecentric.fpl.Set.setAllSequential":
  N = 5
  mean =   1117,160 ±(99.9%) 381,745 us/op

  Histogram, us/op:
    [ 900,000,  925,000) = 0 
    [ 925,000,  950,000) = 0 
    [ 950,000,  975,000) = 0 
    [ 975,000, 1000,000) = 1 
    [1000,000, 1025,000) = 0 
    [1025,000, 1050,000) = 0 
    [1050,000, 1075,000) = 1 
    [1075,000, 1100,000) = 0 
    [1100,000, 1125,000) = 1 
    [1125,000, 1150,000) = 0 
    [1150,000, 1175,000) = 0 
    [1175,000, 1200,000) = 1 
    [1200,000, 1225,000) = 0 
    [1225,000, 1250,000) = 1 
    [1250,000, 1275,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    985,400 us/op
     p(50,0000) =   1100,500 us/op
     p(90,0000) =   1229,600 us/op
     p(95,0000) =   1229,600 us/op
     p(99,0000) =   1229,600 us/op
     p(99,9000) =   1229,600 us/op
     p(99,9900) =   1229,600 us/op
     p(99,9990) =   1229,600 us/op
     p(99,9999) =   1229,600 us/op
    p(100,0000) =   1229,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.fpl.Set.setAllSequential
# Parameters: (size = 10000)

# Run progress: 71,72% complete, ETA 00:00:48
# Fork: 1 of 5
# Warmup Iteration   1: 67248,800 us/op
Iteration   1: 46313,800 us/op

# Run progress: 71,86% complete, ETA 00:00:48
# Fork: 2 of 5
# Warmup Iteration   1: 65432,500 us/op
Iteration   1: 44770,200 us/op

# Run progress: 72,00% complete, ETA 00:00:48
# Fork: 3 of 5
# Warmup Iteration   1: 67164,800 us/op
Iteration   1: 43945,200 us/op

# Run progress: 72,14% complete, ETA 00:00:48
# Fork: 4 of 5
# Warmup Iteration   1: 63359,200 us/op
Iteration   1: 44380,400 us/op

# Run progress: 72,28% complete, ETA 00:00:48
# Fork: 5 of 5
# Warmup Iteration   1: 67759,500 us/op
Iteration   1: 42399,000 us/op


Result "de.codecentric.fpl.Set.setAllSequential":
  N = 5
  mean =  44361,720 ±(99.9%) 5446,851 us/op

  Histogram, us/op:
    [42000,000, 42500,000) = 1 
    [42500,000, 43000,000) = 0 
    [43000,000, 43500,000) = 0 
    [43500,000, 44000,000) = 1 
    [44000,000, 44500,000) = 1 
    [44500,000, 45000,000) = 1 
    [45000,000, 45500,000) = 0 
    [45500,000, 46000,000) = 0 
    [46000,000, 46500,000) = 1 

  Percentiles, us/op:
      p(0,0000) =  42399,000 us/op
     p(50,0000) =  44380,400 us/op
     p(90,0000) =  46313,800 us/op
     p(95,0000) =  46313,800 us/op
     p(99,0000) =  46313,800 us/op
     p(99,9000) =  46313,800 us/op
     p(99,9900) =  46313,800 us/op
     p(99,9990) =  46313,800 us/op
     p(99,9999) =  46313,800 us/op
    p(100,0000) =  46313,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.appendAtStart
# Parameters: (size = 1)

# Run progress: 72,41% complete, ETA 00:00:47
# Fork: 1 of 5
# Warmup Iteration   1: 586,200 us/op
Iteration   1: 23,900 us/op

# Run progress: 72,55% complete, ETA 00:00:47
# Fork: 2 of 5
# Warmup Iteration   1: 557,500 us/op
Iteration   1: 2,400 us/op

# Run progress: 72,69% complete, ETA 00:00:47
# Fork: 3 of 5
# Warmup Iteration   1: 571,300 us/op
Iteration   1: 24,300 us/op

# Run progress: 72,83% complete, ETA 00:00:47
# Fork: 4 of 5
# Warmup Iteration   1: 555,100 us/op
Iteration   1: 29,900 us/op

# Run progress: 72,97% complete, ETA 00:00:46
# Fork: 5 of 5
# Warmup Iteration   1: 458,000 us/op
Iteration   1: 2,000 us/op


Result "de.codecentric.linked.Construct.appendAtStart":
  N = 5
  mean =     16,500 ±(99.9%) 51,093 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 2 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 2 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,000 us/op
     p(50,0000) =     23,900 us/op
     p(90,0000) =     29,900 us/op
     p(95,0000) =     29,900 us/op
     p(99,0000) =     29,900 us/op
     p(99,9000) =     29,900 us/op
     p(99,9900) =     29,900 us/op
     p(99,9990) =     29,900 us/op
     p(99,9999) =     29,900 us/op
    p(100,0000) =     29,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.appendAtStart
# Parameters: (size = 10)

# Run progress: 73,10% complete, ETA 00:00:46
# Fork: 1 of 5
# Warmup Iteration   1: 472,000 us/op
Iteration   1: 3,600 us/op

# Run progress: 73,24% complete, ETA 00:00:46
# Fork: 2 of 5
# Warmup Iteration   1: 532,400 us/op
Iteration   1: 25,900 us/op

# Run progress: 73,38% complete, ETA 00:00:46
# Fork: 3 of 5
# Warmup Iteration   1: 466,400 us/op
Iteration   1: 3,000 us/op

# Run progress: 73,52% complete, ETA 00:00:46
# Fork: 4 of 5
# Warmup Iteration   1: 474,100 us/op
Iteration   1: 3,000 us/op

# Run progress: 73,66% complete, ETA 00:00:45
# Fork: 5 of 5
# Warmup Iteration   1: 585,200 us/op
Iteration   1: 2,900 us/op


Result "de.codecentric.linked.Construct.appendAtStart":
  N = 5
  mean =      7,680 ±(99.9%) 39,234 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 4 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 1 

  Percentiles, us/op:
      p(0,0000) =      2,900 us/op
     p(50,0000) =      3,000 us/op
     p(90,0000) =     25,900 us/op
     p(95,0000) =     25,900 us/op
     p(99,0000) =     25,900 us/op
     p(99,9000) =     25,900 us/op
     p(99,9900) =     25,900 us/op
     p(99,9990) =     25,900 us/op
     p(99,9999) =     25,900 us/op
    p(100,0000) =     25,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.appendAtStart
# Parameters: (size = 100)

# Run progress: 73,79% complete, ETA 00:00:45
# Fork: 1 of 5
# Warmup Iteration   1: 578,100 us/op
Iteration   1: 36,300 us/op

# Run progress: 73,93% complete, ETA 00:00:45
# Fork: 2 of 5
# Warmup Iteration   1: 676,800 us/op
Iteration   1: 42,000 us/op

# Run progress: 74,07% complete, ETA 00:00:45
# Fork: 3 of 5
# Warmup Iteration   1: 711,100 us/op
Iteration   1: 45,700 us/op

# Run progress: 74,21% complete, ETA 00:00:44
# Fork: 4 of 5
# Warmup Iteration   1: 692,200 us/op
Iteration   1: 49,900 us/op

# Run progress: 74,34% complete, ETA 00:00:44
# Fork: 5 of 5
# Warmup Iteration   1: 681,700 us/op
Iteration   1: 61,200 us/op


Result "de.codecentric.linked.Construct.appendAtStart":
  N = 5
  mean =     47,020 ±(99.9%) 36,083 us/op

  Histogram, us/op:
    [30,000, 32,500) = 0 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 1 
    [37,500, 40,000) = 0 
    [40,000, 42,500) = 1 
    [42,500, 45,000) = 0 
    [45,000, 47,500) = 1 
    [47,500, 50,000) = 1 
    [50,000, 52,500) = 0 
    [52,500, 55,000) = 0 
    [55,000, 57,500) = 0 
    [57,500, 60,000) = 0 
    [60,000, 62,500) = 1 
    [62,500, 65,000) = 0 
    [65,000, 67,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     36,300 us/op
     p(50,0000) =     45,700 us/op
     p(90,0000) =     61,200 us/op
     p(95,0000) =     61,200 us/op
     p(99,0000) =     61,200 us/op
     p(99,9000) =     61,200 us/op
     p(99,9900) =     61,200 us/op
     p(99,9990) =     61,200 us/op
     p(99,9999) =     61,200 us/op
    p(100,0000) =     61,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.appendAtStart
# Parameters: (size = 1000)

# Run progress: 74,48% complete, ETA 00:00:44
# Fork: 1 of 5
# Warmup Iteration   1: 867,000 us/op
Iteration   1: 65,400 us/op

# Run progress: 74,62% complete, ETA 00:00:44
# Fork: 2 of 5
# Warmup Iteration   1: 887,800 us/op
Iteration   1: 98,300 us/op

# Run progress: 74,76% complete, ETA 00:00:43
# Fork: 3 of 5
# Warmup Iteration   1: 916,200 us/op
Iteration   1: 63,100 us/op

# Run progress: 74,90% complete, ETA 00:00:43
# Fork: 4 of 5
# Warmup Iteration   1: 828,800 us/op
Iteration   1: 83,700 us/op

# Run progress: 75,03% complete, ETA 00:00:43
# Fork: 5 of 5
# Warmup Iteration   1: 952,100 us/op
Iteration   1: 63,800 us/op


Result "de.codecentric.linked.Construct.appendAtStart":
  N = 5
  mean =     74,860 ±(99.9%) 60,201 us/op

  Histogram, us/op:
    [ 60,000,  62,500) = 0 
    [ 62,500,  65,000) = 2 
    [ 65,000,  67,500) = 1 
    [ 67,500,  70,000) = 0 
    [ 70,000,  72,500) = 0 
    [ 72,500,  75,000) = 0 
    [ 75,000,  77,500) = 0 
    [ 77,500,  80,000) = 0 
    [ 80,000,  82,500) = 0 
    [ 82,500,  85,000) = 1 
    [ 85,000,  87,500) = 0 
    [ 87,500,  90,000) = 0 
    [ 90,000,  92,500) = 0 
    [ 92,500,  95,000) = 0 
    [ 95,000,  97,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     63,100 us/op
     p(50,0000) =     65,400 us/op
     p(90,0000) =     98,300 us/op
     p(95,0000) =     98,300 us/op
     p(99,0000) =     98,300 us/op
     p(99,9000) =     98,300 us/op
     p(99,9900) =     98,300 us/op
     p(99,9990) =     98,300 us/op
     p(99,9999) =     98,300 us/op
    p(100,0000) =     98,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.appendAtStart
# Parameters: (size = 10000)

# Run progress: 75,17% complete, ETA 00:00:43
# Fork: 1 of 5
# Warmup Iteration   1: 1485,700 us/op
Iteration   1: 554,600 us/op

# Run progress: 75,31% complete, ETA 00:00:42
# Fork: 2 of 5
# Warmup Iteration   1: 1588,100 us/op
Iteration   1: 575,000 us/op

# Run progress: 75,45% complete, ETA 00:00:42
# Fork: 3 of 5
# Warmup Iteration   1: 1369,700 us/op
Iteration   1: 544,500 us/op

# Run progress: 75,59% complete, ETA 00:00:42
# Fork: 4 of 5
# Warmup Iteration   1: 1272,000 us/op
Iteration   1: 465,600 us/op

# Run progress: 75,72% complete, ETA 00:00:42
# Fork: 5 of 5
# Warmup Iteration   1: 1332,700 us/op
Iteration   1: 531,200 us/op


Result "de.codecentric.linked.Construct.appendAtStart":
  N = 5
  mean =    534,180 ±(99.9%) 159,951 us/op

  Histogram, us/op:
    [400,000, 412,500) = 0 
    [412,500, 425,000) = 0 
    [425,000, 437,500) = 0 
    [437,500, 450,000) = 0 
    [450,000, 462,500) = 0 
    [462,500, 475,000) = 1 
    [475,000, 487,500) = 0 
    [487,500, 500,000) = 0 
    [500,000, 512,500) = 0 
    [512,500, 525,000) = 0 
    [525,000, 537,500) = 1 
    [537,500, 550,000) = 1 
    [550,000, 562,500) = 1 
    [562,500, 575,000) = 0 
    [575,000, 587,500) = 1 

  Percentiles, us/op:
      p(0,0000) =    465,600 us/op
     p(50,0000) =    544,500 us/op
     p(90,0000) =    575,000 us/op
     p(95,0000) =    575,000 us/op
     p(99,0000) =    575,000 us/op
     p(99,9000) =    575,000 us/op
     p(99,9900) =    575,000 us/op
     p(99,9990) =    575,000 us/op
     p(99,9999) =    575,000 us/op
    p(100,0000) =    575,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.constructFromIterator
# Parameters: (size = 1)

# Run progress: 75,86% complete, ETA 00:00:41
# Fork: 1 of 5
# Warmup Iteration   1: 823,200 us/op
Iteration   1: 26,200 us/op

# Run progress: 76,00% complete, ETA 00:00:41
# Fork: 2 of 5
# Warmup Iteration   1: 651,600 us/op
Iteration   1: 2,600 us/op

# Run progress: 76,14% complete, ETA 00:00:41
# Fork: 3 of 5
# Warmup Iteration   1: 792,300 us/op
Iteration   1: 25,400 us/op

# Run progress: 76,28% complete, ETA 00:00:41
# Fork: 4 of 5
# Warmup Iteration   1: 832,600 us/op
Iteration   1: 2,600 us/op

# Run progress: 76,41% complete, ETA 00:00:40
# Fork: 5 of 5
# Warmup Iteration   1: 805,600 us/op
Iteration   1: 25,700 us/op


Result "de.codecentric.linked.Construct.constructFromIterator":
  N = 5
  mean =     16,500 ±(99.9%) 48,873 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 2 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 3 

  Percentiles, us/op:
      p(0,0000) =      2,600 us/op
     p(50,0000) =     25,400 us/op
     p(90,0000) =     26,200 us/op
     p(95,0000) =     26,200 us/op
     p(99,0000) =     26,200 us/op
     p(99,9000) =     26,200 us/op
     p(99,9900) =     26,200 us/op
     p(99,9990) =     26,200 us/op
     p(99,9999) =     26,200 us/op
    p(100,0000) =     26,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.constructFromIterator
# Parameters: (size = 10)

# Run progress: 76,55% complete, ETA 00:00:40
# Fork: 1 of 5
# Warmup Iteration   1: 761,900 us/op
Iteration   1: 4,400 us/op

# Run progress: 76,69% complete, ETA 00:00:40
# Fork: 2 of 5
# Warmup Iteration   1: 940,900 us/op
Iteration   1: 3,800 us/op

# Run progress: 76,83% complete, ETA 00:00:40
# Fork: 3 of 5
# Warmup Iteration   1: 957,600 us/op
Iteration   1: 29,200 us/op

# Run progress: 76,97% complete, ETA 00:00:40
# Fork: 4 of 5
# Warmup Iteration   1: 964,800 us/op
Iteration   1: 31,400 us/op

# Run progress: 77,10% complete, ETA 00:00:39
# Fork: 5 of 5
# Warmup Iteration   1: 940,800 us/op
Iteration   1: 31,500 us/op


Result "de.codecentric.linked.Construct.constructFromIterator":
  N = 5
  mean =     20,060 ±(99.9%) 56,219 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 0 
    [ 2,500,  5,000) = 2 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 
    [27,500, 30,000) = 1 
    [30,000, 32,500) = 2 
    [32,500, 35,000) = 0 
    [35,000, 37,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      3,800 us/op
     p(50,0000) =     29,200 us/op
     p(90,0000) =     31,500 us/op
     p(95,0000) =     31,500 us/op
     p(99,0000) =     31,500 us/op
     p(99,9000) =     31,500 us/op
     p(99,9900) =     31,500 us/op
     p(99,9990) =     31,500 us/op
     p(99,9999) =     31,500 us/op
    p(100,0000) =     31,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.constructFromIterator
# Parameters: (size = 100)

# Run progress: 77,24% complete, ETA 00:00:39
# Fork: 1 of 5
# Warmup Iteration   1: 1009,600 us/op
Iteration   1: 42,500 us/op

# Run progress: 77,38% complete, ETA 00:00:39
# Fork: 2 of 5
# Warmup Iteration   1: 822,000 us/op
Iteration   1: 45,000 us/op

# Run progress: 77,52% complete, ETA 00:00:39
# Fork: 3 of 5
# Warmup Iteration   1: 852,900 us/op
Iteration   1: 22,000 us/op

# Run progress: 77,66% complete, ETA 00:00:38
# Fork: 4 of 5
# Warmup Iteration   1: 801,900 us/op
Iteration   1: 18,700 us/op

# Run progress: 77,79% complete, ETA 00:00:38
# Fork: 5 of 5
# Warmup Iteration   1: 854,900 us/op
Iteration   1: 57,000 us/op


Result "de.codecentric.linked.Construct.constructFromIterator":
  N = 5
  mean =     37,040 ±(99.9%) 62,510 us/op

  Histogram, us/op:
    [10,000, 15,000) = 0 
    [15,000, 20,000) = 1 
    [20,000, 25,000) = 1 
    [25,000, 30,000) = 0 
    [30,000, 35,000) = 0 
    [35,000, 40,000) = 0 
    [40,000, 45,000) = 1 
    [45,000, 50,000) = 1 
    [50,000, 55,000) = 0 

  Percentiles, us/op:
      p(0,0000) =     18,700 us/op
     p(50,0000) =     42,500 us/op
     p(90,0000) =     57,000 us/op
     p(95,0000) =     57,000 us/op
     p(99,0000) =     57,000 us/op
     p(99,9000) =     57,000 us/op
     p(99,9900) =     57,000 us/op
     p(99,9990) =     57,000 us/op
     p(99,9999) =     57,000 us/op
    p(100,0000) =     57,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.constructFromIterator
# Parameters: (size = 1000)

# Run progress: 77,93% complete, ETA 00:00:38
# Fork: 1 of 5
# Warmup Iteration   1: 1219,000 us/op
Iteration   1: 93,200 us/op

# Run progress: 78,07% complete, ETA 00:00:38
# Fork: 2 of 5
# Warmup Iteration   1: 1380,000 us/op
Iteration   1: 127,400 us/op

# Run progress: 78,21% complete, ETA 00:00:37
# Fork: 3 of 5
# Warmup Iteration   1: 1196,900 us/op
Iteration   1: 116,400 us/op

# Run progress: 78,34% complete, ETA 00:00:37
# Fork: 4 of 5
# Warmup Iteration   1: 1103,400 us/op
Iteration   1: 82,300 us/op

# Run progress: 78,48% complete, ETA 00:00:37
# Fork: 5 of 5
# Warmup Iteration   1: 1078,200 us/op
Iteration   1: 103,900 us/op


Result "de.codecentric.linked.Construct.constructFromIterator":
  N = 5
  mean =    104,640 ±(99.9%) 69,065 us/op

  Histogram, us/op:
    [ 80,000,  85,000) = 1 
    [ 85,000,  90,000) = 0 
    [ 90,000,  95,000) = 1 
    [ 95,000, 100,000) = 0 
    [100,000, 105,000) = 1 
    [105,000, 110,000) = 0 
    [110,000, 115,000) = 0 
    [115,000, 120,000) = 1 
    [120,000, 125,000) = 0 

  Percentiles, us/op:
      p(0,0000) =     82,300 us/op
     p(50,0000) =    103,900 us/op
     p(90,0000) =    127,400 us/op
     p(95,0000) =    127,400 us/op
     p(99,0000) =    127,400 us/op
     p(99,9000) =    127,400 us/op
     p(99,9900) =    127,400 us/op
     p(99,9990) =    127,400 us/op
     p(99,9999) =    127,400 us/op
    p(100,0000) =    127,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Construct.constructFromIterator
# Parameters: (size = 10000)

# Run progress: 78,62% complete, ETA 00:00:37
# Fork: 1 of 5
# Warmup Iteration   1: 1785,600 us/op
Iteration   1: 646,200 us/op

# Run progress: 78,76% complete, ETA 00:00:36
# Fork: 2 of 5
# Warmup Iteration   1: 2054,600 us/op
Iteration   1: 741,800 us/op

# Run progress: 78,90% complete, ETA 00:00:36
# Fork: 3 of 5
# Warmup Iteration   1: 2000,000 us/op
Iteration   1: 638,000 us/op

# Run progress: 79,03% complete, ETA 00:00:36
# Fork: 4 of 5
# Warmup Iteration   1: 1738,800 us/op
Iteration   1: 707,400 us/op

# Run progress: 79,17% complete, ETA 00:00:36
# Fork: 5 of 5
# Warmup Iteration   1: 2000,800 us/op
Iteration   1: 838,000 us/op


Result "de.codecentric.linked.Construct.constructFromIterator":
  N = 5
  mean =    714,280 ±(99.9%) 313,803 us/op

  Histogram, us/op:
    [600,000, 625,000) = 0 
    [625,000, 650,000) = 2 
    [650,000, 675,000) = 0 
    [675,000, 700,000) = 0 
    [700,000, 725,000) = 1 
    [725,000, 750,000) = 1 
    [750,000, 775,000) = 0 
    [775,000, 800,000) = 0 
    [800,000, 825,000) = 0 
    [825,000, 850,000) = 1 
    [850,000, 875,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    638,000 us/op
     p(50,0000) =    707,400 us/op
     p(90,0000) =    838,000 us/op
     p(95,0000) =    838,000 us/op
     p(99,0000) =    838,000 us/op
     p(99,9000) =    838,000 us/op
     p(99,9900) =    838,000 us/op
     p(99,9990) =    838,000 us/op
     p(99,9999) =    838,000 us/op
    p(100,0000) =    838,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.consumeFromStart
# Parameters: (size = 1)

# Run progress: 79,31% complete, ETA 00:00:35
# Fork: 1 of 5
# Warmup Iteration   1: 10,900 us/op
Iteration   1: 5,700 us/op

# Run progress: 79,45% complete, ETA 00:00:35
# Fork: 2 of 5
# Warmup Iteration   1: 15,000 us/op
Iteration   1: 1,900 us/op

# Run progress: 79,59% complete, ETA 00:00:35
# Fork: 3 of 5
# Warmup Iteration   1: 11,100 us/op
Iteration   1: 2,200 us/op

# Run progress: 79,72% complete, ETA 00:00:35
# Fork: 4 of 5
# Warmup Iteration   1: 9,500 us/op
Iteration   1: 1,800 us/op

# Run progress: 79,86% complete, ETA 00:00:34
# Fork: 5 of 5
# Warmup Iteration   1: 10,800 us/op
Iteration   1: 2,000 us/op


Result "de.codecentric.linked.Consume.consumeFromStart":
  N = 5
  mean =      2,720 ±(99.9%) 6,440 us/op

  Histogram, us/op:
    [1,000, 1,500) = 0 
    [1,500, 2,000) = 2 
    [2,000, 2,500) = 2 
    [2,500, 3,000) = 0 
    [3,000, 3,500) = 0 
    [3,500, 4,000) = 0 
    [4,000, 4,500) = 0 
    [4,500, 5,000) = 0 
    [5,000, 5,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,800 us/op
     p(50,0000) =      2,000 us/op
     p(90,0000) =      5,700 us/op
     p(95,0000) =      5,700 us/op
     p(99,0000) =      5,700 us/op
     p(99,9000) =      5,700 us/op
     p(99,9900) =      5,700 us/op
     p(99,9990) =      5,700 us/op
     p(99,9999) =      5,700 us/op
    p(100,0000) =      5,700 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.consumeFromStart
# Parameters: (size = 10)

# Run progress: 80,00% complete, ETA 00:00:34
# Fork: 1 of 5
# Warmup Iteration   1: 19,600 us/op
Iteration   1: 3,400 us/op

# Run progress: 80,14% complete, ETA 00:00:34
# Fork: 2 of 5
# Warmup Iteration   1: 11,800 us/op
Iteration   1: 3,500 us/op

# Run progress: 80,28% complete, ETA 00:00:34
# Fork: 3 of 5
# Warmup Iteration   1: 15,000 us/op
Iteration   1: 3,900 us/op

# Run progress: 80,41% complete, ETA 00:00:34
# Fork: 4 of 5
# Warmup Iteration   1: 19,200 us/op
Iteration   1: 4,000 us/op

# Run progress: 80,55% complete, ETA 00:00:33
# Fork: 5 of 5
# Warmup Iteration   1: 11,800 us/op
Iteration   1: 3,800 us/op


Result "de.codecentric.linked.Consume.consumeFromStart":
  N = 5
  mean =      3,720 ±(99.9%) 0,997 us/op

  Histogram, us/op:
    [3,400, 3,450) = 0 
    [3,450, 3,500) = 0 
    [3,500, 3,550) = 0 
    [3,550, 3,600) = 0 
    [3,600, 3,650) = 0 
    [3,650, 3,700) = 0 
    [3,700, 3,750) = 0 
    [3,750, 3,800) = 0 
    [3,800, 3,850) = 0 
    [3,850, 3,900) = 0 
    [3,900, 3,950) = 0 

  Percentiles, us/op:
      p(0,0000) =      3,400 us/op
     p(50,0000) =      3,800 us/op
     p(90,0000) =      4,000 us/op
     p(95,0000) =      4,000 us/op
     p(99,0000) =      4,000 us/op
     p(99,9000) =      4,000 us/op
     p(99,9900) =      4,000 us/op
     p(99,9990) =      4,000 us/op
     p(99,9999) =      4,000 us/op
    p(100,0000) =      4,000 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.consumeFromStart
# Parameters: (size = 100)

# Run progress: 80,69% complete, ETA 00:00:33
# Fork: 1 of 5
# Warmup Iteration   1: 36,500 us/op
Iteration   1: 23,500 us/op

# Run progress: 80,83% complete, ETA 00:00:33
# Fork: 2 of 5
# Warmup Iteration   1: 32,800 us/op
Iteration   1: 23,800 us/op

# Run progress: 80,97% complete, ETA 00:00:33
# Fork: 3 of 5
# Warmup Iteration   1: 49,000 us/op
Iteration   1: 23,000 us/op

# Run progress: 81,10% complete, ETA 00:00:32
# Fork: 4 of 5
# Warmup Iteration   1: 52,800 us/op
Iteration   1: 23,700 us/op

# Run progress: 81,24% complete, ETA 00:00:32
# Fork: 5 of 5
# Warmup Iteration   1: 33,000 us/op
Iteration   1: 29,800 us/op


Result "de.codecentric.linked.Consume.consumeFromStart":
  N = 5
  mean =     24,760 ±(99.9%) 10,914 us/op

  Histogram, us/op:
    [23,000, 23,500) = 1 
    [23,500, 24,000) = 3 
    [24,000, 24,500) = 0 
    [24,500, 25,000) = 0 
    [25,000, 25,500) = 0 
    [25,500, 26,000) = 0 
    [26,000, 26,500) = 0 
    [26,500, 27,000) = 0 
    [27,000, 27,500) = 0 
    [27,500, 28,000) = 0 
    [28,000, 28,500) = 0 
    [28,500, 29,000) = 0 
    [29,000, 29,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     23,000 us/op
     p(50,0000) =     23,700 us/op
     p(90,0000) =     29,800 us/op
     p(95,0000) =     29,800 us/op
     p(99,0000) =     29,800 us/op
     p(99,9000) =     29,800 us/op
     p(99,9900) =     29,800 us/op
     p(99,9990) =     29,800 us/op
     p(99,9999) =     29,800 us/op
    p(100,0000) =     29,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.consumeFromStart
# Parameters: (size = 1000)

# Run progress: 81,38% complete, ETA 00:00:32
# Fork: 1 of 5
# Warmup Iteration   1: 352,700 us/op
Iteration   1: 82,100 us/op

# Run progress: 81,52% complete, ETA 00:00:32
# Fork: 2 of 5
# Warmup Iteration   1: 281,600 us/op
Iteration   1: 89,100 us/op

# Run progress: 81,66% complete, ETA 00:00:31
# Fork: 3 of 5
# Warmup Iteration   1: 321,100 us/op
Iteration   1: 83,400 us/op

# Run progress: 81,79% complete, ETA 00:00:31
# Fork: 4 of 5
# Warmup Iteration   1: 228,200 us/op
Iteration   1: 86,900 us/op

# Run progress: 81,93% complete, ETA 00:00:31
# Fork: 5 of 5
# Warmup Iteration   1: 309,800 us/op
Iteration   1: 86,900 us/op


Result "de.codecentric.linked.Consume.consumeFromStart":
  N = 5
  mean =     85,680 ±(99.9%) 11,008 us/op

  Histogram, us/op:
    [82,000, 82,500) = 1 
    [82,500, 83,000) = 0 
    [83,000, 83,500) = 1 
    [83,500, 84,000) = 0 
    [84,000, 84,500) = 0 
    [84,500, 85,000) = 0 
    [85,000, 85,500) = 0 
    [85,500, 86,000) = 0 
    [86,000, 86,500) = 0 
    [86,500, 87,000) = 2 
    [87,000, 87,500) = 0 
    [87,500, 88,000) = 0 
    [88,000, 88,500) = 0 
    [88,500, 89,000) = 0 
    [89,000, 89,500) = 1 

  Percentiles, us/op:
      p(0,0000) =     82,100 us/op
     p(50,0000) =     86,900 us/op
     p(90,0000) =     89,100 us/op
     p(95,0000) =     89,100 us/op
     p(99,0000) =     89,100 us/op
     p(99,9000) =     89,100 us/op
     p(99,9900) =     89,100 us/op
     p(99,9990) =     89,100 us/op
     p(99,9999) =     89,100 us/op
    p(100,0000) =     89,100 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.consumeFromStart
# Parameters: (size = 10000)

# Run progress: 82,07% complete, ETA 00:00:31
# Fork: 1 of 5
# Warmup Iteration   1: 944,600 us/op
Iteration   1: 744,700 us/op

# Run progress: 82,21% complete, ETA 00:00:30
# Fork: 2 of 5
# Warmup Iteration   1: 1008,400 us/op
Iteration   1: 768,600 us/op

# Run progress: 82,34% complete, ETA 00:00:30
# Fork: 3 of 5
# Warmup Iteration   1: 1000,500 us/op
Iteration   1: 729,600 us/op

# Run progress: 82,48% complete, ETA 00:00:30
# Fork: 4 of 5
# Warmup Iteration   1: 993,600 us/op
Iteration   1: 730,400 us/op

# Run progress: 82,62% complete, ETA 00:00:30
# Fork: 5 of 5
# Warmup Iteration   1: 1059,800 us/op
Iteration   1: 810,200 us/op


Result "de.codecentric.linked.Consume.consumeFromStart":
  N = 5
  mean =    756,700 ±(99.9%) 130,212 us/op

  Histogram, us/op:
    [720,000, 730,000) = 1 
    [730,000, 740,000) = 1 
    [740,000, 750,000) = 1 
    [750,000, 760,000) = 0 
    [760,000, 770,000) = 1 
    [770,000, 780,000) = 0 
    [780,000, 790,000) = 0 
    [790,000, 800,000) = 0 
    [800,000, 810,000) = 0 

  Percentiles, us/op:
      p(0,0000) =    729,600 us/op
     p(50,0000) =    744,700 us/op
     p(90,0000) =    810,200 us/op
     p(95,0000) =    810,200 us/op
     p(99,0000) =    810,200 us/op
     p(99,9000) =    810,200 us/op
     p(99,9900) =    810,200 us/op
     p(99,9990) =    810,200 us/op
     p(99,9999) =    810,200 us/op
    p(100,0000) =    810,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllByIterator
# Parameters: (size = 1)

# Run progress: 82,76% complete, ETA 00:00:29
# Fork: 1 of 5
# Warmup Iteration   1: 377,500 us/op
Iteration   1: 14,400 us/op

# Run progress: 82,90% complete, ETA 00:00:29
# Fork: 2 of 5
# Warmup Iteration   1: 387,600 us/op
Iteration   1: 2,100 us/op

# Run progress: 83,03% complete, ETA 00:00:29
# Fork: 3 of 5
# Warmup Iteration   1: 616,300 us/op
Iteration   1: 28,400 us/op

# Run progress: 83,17% complete, ETA 00:00:29
# Fork: 4 of 5
# Warmup Iteration   1: 582,600 us/op
Iteration   1: 1,700 us/op

# Run progress: 83,31% complete, ETA 00:00:28
# Fork: 5 of 5
# Warmup Iteration   1: 547,200 us/op
Iteration   1: 2,000 us/op


Result "de.codecentric.linked.Consume.getAllByIterator":
  N = 5
  mean =      9,720 ±(99.9%) 45,269 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 3 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 1 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 0 

  Percentiles, us/op:
      p(0,0000) =      1,700 us/op
     p(50,0000) =      2,100 us/op
     p(90,0000) =     28,400 us/op
     p(95,0000) =     28,400 us/op
     p(99,0000) =     28,400 us/op
     p(99,9000) =     28,400 us/op
     p(99,9900) =     28,400 us/op
     p(99,9990) =     28,400 us/op
     p(99,9999) =     28,400 us/op
    p(100,0000) =     28,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllByIterator
# Parameters: (size = 10)

# Run progress: 83,45% complete, ETA 00:00:28
# Fork: 1 of 5
# Warmup Iteration   1: 595,100 us/op
Iteration   1: 2,900 us/op

# Run progress: 83,59% complete, ETA 00:00:28
# Fork: 2 of 5
# Warmup Iteration   1: 226,200 us/op
Iteration   1: 3,200 us/op

# Run progress: 83,72% complete, ETA 00:00:28
# Fork: 3 of 5
# Warmup Iteration   1: 232,100 us/op
Iteration   1: 2,700 us/op

# Run progress: 83,86% complete, ETA 00:00:28
# Fork: 4 of 5
# Warmup Iteration   1: 410,700 us/op
Iteration   1: 2,700 us/op

# Run progress: 84,00% complete, ETA 00:00:27
# Fork: 5 of 5
# Warmup Iteration   1: 617,900 us/op
Iteration   1: 2,600 us/op


Result "de.codecentric.linked.Consume.getAllByIterator":
  N = 5
  mean =      2,820 ±(99.9%) 0,919 us/op

  Histogram, us/op:
    [2,600, 2,650) = 1 
    [2,650, 2,700) = 0 
    [2,700, 2,750) = 2 
    [2,750, 2,800) = 0 
    [2,800, 2,850) = 0 
    [2,850, 2,900) = 1 
    [2,900, 2,950) = 0 
    [2,950, 3,000) = 0 
    [3,000, 3,050) = 0 
    [3,050, 3,100) = 0 
    [3,100, 3,150) = 0 
    [3,150, 3,200) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,600 us/op
     p(50,0000) =      2,700 us/op
     p(90,0000) =      3,200 us/op
     p(95,0000) =      3,200 us/op
     p(99,0000) =      3,200 us/op
     p(99,9000) =      3,200 us/op
     p(99,9900) =      3,200 us/op
     p(99,9990) =      3,200 us/op
     p(99,9999) =      3,200 us/op
    p(100,0000) =      3,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllByIterator
# Parameters: (size = 100)

# Run progress: 84,14% complete, ETA 00:00:27
# Fork: 1 of 5
# Warmup Iteration   1: 685,100 us/op
Iteration   1: 12,000 us/op

# Run progress: 84,28% complete, ETA 00:00:27
# Fork: 2 of 5
# Warmup Iteration   1: 617,900 us/op
Iteration   1: 16,400 us/op

# Run progress: 84,41% complete, ETA 00:00:27
# Fork: 3 of 5
# Warmup Iteration   1: 468,600 us/op
Iteration   1: 12,800 us/op

# Run progress: 84,55% complete, ETA 00:00:26
# Fork: 4 of 5
# Warmup Iteration   1: 582,400 us/op
Iteration   1: 13,000 us/op

# Run progress: 84,69% complete, ETA 00:00:26
# Fork: 5 of 5
# Warmup Iteration   1: 651,100 us/op
Iteration   1: 13,200 us/op


Result "de.codecentric.linked.Consume.getAllByIterator":
  N = 5
  mean =     13,480 ±(99.9%) 6,526 us/op

  Histogram, us/op:
    [12,000, 12,500) = 1 
    [12,500, 13,000) = 1 
    [13,000, 13,500) = 2 
    [13,500, 14,000) = 0 
    [14,000, 14,500) = 0 
    [14,500, 15,000) = 0 
    [15,000, 15,500) = 0 
    [15,500, 16,000) = 0 
    [16,000, 16,500) = 1 

  Percentiles, us/op:
      p(0,0000) =     12,000 us/op
     p(50,0000) =     13,000 us/op
     p(90,0000) =     16,400 us/op
     p(95,0000) =     16,400 us/op
     p(99,0000) =     16,400 us/op
     p(99,9000) =     16,400 us/op
     p(99,9900) =     16,400 us/op
     p(99,9990) =     16,400 us/op
     p(99,9999) =     16,400 us/op
    p(100,0000) =     16,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllByIterator
# Parameters: (size = 1000)

# Run progress: 84,83% complete, ETA 00:00:26
# Fork: 1 of 5
# Warmup Iteration   1: 716,600 us/op
Iteration   1: 69,600 us/op

# Run progress: 84,97% complete, ETA 00:00:26
# Fork: 2 of 5
# Warmup Iteration   1: 750,000 us/op
Iteration   1: 69,900 us/op

# Run progress: 85,10% complete, ETA 00:00:25
# Fork: 3 of 5
# Warmup Iteration   1: 670,600 us/op
Iteration   1: 82,500 us/op

# Run progress: 85,24% complete, ETA 00:00:25
# Fork: 4 of 5
# Warmup Iteration   1: 566,400 us/op
Iteration   1: 79,700 us/op

# Run progress: 85,38% complete, ETA 00:00:25
# Fork: 5 of 5
# Warmup Iteration   1: 567,000 us/op
Iteration   1: 69,900 us/op


Result "de.codecentric.linked.Consume.getAllByIterator":
  N = 5
  mean =     74,320 ±(99.9%) 24,140 us/op

  Histogram, us/op:
    [60,000, 62,500) = 0 
    [62,500, 65,000) = 0 
    [65,000, 67,500) = 0 
    [67,500, 70,000) = 3 
    [70,000, 72,500) = 0 
    [72,500, 75,000) = 0 
    [75,000, 77,500) = 0 
    [77,500, 80,000) = 1 
    [80,000, 82,500) = 0 
    [82,500, 85,000) = 1 
    [85,000, 87,500) = 0 

  Percentiles, us/op:
      p(0,0000) =     69,600 us/op
     p(50,0000) =     69,900 us/op
     p(90,0000) =     82,500 us/op
     p(95,0000) =     82,500 us/op
     p(99,0000) =     82,500 us/op
     p(99,9000) =     82,500 us/op
     p(99,9900) =     82,500 us/op
     p(99,9990) =     82,500 us/op
     p(99,9999) =     82,500 us/op
    p(100,0000) =     82,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllByIterator
# Parameters: (size = 10000)

# Run progress: 85,52% complete, ETA 00:00:25
# Fork: 1 of 5
# Warmup Iteration   1: 1247,900 us/op
Iteration   1: 565,500 us/op

# Run progress: 85,66% complete, ETA 00:00:24
# Fork: 2 of 5
# Warmup Iteration   1: 1218,200 us/op
Iteration   1: 540,100 us/op

# Run progress: 85,79% complete, ETA 00:00:24
# Fork: 3 of 5
# Warmup Iteration   1: 1012,600 us/op
Iteration   1: 536,400 us/op

# Run progress: 85,93% complete, ETA 00:00:24
# Fork: 4 of 5
# Warmup Iteration   1: 1157,200 us/op
Iteration   1: 573,300 us/op

# Run progress: 86,07% complete, ETA 00:00:24
# Fork: 5 of 5
# Warmup Iteration   1: 1398,700 us/op
Iteration   1: 546,900 us/op


Result "de.codecentric.linked.Consume.getAllByIterator":
  N = 5
  mean =    552,440 ±(99.9%) 62,267 us/op

  Histogram, us/op:
    [530,000, 535,000) = 0 
    [535,000, 540,000) = 1 
    [540,000, 545,000) = 1 
    [545,000, 550,000) = 1 
    [550,000, 555,000) = 0 
    [555,000, 560,000) = 0 
    [560,000, 565,000) = 0 
    [565,000, 570,000) = 1 
    [570,000, 575,000) = 1 

  Percentiles, us/op:
      p(0,0000) =    536,400 us/op
     p(50,0000) =    546,900 us/op
     p(90,0000) =    573,300 us/op
     p(95,0000) =    573,300 us/op
     p(99,0000) =    573,300 us/op
     p(99,9000) =    573,300 us/op
     p(99,9900) =    573,300 us/op
     p(99,9990) =    573,300 us/op
     p(99,9999) =    573,300 us/op
    p(100,0000) =    573,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllRandomly
# Parameters: (size = 1)

# Run progress: 86,21% complete, ETA 00:00:23
# Fork: 1 of 5
# Warmup Iteration   1: 17,800 us/op
Iteration   1: 1,300 us/op

# Run progress: 86,34% complete, ETA 00:00:23
# Fork: 2 of 5
# Warmup Iteration   1: 18,600 us/op
Iteration   1: 1,400 us/op

# Run progress: 86,48% complete, ETA 00:00:23
# Fork: 3 of 5
# Warmup Iteration   1: 8,500 us/op
Iteration   1: 27,200 us/op

# Run progress: 86,62% complete, ETA 00:00:23
# Fork: 4 of 5
# Warmup Iteration   1: 19,500 us/op
Iteration   1: 1,700 us/op

# Run progress: 86,76% complete, ETA 00:00:22
# Fork: 5 of 5
# Warmup Iteration   1: 17,600 us/op
Iteration   1: 1,500 us/op


Result "de.codecentric.linked.Consume.getAllRandomly":
  N = 5
  mean =      6,620 ±(99.9%) 44,304 us/op

  Histogram, us/op:
    [ 0,000,  2,500) = 4 
    [ 2,500,  5,000) = 0 
    [ 5,000,  7,500) = 0 
    [ 7,500, 10,000) = 0 
    [10,000, 12,500) = 0 
    [12,500, 15,000) = 0 
    [15,000, 17,500) = 0 
    [17,500, 20,000) = 0 
    [20,000, 22,500) = 0 
    [22,500, 25,000) = 0 
    [25,000, 27,500) = 1 

  Percentiles, us/op:
      p(0,0000) =      1,300 us/op
     p(50,0000) =      1,500 us/op
     p(90,0000) =     27,200 us/op
     p(95,0000) =     27,200 us/op
     p(99,0000) =     27,200 us/op
     p(99,9000) =     27,200 us/op
     p(99,9900) =     27,200 us/op
     p(99,9990) =     27,200 us/op
     p(99,9999) =     27,200 us/op
    p(100,0000) =     27,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllRandomly
# Parameters: (size = 10)

# Run progress: 86,90% complete, ETA 00:00:22
# Fork: 1 of 5
# Warmup Iteration   1: 21,200 us/op
Iteration   1: 3,300 us/op

# Run progress: 87,03% complete, ETA 00:00:22
# Fork: 2 of 5
# Warmup Iteration   1: 20,600 us/op
Iteration   1: 3,200 us/op

# Run progress: 87,17% complete, ETA 00:00:22
# Fork: 3 of 5
# Warmup Iteration   1: 20,500 us/op
Iteration   1: 3,500 us/op

# Run progress: 87,31% complete, ETA 00:00:22
# Fork: 4 of 5
# Warmup Iteration   1: 19,200 us/op
Iteration   1: 3,700 us/op

# Run progress: 87,45% complete, ETA 00:00:21
# Fork: 5 of 5
# Warmup Iteration   1: 19,700 us/op
Iteration   1: 3,900 us/op


Result "de.codecentric.linked.Consume.getAllRandomly":
  N = 5
  mean =      3,520 ±(99.9%) 1,103 us/op

  Histogram, us/op:
    [3,200, 3,250) = 1 
    [3,250, 3,300) = 1 
    [3,300, 3,350) = 0 
    [3,350, 3,400) = 0 
    [3,400, 3,450) = 0 
    [3,450, 3,500) = 0 
    [3,500, 3,550) = 1 
    [3,550, 3,600) = 0 
    [3,600, 3,650) = 0 
    [3,650, 3,700) = 0 
    [3,700, 3,750) = 1 
    [3,750, 3,800) = 0 
    [3,800, 3,850) = 0 
    [3,850, 3,900) = 1 

  Percentiles, us/op:
      p(0,0000) =      3,200 us/op
     p(50,0000) =      3,500 us/op
     p(90,0000) =      3,900 us/op
     p(95,0000) =      3,900 us/op
     p(99,0000) =      3,900 us/op
     p(99,9000) =      3,900 us/op
     p(99,9900) =      3,900 us/op
     p(99,9990) =      3,900 us/op
     p(99,9999) =      3,900 us/op
    p(100,0000) =      3,900 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllRandomly
# Parameters: (size = 100)

# Run progress: 87,59% complete, ETA 00:00:21
# Fork: 1 of 5
# Warmup Iteration   1: 76,700 us/op
Iteration   1: 65,800 us/op

# Run progress: 87,72% complete, ETA 00:00:21
# Fork: 2 of 5
# Warmup Iteration   1: 100,000 us/op
Iteration   1: 64,900 us/op

# Run progress: 87,86% complete, ETA 00:00:21
# Fork: 3 of 5
# Warmup Iteration   1: 96,900 us/op
Iteration   1: 76,100 us/op

# Run progress: 88,00% complete, ETA 00:00:20
# Fork: 4 of 5
# Warmup Iteration   1: 81,400 us/op
Iteration   1: 69,100 us/op

# Run progress: 88,14% complete, ETA 00:00:20
# Fork: 5 of 5
# Warmup Iteration   1: 106,700 us/op
Iteration   1: 71,800 us/op


Result "de.codecentric.linked.Consume.getAllRandomly":
  N = 5
  mean =     69,540 ±(99.9%) 17,630 us/op

  Histogram, us/op:
    [60,000, 61,250) = 0 
    [61,250, 62,500) = 0 
    [62,500, 63,750) = 0 
    [63,750, 65,000) = 1 
    [65,000, 66,250) = 1 
    [66,250, 67,500) = 0 
    [67,500, 68,750) = 0 
    [68,750, 70,000) = 1 
    [70,000, 71,250) = 0 
    [71,250, 72,500) = 1 
    [72,500, 73,750) = 0 
    [73,750, 75,000) = 0 
    [75,000, 76,250) = 1 
    [76,250, 77,500) = 0 
    [77,500, 78,750) = 0 

  Percentiles, us/op:
      p(0,0000) =     64,900 us/op
     p(50,0000) =     69,100 us/op
     p(90,0000) =     76,100 us/op
     p(95,0000) =     76,100 us/op
     p(99,0000) =     76,100 us/op
     p(99,9000) =     76,100 us/op
     p(99,9900) =     76,100 us/op
     p(99,9990) =     76,100 us/op
     p(99,9999) =     76,100 us/op
    p(100,0000) =     76,100 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllRandomly
# Parameters: (size = 1000)

# Run progress: 88,28% complete, ETA 00:00:20
# Fork: 1 of 5
# Warmup Iteration   1: 1589,600 us/op
Iteration   1: 1708,800 us/op

# Run progress: 88,41% complete, ETA 00:00:20
# Fork: 2 of 5
# Warmup Iteration   1: 1628,200 us/op
Iteration   1: 1574,100 us/op

# Run progress: 88,55% complete, ETA 00:00:19
# Fork: 3 of 5
# Warmup Iteration   1: 1589,000 us/op
Iteration   1: 1612,700 us/op

# Run progress: 88,69% complete, ETA 00:00:19
# Fork: 4 of 5
# Warmup Iteration   1: 1644,600 us/op
Iteration   1: 1576,900 us/op

# Run progress: 88,83% complete, ETA 00:00:19
# Fork: 5 of 5
# Warmup Iteration   1: 1619,900 us/op
Iteration   1: 1606,900 us/op


Result "de.codecentric.linked.Consume.getAllRandomly":
  N = 5
  mean =   1615,880 ±(99.9%) 210,820 us/op

  Histogram, us/op:
    [1500,000, 1525,000) = 0 
    [1525,000, 1550,000) = 0 
    [1550,000, 1575,000) = 1 
    [1575,000, 1600,000) = 1 
    [1600,000, 1625,000) = 2 
    [1625,000, 1650,000) = 0 
    [1650,000, 1675,000) = 0 
    [1675,000, 1700,000) = 0 
    [1700,000, 1725,000) = 1 
    [1725,000, 1750,000) = 0 
    [1750,000, 1775,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1574,100 us/op
     p(50,0000) =   1606,900 us/op
     p(90,0000) =   1708,800 us/op
     p(95,0000) =   1708,800 us/op
     p(99,0000) =   1708,800 us/op
     p(99,9000) =   1708,800 us/op
     p(99,9900) =   1708,800 us/op
     p(99,9990) =   1708,800 us/op
     p(99,9999) =   1708,800 us/op
    p(100,0000) =   1708,800 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.Consume.getAllRandomly
# Parameters: (size = 10000)

# Run progress: 88,97% complete, ETA 00:00:19
# Fork: 1 of 5
# Warmup Iteration   1: 62790,400 us/op
Iteration   1: 60180,000 us/op

# Run progress: 89,10% complete, ETA 00:00:18
# Fork: 2 of 5
# Warmup Iteration   1: 62550,000 us/op
Iteration   1: 59965,700 us/op

# Run progress: 89,24% complete, ETA 00:00:18
# Fork: 3 of 5
# Warmup Iteration   1: 66486,100 us/op
Iteration   1: 61993,200 us/op

# Run progress: 89,38% complete, ETA 00:00:18
# Fork: 4 of 5
# Warmup Iteration   1: 65427,100 us/op
Iteration   1: 61571,800 us/op

# Run progress: 89,52% complete, ETA 00:00:18
# Fork: 5 of 5
# Warmup Iteration   1: 63999,100 us/op
Iteration   1: 57106,800 us/op


Result "de.codecentric.linked.Consume.getAllRandomly":
  N = 5
  mean =  60163,500 ±(99.9%) 7385,291 us/op

  Histogram, us/op:
    [57000,000, 57500,000) = 1 
    [57500,000, 58000,000) = 0 
    [58000,000, 58500,000) = 0 
    [58500,000, 59000,000) = 0 
    [59000,000, 59500,000) = 0 
    [59500,000, 60000,000) = 1 
    [60000,000, 60500,000) = 1 
    [60500,000, 61000,000) = 0 
    [61000,000, 61500,000) = 0 

  Percentiles, us/op:
      p(0,0000) =  57106,800 us/op
     p(50,0000) =  60180,000 us/op
     p(90,0000) =  61993,200 us/op
     p(95,0000) =  61993,200 us/op
     p(99,0000) =  61993,200 us/op
     p(99,9000) =  61993,200 us/op
     p(99,9900) =  61993,200 us/op
     p(99,9990) =  61993,200 us/op
     p(99,9999) =  61993,200 us/op
    p(100,0000) =  61993,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap
# Parameters: (size = 1)

# Run progress: 89,66% complete, ETA 00:00:18
# Fork: 1 of 5
# Warmup Iteration   1: 413,300 us/op
Iteration   1: 9,300 us/op

# Run progress: 89,79% complete, ETA 00:00:17
# Fork: 2 of 5
# Warmup Iteration   1: 437,700 us/op
Iteration   1: 12,200 us/op

# Run progress: 89,93% complete, ETA 00:00:17
# Fork: 3 of 5
# Warmup Iteration   1: 259,000 us/op
Iteration   1: 19,400 us/op

# Run progress: 90,07% complete, ETA 00:00:17
# Fork: 4 of 5
# Warmup Iteration   1: 280,900 us/op
Iteration   1: 46,100 us/op

# Run progress: 90,21% complete, ETA 00:00:17
# Fork: 5 of 5
# Warmup Iteration   1: 284,300 us/op
Iteration   1: 19,500 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap":
  N = 5
  mean =     21,300 ±(99.9%) 56,089 us/op

  Histogram, us/op:
    [ 0,000,  5,000) = 0 
    [ 5,000, 10,000) = 1 
    [10,000, 15,000) = 1 
    [15,000, 20,000) = 2 
    [20,000, 25,000) = 0 
    [25,000, 30,000) = 0 
    [30,000, 35,000) = 0 
    [35,000, 40,000) = 0 
    [40,000, 45,000) = 0 

  Percentiles, us/op:
      p(0,0000) =      9,300 us/op
     p(50,0000) =     19,400 us/op
     p(90,0000) =     46,100 us/op
     p(95,0000) =     46,100 us/op
     p(99,0000) =     46,100 us/op
     p(99,9000) =     46,100 us/op
     p(99,9900) =     46,100 us/op
     p(99,9990) =     46,100 us/op
     p(99,9999) =     46,100 us/op
    p(100,0000) =     46,100 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap
# Parameters: (size = 10)

# Run progress: 90,34% complete, ETA 00:00:16
# Fork: 1 of 5
# Warmup Iteration   1: 414,300 us/op
Iteration   1: 23,800 us/op

# Run progress: 90,48% complete, ETA 00:00:16
# Fork: 2 of 5
# Warmup Iteration   1: 302,400 us/op
Iteration   1: 26,500 us/op

# Run progress: 90,62% complete, ETA 00:00:16
# Fork: 3 of 5
# Warmup Iteration   1: 326,600 us/op
Iteration   1: 24,600 us/op

# Run progress: 90,76% complete, ETA 00:00:16
# Fork: 4 of 5
# Warmup Iteration   1: 308,900 us/op
Iteration   1: 23,100 us/op

# Run progress: 90,90% complete, ETA 00:00:15
# Fork: 5 of 5
# Warmup Iteration   1: 425,500 us/op
Iteration   1: 24,000 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap":
  N = 5
  mean =     24,400 ±(99.9%) 4,969 us/op

  Histogram, us/op:
    [23,000, 23,250) = 1 
    [23,250, 23,500) = 0 
    [23,500, 23,750) = 0 
    [23,750, 24,000) = 1 
    [24,000, 24,250) = 1 
    [24,250, 24,500) = 0 
    [24,500, 24,750) = 1 
    [24,750, 25,000) = 0 
    [25,000, 25,250) = 0 
    [25,250, 25,500) = 0 
    [25,500, 25,750) = 0 
    [25,750, 26,000) = 0 
    [26,000, 26,250) = 0 
    [26,250, 26,500) = 0 
    [26,500, 26,750) = 1 

  Percentiles, us/op:
      p(0,0000) =     23,100 us/op
     p(50,0000) =     24,000 us/op
     p(90,0000) =     26,500 us/op
     p(95,0000) =     26,500 us/op
     p(99,0000) =     26,500 us/op
     p(99,9000) =     26,500 us/op
     p(99,9900) =     26,500 us/op
     p(99,9990) =     26,500 us/op
     p(99,9999) =     26,500 us/op
    p(100,0000) =     26,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap
# Parameters: (size = 100)

# Run progress: 91,03% complete, ETA 00:00:15
# Fork: 1 of 5
# Warmup Iteration   1: 412,400 us/op
Iteration   1: 111,200 us/op

# Run progress: 91,17% complete, ETA 00:00:15
# Fork: 2 of 5
# Warmup Iteration   1: 625,600 us/op
Iteration   1: 92,900 us/op

# Run progress: 91,31% complete, ETA 00:00:15
# Fork: 3 of 5
# Warmup Iteration   1: 731,100 us/op
Iteration   1: 92,600 us/op

# Run progress: 91,45% complete, ETA 00:00:14
# Fork: 4 of 5
# Warmup Iteration   1: 474,000 us/op
Iteration   1: 76,100 us/op

# Run progress: 91,59% complete, ETA 00:00:14
# Fork: 5 of 5
# Warmup Iteration   1: 641,500 us/op
Iteration   1: 81,700 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap":
  N = 5
  mean =     90,900 ±(99.9%) 51,757 us/op

  Histogram, us/op:
    [ 70,000,  75,000) = 0 
    [ 75,000,  80,000) = 1 
    [ 80,000,  85,000) = 1 
    [ 85,000,  90,000) = 0 
    [ 90,000,  95,000) = 2 
    [ 95,000, 100,000) = 0 
    [100,000, 105,000) = 0 
    [105,000, 110,000) = 0 
    [110,000, 115,000) = 1 

  Percentiles, us/op:
      p(0,0000) =     76,100 us/op
     p(50,0000) =     92,600 us/op
     p(90,0000) =    111,200 us/op
     p(95,0000) =    111,200 us/op
     p(99,0000) =    111,200 us/op
     p(99,9000) =    111,200 us/op
     p(99,9900) =    111,200 us/op
     p(99,9990) =    111,200 us/op
     p(99,9999) =    111,200 us/op
    p(100,0000) =    111,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap
# Parameters: (size = 1000)

# Run progress: 91,72% complete, ETA 00:00:14
# Fork: 1 of 5
# Warmup Iteration   1: 1138,800 us/op
Iteration   1: 232,500 us/op

# Run progress: 91,86% complete, ETA 00:00:14
# Fork: 2 of 5
# Warmup Iteration   1: 1128,100 us/op
Iteration   1: 224,600 us/op

# Run progress: 92,00% complete, ETA 00:00:13
# Fork: 3 of 5
# Warmup Iteration   1: 975,200 us/op
Iteration   1: 213,300 us/op

# Run progress: 92,14% complete, ETA 00:00:13
# Fork: 4 of 5
# Warmup Iteration   1: 1281,300 us/op
Iteration   1: 268,500 us/op

# Run progress: 92,28% complete, ETA 00:00:13
# Fork: 5 of 5
# Warmup Iteration   1: 1239,700 us/op
Iteration   1: 313,600 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap":
  N = 5
  mean =    250,500 ±(99.9%) 157,409 us/op

  Histogram, us/op:
    [200,000, 212,500) = 0 
    [212,500, 225,000) = 2 
    [225,000, 237,500) = 1 
    [237,500, 250,000) = 0 
    [250,000, 262,500) = 0 
    [262,500, 275,000) = 1 
    [275,000, 287,500) = 0 
    [287,500, 300,000) = 0 
    [300,000, 312,500) = 0 
    [312,500, 325,000) = 1 
    [325,000, 337,500) = 0 
    [337,500, 350,000) = 0 
    [350,000, 362,500) = 0 
    [362,500, 375,000) = 0 
    [375,000, 387,500) = 0 

  Percentiles, us/op:
      p(0,0000) =    213,300 us/op
     p(50,0000) =    232,500 us/op
     p(90,0000) =    313,600 us/op
     p(95,0000) =    313,600 us/op
     p(99,0000) =    313,600 us/op
     p(99,9000) =    313,600 us/op
     p(99,9900) =    313,600 us/op
     p(99,9990) =    313,600 us/op
     p(99,9999) =    313,600 us/op
    p(100,0000) =    313,600 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap
# Parameters: (size = 10000)

# Run progress: 92,41% complete, ETA 00:00:13
# Fork: 1 of 5
# Warmup Iteration   1: 3150,400 us/op
Iteration   1: 1925,300 us/op

# Run progress: 92,55% complete, ETA 00:00:12
# Fork: 2 of 5
# Warmup Iteration   1: 3025,100 us/op
Iteration   1: 1870,800 us/op

# Run progress: 92,69% complete, ETA 00:00:12
# Fork: 3 of 5
# Warmup Iteration   1: 2500,400 us/op
Iteration   1: 1770,800 us/op

# Run progress: 92,83% complete, ETA 00:00:12
# Fork: 4 of 5
# Warmup Iteration   1: 3214,200 us/op
Iteration   1: 1891,000 us/op

# Run progress: 92,97% complete, ETA 00:00:12
# Fork: 5 of 5
# Warmup Iteration   1: 2930,300 us/op
Iteration   1: 1921,200 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap":
  N = 5
  mean =   1875,820 ±(99.9%) 241,951 us/op

  Histogram, us/op:
    [1700,000, 1725,000) = 0 
    [1725,000, 1750,000) = 0 
    [1750,000, 1775,000) = 1 
    [1775,000, 1800,000) = 0 
    [1800,000, 1825,000) = 0 
    [1825,000, 1850,000) = 0 
    [1850,000, 1875,000) = 1 
    [1875,000, 1900,000) = 1 
    [1900,000, 1925,000) = 1 
    [1925,000, 1950,000) = 1 
    [1950,000, 1975,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1770,800 us/op
     p(50,0000) =   1891,000 us/op
     p(90,0000) =   1925,300 us/op
     p(95,0000) =   1925,300 us/op
     p(99,0000) =   1925,300 us/op
     p(99,9000) =   1925,300 us/op
     p(99,9900) =   1925,300 us/op
     p(99,9990) =   1925,300 us/op
     p(99,9999) =   1925,300 us/op
    p(100,0000) =   1925,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap100
# Parameters: (size = 1)

# Run progress: 93,10% complete, ETA 00:00:12
# Fork: 1 of 5
# Warmup Iteration   1: 287,600 us/op
Iteration   1: 25,400 us/op

# Run progress: 93,24% complete, ETA 00:00:11
# Fork: 2 of 5
# Warmup Iteration   1: 320,600 us/op
Iteration   1: 29,300 us/op

# Run progress: 93,38% complete, ETA 00:00:11
# Fork: 3 of 5
# Warmup Iteration   1: 320,500 us/op
Iteration   1: 25,800 us/op

# Run progress: 93,52% complete, ETA 00:00:11
# Fork: 4 of 5
# Warmup Iteration   1: 318,300 us/op
Iteration   1: 23,500 us/op

# Run progress: 93,66% complete, ETA 00:00:11
# Fork: 5 of 5
# Warmup Iteration   1: 294,300 us/op
Iteration   1: 23,700 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap100":
  N = 5
  mean =     25,540 ±(99.9%) 8,984 us/op

  Histogram, us/op:
    [23,000, 23,500) = 0 
    [23,500, 24,000) = 2 
    [24,000, 24,500) = 0 
    [24,500, 25,000) = 0 
    [25,000, 25,500) = 1 
    [25,500, 26,000) = 1 
    [26,000, 26,500) = 0 
    [26,500, 27,000) = 0 
    [27,000, 27,500) = 0 
    [27,500, 28,000) = 0 
    [28,000, 28,500) = 0 
    [28,500, 29,000) = 0 
    [29,000, 29,500) = 1 

  Percentiles, us/op:
      p(0,0000) =     23,500 us/op
     p(50,0000) =     25,400 us/op
     p(90,0000) =     29,300 us/op
     p(95,0000) =     29,300 us/op
     p(99,0000) =     29,300 us/op
     p(99,9000) =     29,300 us/op
     p(99,9900) =     29,300 us/op
     p(99,9990) =     29,300 us/op
     p(99,9999) =     29,300 us/op
    p(100,0000) =     29,300 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap100
# Parameters: (size = 10)

# Run progress: 93,79% complete, ETA 00:00:10
# Fork: 1 of 5
# Warmup Iteration   1: 800,100 us/op
Iteration   1: 76,400 us/op

# Run progress: 93,93% complete, ETA 00:00:10
# Fork: 2 of 5
# Warmup Iteration   1: 596,000 us/op
Iteration   1: 80,600 us/op

# Run progress: 94,07% complete, ETA 00:00:10
# Fork: 3 of 5
# Warmup Iteration   1: 797,200 us/op
Iteration   1: 83,400 us/op

# Run progress: 94,21% complete, ETA 00:00:10
# Fork: 4 of 5
# Warmup Iteration   1: 567,400 us/op
Iteration   1: 80,300 us/op

# Run progress: 94,34% complete, ETA 00:00:09
# Fork: 5 of 5
# Warmup Iteration   1: 392,300 us/op
Iteration   1: 71,100 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap100":
  N = 5
  mean =     78,360 ±(99.9%) 18,339 us/op

  Histogram, us/op:
    [70,000, 71,250) = 1 
    [71,250, 72,500) = 0 
    [72,500, 73,750) = 0 
    [73,750, 75,000) = 0 
    [75,000, 76,250) = 0 
    [76,250, 77,500) = 1 
    [77,500, 78,750) = 0 
    [78,750, 80,000) = 0 
    [80,000, 81,250) = 2 
    [81,250, 82,500) = 0 
    [82,500, 83,750) = 1 
    [83,750, 85,000) = 0 
    [85,000, 86,250) = 0 
    [86,250, 87,500) = 0 
    [87,500, 88,750) = 0 

  Percentiles, us/op:
      p(0,0000) =     71,100 us/op
     p(50,0000) =     80,300 us/op
     p(90,0000) =     83,400 us/op
     p(95,0000) =     83,400 us/op
     p(99,0000) =     83,400 us/op
     p(99,9000) =     83,400 us/op
     p(99,9900) =     83,400 us/op
     p(99,9990) =     83,400 us/op
     p(99,9999) =     83,400 us/op
    p(100,0000) =     83,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap100
# Parameters: (size = 100)

# Run progress: 94,48% complete, ETA 00:00:09
# Fork: 1 of 5
# Warmup Iteration   1: 1029,200 us/op
Iteration   1: 457,000 us/op

# Run progress: 94,62% complete, ETA 00:00:09
# Fork: 2 of 5
# Warmup Iteration   1: 1017,800 us/op
Iteration   1: 512,600 us/op

# Run progress: 94,76% complete, ETA 00:00:09
# Fork: 3 of 5
# Warmup Iteration   1: 1016,200 us/op
Iteration   1: 519,400 us/op

# Run progress: 94,90% complete, ETA 00:00:08
# Fork: 4 of 5
# Warmup Iteration   1: 1135,600 us/op
Iteration   1: 473,400 us/op

# Run progress: 95,03% complete, ETA 00:00:08
# Fork: 5 of 5
# Warmup Iteration   1: 1069,800 us/op
Iteration   1: 492,500 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap100":
  N = 5
  mean =    490,980 ±(99.9%) 100,802 us/op

  Histogram, us/op:
    [450,000, 455,000) = 0 
    [455,000, 460,000) = 1 
    [460,000, 465,000) = 0 
    [465,000, 470,000) = 0 
    [470,000, 475,000) = 1 
    [475,000, 480,000) = 0 
    [480,000, 485,000) = 0 
    [485,000, 490,000) = 0 
    [490,000, 495,000) = 1 
    [495,000, 500,000) = 0 
    [500,000, 505,000) = 0 
    [505,000, 510,000) = 0 
    [510,000, 515,000) = 1 

  Percentiles, us/op:
      p(0,0000) =    457,000 us/op
     p(50,0000) =    492,500 us/op
     p(90,0000) =    519,400 us/op
     p(95,0000) =    519,400 us/op
     p(99,0000) =    519,400 us/op
     p(99,9000) =    519,400 us/op
     p(99,9900) =    519,400 us/op
     p(99,9990) =    519,400 us/op
     p(99,9999) =    519,400 us/op
    p(100,0000) =    519,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap100
# Parameters: (size = 1000)

# Run progress: 95,17% complete, ETA 00:00:08
# Fork: 1 of 5
# Warmup Iteration   1: 3924,300 us/op
Iteration   1: 1505,300 us/op

# Run progress: 95,31% complete, ETA 00:00:08
# Fork: 2 of 5
# Warmup Iteration   1: 3862,200 us/op
Iteration   1: 1453,600 us/op

# Run progress: 95,45% complete, ETA 00:00:07
# Fork: 3 of 5
# Warmup Iteration   1: 4514,900 us/op
Iteration   1: 1797,500 us/op

# Run progress: 95,59% complete, ETA 00:00:07
# Fork: 4 of 5
# Warmup Iteration   1: 4013,100 us/op
Iteration   1: 1432,300 us/op

# Run progress: 95,72% complete, ETA 00:00:07
# Fork: 5 of 5
# Warmup Iteration   1: 4002,100 us/op
Iteration   1: 1507,400 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap100":
  N = 5
  mean =   1539,220 ±(99.9%) 569,955 us/op

  Histogram, us/op:
    [1400,000, 1425,000) = 0 
    [1425,000, 1450,000) = 1 
    [1450,000, 1475,000) = 1 
    [1475,000, 1500,000) = 0 
    [1500,000, 1525,000) = 2 
    [1525,000, 1550,000) = 0 
    [1550,000, 1575,000) = 0 
    [1575,000, 1600,000) = 0 
    [1600,000, 1625,000) = 0 
    [1625,000, 1650,000) = 0 
    [1650,000, 1675,000) = 0 
    [1675,000, 1700,000) = 0 
    [1700,000, 1725,000) = 0 
    [1725,000, 1750,000) = 0 
    [1750,000, 1775,000) = 0 

  Percentiles, us/op:
      p(0,0000) =   1432,300 us/op
     p(50,0000) =   1505,300 us/op
     p(90,0000) =   1797,500 us/op
     p(95,0000) =   1797,500 us/op
     p(99,0000) =   1797,500 us/op
     p(99,9000) =   1797,500 us/op
     p(99,9900) =   1797,500 us/op
     p(99,9990) =   1797,500 us/op
     p(99,9999) =   1797,500 us/op
    p(100,0000) =   1797,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.flatMap100
# Parameters: (size = 10000)

# Run progress: 95,86% complete, ETA 00:00:07
# Fork: 1 of 5
# Warmup Iteration   1: 83297,000 us/op
Iteration   1: 180686,200 us/op

# Run progress: 96,00% complete, ETA 00:00:06
# Fork: 2 of 5
# Warmup Iteration   1: 84807,900 us/op
Iteration   1: 170084,400 us/op

# Run progress: 96,14% complete, ETA 00:00:06
# Fork: 3 of 5
# Warmup Iteration   1: 88407,700 us/op
Iteration   1: 168397,500 us/op

# Run progress: 96,28% complete, ETA 00:00:06
# Fork: 4 of 5
# Warmup Iteration   1: 85431,900 us/op
Iteration   1: 165574,600 us/op

# Run progress: 96,41% complete, ETA 00:00:06
# Fork: 5 of 5
# Warmup Iteration   1: 87339,500 us/op
Iteration   1: 167847,200 us/op


Result "de.codecentric.linked.MapAndFlatMap.flatMap100":
  N = 5
  mean = 170517,980 ±(99.9%) 22751,995 us/op

  Histogram, us/op:
    [160000,000, 162500,000) = 0 
    [162500,000, 165000,000) = 0 
    [165000,000, 167500,000) = 1 
    [167500,000, 170000,000) = 2 
    [170000,000, 172500,000) = 1 
    [172500,000, 175000,000) = 0 
    [175000,000, 177500,000) = 0 
    [177500,000, 180000,000) = 0 
    [180000,000, 182500,000) = 1 
    [182500,000, 185000,000) = 0 
    [185000,000, 187500,000) = 0 

  Percentiles, us/op:
      p(0,0000) = 165574,600 us/op
     p(50,0000) = 168397,500 us/op
     p(90,0000) = 180686,200 us/op
     p(95,0000) = 180686,200 us/op
     p(99,0000) = 180686,200 us/op
     p(99,9000) = 180686,200 us/op
     p(99,9900) = 180686,200 us/op
     p(99,9990) = 180686,200 us/op
     p(99,9999) = 180686,200 us/op
    p(100,0000) = 180686,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 1)

# Run progress: 96,55% complete, ETA 00:00:06
# Fork: 1 of 5
# Warmup Iteration   1: 133,100 us/op
Iteration   1: 17,400 us/op

# Run progress: 96,69% complete, ETA 00:00:05
# Fork: 2 of 5
# Warmup Iteration   1: 130,200 us/op
Iteration   1: 15,400 us/op

# Run progress: 96,83% complete, ETA 00:00:05
# Fork: 3 of 5
# Warmup Iteration   1: 143,200 us/op
Iteration   1: 13,500 us/op

# Run progress: 96,97% complete, ETA 00:00:05
# Fork: 4 of 5
# Warmup Iteration   1: 125,600 us/op
Iteration   1: 2,700 us/op

# Run progress: 97,10% complete, ETA 00:00:05
# Fork: 5 of 5
# Warmup Iteration   1: 129,300 us/op
Iteration   1: 2,200 us/op


Result "de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =     10,240 ±(99.9%) 27,901 us/op

  Histogram, us/op:
    [ 0,000,  1,250) = 0 
    [ 1,250,  2,500) = 1 
    [ 2,500,  3,750) = 1 
    [ 3,750,  5,000) = 0 
    [ 5,000,  6,250) = 0 
    [ 6,250,  7,500) = 0 
    [ 7,500,  8,750) = 0 
    [ 8,750, 10,000) = 0 
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 0 
    [12,500, 13,750) = 1 
    [13,750, 15,000) = 0 
    [15,000, 16,250) = 1 
    [16,250, 17,500) = 1 
    [17,500, 18,750) = 0 

  Percentiles, us/op:
      p(0,0000) =      2,200 us/op
     p(50,0000) =     13,500 us/op
     p(90,0000) =     17,400 us/op
     p(95,0000) =     17,400 us/op
     p(99,0000) =     17,400 us/op
     p(99,9000) =     17,400 us/op
     p(99,9900) =     17,400 us/op
     p(99,9990) =     17,400 us/op
     p(99,9999) =     17,400 us/op
    p(100,0000) =     17,400 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 10)

# Run progress: 97,24% complete, ETA 00:00:04
# Fork: 1 of 5
# Warmup Iteration   1: 133,700 us/op
Iteration   1: 11,800 us/op

# Run progress: 97,38% complete, ETA 00:00:04
# Fork: 2 of 5
# Warmup Iteration   1: 116,700 us/op
Iteration   1: 15,100 us/op

# Run progress: 97,52% complete, ETA 00:00:04
# Fork: 3 of 5
# Warmup Iteration   1: 137,500 us/op
Iteration   1: 14,600 us/op

# Run progress: 97,66% complete, ETA 00:00:04
# Fork: 4 of 5
# Warmup Iteration   1: 141,900 us/op
Iteration   1: 20,900 us/op

# Run progress: 97,79% complete, ETA 00:00:03
# Fork: 5 of 5
# Warmup Iteration   1: 136,100 us/op
Iteration   1: 22,500 us/op


Result "de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =     16,980 ±(99.9%) 17,420 us/op

  Histogram, us/op:
    [10,000, 11,250) = 0 
    [11,250, 12,500) = 1 
    [12,500, 13,750) = 0 
    [13,750, 15,000) = 1 
    [15,000, 16,250) = 1 
    [16,250, 17,500) = 0 
    [17,500, 18,750) = 0 
    [18,750, 20,000) = 0 
    [20,000, 21,250) = 1 
    [21,250, 22,500) = 0 
    [22,500, 23,750) = 1 
    [23,750, 25,000) = 0 
    [25,000, 26,250) = 0 
    [26,250, 27,500) = 0 
    [27,500, 28,750) = 0 

  Percentiles, us/op:
      p(0,0000) =     11,800 us/op
     p(50,0000) =     15,100 us/op
     p(90,0000) =     22,500 us/op
     p(95,0000) =     22,500 us/op
     p(99,0000) =     22,500 us/op
     p(99,9000) =     22,500 us/op
     p(99,9900) =     22,500 us/op
     p(99,9990) =     22,500 us/op
     p(99,9999) =     22,500 us/op
    p(100,0000) =     22,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 100)

# Run progress: 97,93% complete, ETA 00:00:03
# Fork: 1 of 5
# Warmup Iteration   1: 156,200 us/op
Iteration   1: 54,500 us/op

# Run progress: 98,07% complete, ETA 00:00:03
# Fork: 2 of 5
# Warmup Iteration   1: 176,500 us/op
Iteration   1: 42,700 us/op

# Run progress: 98,21% complete, ETA 00:00:03
# Fork: 3 of 5
# Warmup Iteration   1: 159,100 us/op
Iteration   1: 53,400 us/op

# Run progress: 98,34% complete, ETA 00:00:02
# Fork: 4 of 5
# Warmup Iteration   1: 176,800 us/op
Iteration   1: 48,400 us/op

# Run progress: 98,48% complete, ETA 00:00:02
# Fork: 5 of 5
# Warmup Iteration   1: 166,200 us/op
Iteration   1: 18,200 us/op


Result "de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =     43,440 ±(99.9%) 57,235 us/op

  Histogram, us/op:
    [10,000, 15,000) = 0 
    [15,000, 20,000) = 1 
    [20,000, 25,000) = 0 
    [25,000, 30,000) = 0 
    [30,000, 35,000) = 0 
    [35,000, 40,000) = 0 
    [40,000, 45,000) = 1 
    [45,000, 50,000) = 1 
    [50,000, 55,000) = 2 

  Percentiles, us/op:
      p(0,0000) =     18,200 us/op
     p(50,0000) =     48,400 us/op
     p(90,0000) =     54,500 us/op
     p(95,0000) =     54,500 us/op
     p(99,0000) =     54,500 us/op
     p(99,9000) =     54,500 us/op
     p(99,9900) =     54,500 us/op
     p(99,9990) =     54,500 us/op
     p(99,9999) =     54,500 us/op
    p(100,0000) =     54,500 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 1000)

# Run progress: 98,62% complete, ETA 00:00:02
# Fork: 1 of 5
# Warmup Iteration   1: 285,900 us/op
Iteration   1: 91,000 us/op

# Run progress: 98,76% complete, ETA 00:00:02
# Fork: 2 of 5
# Warmup Iteration   1: 411,400 us/op
Iteration   1: 99,200 us/op

# Run progress: 98,90% complete, ETA 00:00:01
# Fork: 3 of 5
# Warmup Iteration   1: 297,200 us/op
Iteration   1: 72,700 us/op

# Run progress: 99,03% complete, ETA 00:00:01
# Fork: 4 of 5
# Warmup Iteration   1: 304,200 us/op
Iteration   1: 96,800 us/op

# Run progress: 99,17% complete, ETA 00:00:01
# Fork: 5 of 5
# Warmup Iteration   1: 272,300 us/op
Iteration   1: 71,500 us/op


Result "de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =     86,240 ±(99.9%) 51,039 us/op

  Histogram, us/op:
    [ 70,000,  72,500) = 1 
    [ 72,500,  75,000) = 1 
    [ 75,000,  77,500) = 0 
    [ 77,500,  80,000) = 0 
    [ 80,000,  82,500) = 0 
    [ 82,500,  85,000) = 0 
    [ 85,000,  87,500) = 0 
    [ 87,500,  90,000) = 0 
    [ 90,000,  92,500) = 1 
    [ 92,500,  95,000) = 0 
    [ 95,000,  97,500) = 1 

  Percentiles, us/op:
      p(0,0000) =     71,500 us/op
     p(50,0000) =     91,000 us/op
     p(90,0000) =     99,200 us/op
     p(95,0000) =     99,200 us/op
     p(99,0000) =     99,200 us/op
     p(99,9000) =     99,200 us/op
     p(99,9900) =     99,200 us/op
     p(99,9990) =     99,200 us/op
     p(99,9999) =     99,200 us/op
    p(100,0000) =     99,200 us/op


# JMH version: 1.36
# VM version: JDK 11.0.12, OpenJDK 64-Bit Server VM, 11.0.12+7
# VM invoker: C:\Program Files\Eclipse Foundation\jdk-11.0.12.7-hotspot\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 1 iterations, single-shot each
# Measurement: 1 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue
# Parameters: (size = 10000)

# Run progress: 99,31% complete, ETA 00:00:01
# Fork: 1 of 5
# Warmup Iteration   1: 911,000 us/op
Iteration   1: 576,600 us/op

# Run progress: 99,45% complete, ETA 00:00:00
# Fork: 2 of 5
# Warmup Iteration   1: 901,500 us/op
Iteration   1: 543,600 us/op

# Run progress: 99,59% complete, ETA 00:00:00
# Fork: 3 of 5
# Warmup Iteration   1: 831,000 us/op
Iteration   1: 573,200 us/op

# Run progress: 99,72% complete, ETA 00:00:00
# Fork: 4 of 5
# Warmup Iteration   1: 814,100 us/op
Iteration   1: 557,500 us/op

# Run progress: 99,86% complete, ETA 00:00:00
# Fork: 5 of 5
# Warmup Iteration   1: 856,000 us/op
Iteration   1: 553,300 us/op


Result "de.codecentric.linked.MapAndFlatMap.mapElementsToTheirDoubleValue":
  N = 5
  mean =    560,840 ±(99.9%) 53,300 us/op

  Histogram, us/op:
    [540,000, 542,500) = 0 
    [542,500, 545,000) = 1 
    [545,000, 547,500) = 0 
    [547,500, 550,000) = 0 
    [550,000, 552,500) = 0 
    [552,500, 555,000) = 1 
    [555,000, 557,500) = 0 
    [557,500, 560,000) = 1 
    [560,000, 562,500) = 0 
    [562,500, 565,000) = 0 
    [565,000, 567,500) = 0 
    [567,500, 570,000) = 0 
    [570,000, 572,500) = 0 
    [572,500, 575,000) = 1 
    [575,000, 577,500) = 1 

  Percentiles, us/op:
      p(0,0000) =    543,600 us/op
     p(50,0000) =    557,500 us/op
     p(90,0000) =    576,600 us/op
     p(95,0000) =    576,600 us/op
     p(99,0000) =    576,600 us/op
     p(99,9000) =    576,600 us/op
     p(99,9900) =    576,600 us/op
     p(99,9990) =    576,600 us/op
     p(99,9999) =    576,600 us/op
    p(100,0000) =    576,600 us/op


# Run complete. Total time: 00:02:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               (size)  Mode  Cnt       Score       Error  Units
d.c.fpl.Construct.appendAtEnd                                1    ss    5      18,740 ±    53,413  us/op
d.c.fpl.Construct.appendAtEnd                               10    ss    5      14,840 ±    41,991  us/op
d.c.fpl.Construct.appendAtEnd                              100    ss    5      74,100 ±    47,061  us/op
d.c.fpl.Construct.appendAtEnd                             1000    ss    5     254,900 ±    33,576  us/op
d.c.fpl.Construct.appendAtEnd                            10000    ss    5    1263,900 ±   305,858  us/op

d.c.fpl.Construct.appendAtStart                              1    ss    5      23,700 ±    78,518  us/op
d.c.fpl.Construct.appendAtStart                             10    ss    5      23,700 ±    56,895  us/op
d.c.fpl.Construct.appendAtStart                            100    ss    5      77,440 ±    78,300  us/op
d.c.fpl.Construct.appendAtStart                           1000    ss    5     133,720 ±    53,552  us/op
d.c.fpl.Construct.appendAtStart                          10000    ss    5    1078,160 ±   158,008  us/op

d.c.fpl.Construct.appendLists                                1    ss    5      20,220 ±    54,715  us/op
d.c.fpl.Construct.appendLists                               10    ss    5      28,320 ±    71,232  us/op
d.c.fpl.Construct.appendLists                              100    ss    5     128,760 ±    63,995  us/op
d.c.fpl.Construct.appendLists                             1000    ss    5     385,880 ±    91,670  us/op
d.c.fpl.Construct.appendLists                            10000    ss    5    1530,380 ±   314,125  us/op

d.c.fpl.Construct.constructFromIterator                      1    ss    5      11,780 ±    29,925  us/op
d.c.fpl.Construct.constructFromIterator                     10    ss    5      11,180 ±    22,386  us/op
d.c.fpl.Construct.constructFromIterator                    100    ss    5      21,480 ±    23,212  us/op
d.c.fpl.Construct.constructFromIterator                   1000    ss    5      78,200 ±    28,914  us/op
d.c.fpl.Construct.constructFromIterator                  10000    ss    5     533,780 ±   107,021  us/op

d.c.fpl.Construct.constructFromIteratorWithKnownSize         1    ss    5      10,840 ±    41,118  us/op
d.c.fpl.Construct.constructFromIteratorWithKnownSize        10    ss    5       8,760 ±    23,050  us/op
d.c.fpl.Construct.constructFromIteratorWithKnownSize       100    ss    5      21,660 ±    38,060  us/op
d.c.fpl.Construct.constructFromIteratorWithKnownSize      1000    ss    5      53,860 ±    32,792  us/op
d.c.fpl.Construct.constructFromIteratorWithKnownSize     10000    ss    5     340,380 ±    44,971  us/op

d.c.fpl.Consume.consumeFromEnd                               1    ss    5       3,500 ±     0,903  us/op
d.c.fpl.Consume.consumeFromEnd                              10    ss    5      14,120 ±    12,455  us/op
d.c.fpl.Consume.consumeFromEnd                             100    ss    5      68,480 ±    55,660  us/op
d.c.fpl.Consume.consumeFromEnd                            1000    ss    5     265,480 ±    74,080  us/op
d.c.fpl.Consume.consumeFromEnd                           10000    ss    5    1915,920 ±  1847,980  us/op

d.c.fpl.Consume.consumeFromStart                             1    ss    5       4,540 ±     1,236  us/op
d.c.fpl.Consume.consumeFromStart                            10    ss    5      14,080 ±     3,902  us/op
d.c.fpl.Consume.consumeFromStart                           100    ss    5      96,540 ±    48,772  us/op
d.c.fpl.Consume.consumeFromStart                          1000    ss    5     285,740 ±    91,104  us/op
d.c.fpl.Consume.consumeFromStart                         10000    ss    5    2289,920 ±  1947,670  us/op

d.c.fpl.Consume.getAllByIterator                             1    ss    5       9,640 ±    27,021  us/op
d.c.fpl.Consume.getAllByIterator                            10    ss    5       3,500 ±     1,123  us/op
d.c.fpl.Consume.getAllByIterator                           100    ss    5      13,720 ±     1,574  us/op
d.c.fpl.Consume.getAllByIterator                          1000    ss    5      66,020 ±    19,508  us/op
d.c.fpl.Consume.getAllByIterator                         10000    ss    5     480,300 ±    84,934  us/op

d.c.fpl.Consume.getAllRandomly                               1    ss    5       3,940 ±    18,246  us/op
d.c.fpl.Consume.getAllRandomly                              10    ss    5       2,860 ±     0,798  us/op
d.c.fpl.Consume.getAllRandomly                             100    ss    5      19,840 ±    10,975  us/op
d.c.fpl.Consume.getAllRandomly                            1000    ss    5      61,720 ±    21,079  us/op
d.c.fpl.Consume.getAllRandomly                           10000    ss    5     514,660 ±   536,650  us/op

d.c.fpl.Consume.getFirst                                     1    ss    5       1,280 ±     0,571  us/op
d.c.fpl.Consume.getFirst                                    10    ss    5       6,100 ±    24,280  us/op
d.c.fpl.Consume.getFirst                                   100    ss    5       8,700 ±    24,718  us/op
d.c.fpl.Consume.getFirst                                  1000    ss    5      11,660 ±    37,409  us/op
d.c.fpl.Consume.getFirst                                 10000    ss    5      12,440 ±    39,435  us/op

d.c.fpl.Consume.getLast                                      1    ss    5       7,280 ±    30,396  us/op
d.c.fpl.Consume.getLast                                     10    ss    5       8,540 ±    23,772  us/op
d.c.fpl.Consume.getLast                                    100    ss    5      10,740 ±    38,048  us/op
d.c.fpl.Consume.getLast                                   1000    ss    5       8,320 ±    35,967  us/op
d.c.fpl.Consume.getLast                                  10000    ss    5      11,300 ±    58,360  us/op

d.c.fpl.Consume.recursiveSplit                               1    ss    5       2,120 ±     1,230  us/op
d.c.fpl.Consume.recursiveSplit                              10    ss    5      14,460 ±     4,017  us/op
d.c.fpl.Consume.recursiveSplit                             100    ss    5     133,280 ±    47,940  us/op
d.c.fpl.Consume.recursiveSplit                            1000    ss    5     270,400 ±    11,053  us/op
d.c.fpl.Consume.recursiveSplit                           10000    ss    5    1706,620 ±   140,122  us/op

d.c.fpl.CopyOfVsNewAndArraycopy.withCopyOf       	         1    ss    5       4,420 ±    20,422  us/op
d.c.fpl.CopyOfVsNewAndArraycopy.withCopyOf          	    10    ss    5       5,320 ±    28,162  us/op
d.c.fpl.CopyOfVsNewAndArraycopy.withCopyOf        		   100    ss    5      14,080 ±    43,953  us/op
d.c.fpl.CopyOfVsNewAndArraycopy.withCopyOf        	      1000    ss    5       9,220 ±    44,773  us/op
d.c.fpl.CopyOfVsNewAndArraycopy.withCopyOf          	 10000    ss    5      25,700 ±    22,464  us/op
                                                                                           
d.c.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy          1    ss    5      16,700 ±    35,379  us/op
d.c.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy		    10    ss    5      12,300 ±    35,764  us/op
d.c.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy		   100    ss    5      14,920 ±    29,989  us/op
d.c.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy		  1000    ss    5      15,240 ±    24,850  us/op
d.c.fpl.CopyOfVsNewAndArraycopy.withNewAndArrayCopy		 10000    ss    5      22,500 ±    29,501  us/op


d.c.fpl.MapAndFlatMap.flatMap                                1    ss    5      26,560 ±    24,368  us/op
d.c.fpl.MapAndFlatMap.flatMap                               10    ss    5      32,880 ±    73,938  us/op
d.c.fpl.MapAndFlatMap.flatMap                              100    ss    5     167,460 ±    96,700  us/op
d.c.fpl.MapAndFlatMap.flatMap                             1000    ss    5     349,660 ±    51,539  us/op
d.c.fpl.MapAndFlatMap.flatMap                            10000    ss    5    2204,060 ±   352,466  us/op

d.c.fpl.MapAndFlatMap.flatMap100                             1    ss    5      41,680 ±    31,654  us/op
d.c.fpl.MapAndFlatMap.flatMap100                            10    ss    5     119,760 ±    68,595  us/op
d.c.fpl.MapAndFlatMap.flatMap100                           100    ss    5     582,280 ±   110,259  us/op
d.c.fpl.MapAndFlatMap.flatMap100                          1000    ss    5    2067,400 ±   578,167  us/op
d.c.fpl.MapAndFlatMap.flatMap100                         10000    ss    5    9730,300 ±   819,095  us/op

d.c.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue          1    ss    5      11,400 ±    33,472  us/op
d.c.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue         10    ss    5      15,140 ±    30,719  us/op
d.c.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue        100    ss    5      32,000 ±    29,750  us/op
d.c.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue       1000    ss    5      74,420 ±    28,993  us/op
d.c.fpl.MapAndFlatMap.mapElementsToTheirDoubleValue      10000    ss    5     366,920 ±    94,198  us/op

d.c.fpl.Set.set10PercentRandom                               1    ss    5       0,620 ±     0,322  us/op
d.c.fpl.Set.set10PercentRandom                              10    ss    5      11,760 ±    30,860  us/op
d.c.fpl.Set.set10PercentRandom                             100    ss    5      21,200 ±    27,811  us/op
d.c.fpl.Set.set10PercentRandom                            1000    ss    5     181,840 ±    38,297  us/op
d.c.fpl.Set.set10PercentRandom                           10000    ss    5    2950,020 ±  1951,733  us/op

d.c.fpl.Set.set10PercentSequential                           1    ss    5       0,540 ±     0,211  us/op
d.c.fpl.Set.set10PercentSequential                          10    ss    5      17,380 ±    31,816  us/op
d.c.fpl.Set.set10PercentSequential                         100    ss    5      18,960 ±     9,045  us/op
d.c.fpl.Set.set10PercentSequential                        1000    ss    5     192,380 ±    62,914  us/op
d.c.fpl.Set.set10PercentSequential                       10000    ss    5    3178,800 ±   752,223  us/op

d.c.fpl.Set.setAllRandom                                     1    ss    5       9,960 ±    23,480  us/op
d.c.fpl.Set.setAllRandom                                    10    ss    5      12,800 ±     2,612  us/op
d.c.fpl.Set.setAllRandom                                   100    ss    5     101,120 ±    22,750  us/op
d.c.fpl.Set.setAllRandom                                  1000    ss    5    1197,400 ±   424,234  us/op
d.c.fpl.Set.setAllRandom                                 10000    ss    5   34427,440 ± 13207,944  us/op

d.c.fpl.Set.setAllSequential                                 1    ss    5      13,080 ±    36,818  us/op
d.c.fpl.Set.setAllSequential                                10    ss    5      13,060 ±     1,506  us/op
d.c.fpl.Set.setAllSequential                               100    ss    5      95,000 ±    27,943  us/op
d.c.fpl.Set.setAllSequential                              1000    ss    5    1117,160 ±   381,745  us/op
d.c.fpl.Set.setAllSequential                             10000    ss    5   44361,720 ±  5446,851  us/op

d.c.linked.Construct.appendAtStart                           1    ss    5      16,500 ±    51,093  us/op
d.c.linked.Construct.appendAtStart                          10    ss    5       7,680 ±    39,234  us/op
d.c.linked.Construct.appendAtStart                         100    ss    5      47,020 ±    36,083  us/op
d.c.linked.Construct.appendAtStart                        1000    ss    5      74,860 ±    60,201  us/op
d.c.linked.Construct.appendAtStart                       10000    ss    5     534,180 ±   159,951  us/op

d.c.linked.Construct.constructFromIterator                   1    ss    5      16,500 ±    48,873  us/op
d.c.linked.Construct.constructFromIterator                  10    ss    5      20,060 ±    56,219  us/op
d.c.linked.Construct.constructFromIterator                 100    ss    5      37,040 ±    62,510  us/op
d.c.linked.Construct.constructFromIterator                1000    ss    5     104,640 ±    69,065  us/op
d.c.linked.Construct.constructFromIterator               10000    ss    5     714,280 ±   313,803  us/op

d.c.linked.Consume.consumeFromStart                          1    ss    5       2,720 ±     6,440  us/op
d.c.linked.Consume.consumeFromStart                         10    ss    5       3,720 ±     0,997  us/op
d.c.linked.Consume.consumeFromStart                        100    ss    5      24,760 ±    10,914  us/op
d.c.linked.Consume.consumeFromStart                       1000    ss    5      85,680 ±    11,008  us/op
d.c.linked.Consume.consumeFromStart                      10000    ss    5     756,700 ±   130,212  us/op

d.c.linked.Consume.getAllByIterator                          1    ss    5       9,720 ±    45,269  us/op
d.c.linked.Consume.getAllByIterator                         10    ss    5       2,820 ±     0,919  us/op
d.c.linked.Consume.getAllByIterator                        100    ss    5      13,480 ±     6,526  us/op
d.c.linked.Consume.getAllByIterator                       1000    ss    5      74,320 ±    24,140  us/op
d.c.linked.Consume.getAllByIterator                      10000    ss    5     552,440 ±    62,267  us/op

d.c.linked.Consume.getAllRandomly                            1    ss    5       6,620 ±    44,304  us/op
d.c.linked.Consume.getAllRandomly                           10    ss    5       3,520 ±     1,103  us/op
d.c.linked.Consume.getAllRandomly                          100    ss    5      69,540 ±    17,630  us/op
d.c.linked.Consume.getAllRandomly                         1000    ss    5    1615,880 ±   210,820  us/op
d.c.linked.Consume.getAllRandomly                        10000    ss    5   60163,500 ±  7385,291  us/op

d.c.linked.MapAndFlatMap.flatMap                             1    ss    5      21,300 ±    56,089  us/op
d.c.linked.MapAndFlatMap.flatMap                            10    ss    5      24,400 ±     4,969  us/op
d.c.linked.MapAndFlatMap.flatMap                           100    ss    5      90,900 ±    51,757  us/op
d.c.linked.MapAndFlatMap.flatMap                          1000    ss    5     250,500 ±   157,409  us/op
d.c.linked.MapAndFlatMap.flatMap                         10000    ss    5    1875,820 ±   241,951  us/op

d.c.linked.MapAndFlatMap.flatMap100                          1    ss    5      25,540 ±     8,984  us/op
d.c.linked.MapAndFlatMap.flatMap100                         10    ss    5      78,360 ±    18,339  us/op
d.c.linked.MapAndFlatMap.flatMap100                        100    ss    5     490,980 ±   100,802  us/op
d.c.linked.MapAndFlatMap.flatMap100                       1000    ss    5    1539,220 ±   569,955  us/op
d.c.linked.MapAndFlatMap.flatMap100                      10000    ss    5  170517,980 ± 22751,995  us/op

d.c.linked.MapAndFlatMap.mapElementsToTheirDoubleValue       1    ss    5      10,240 ±    27,901  us/op
d.c.linked.MapAndFlatMap.mapElementsToTheirDoubleValue      10    ss    5      16,980 ±    17,420  us/op
d.c.linked.MapAndFlatMap.mapElementsToTheirDoubleValue     100    ss    5      43,440 ±    57,235  us/op
d.c.linked.MapAndFlatMap.mapElementsToTheirDoubleValue    1000    ss    5      86,240 ±    51,039  us/op
d.c.linked.MapAndFlatMap.mapElementsToTheirDoubleValue   10000    ss    5     560,840 ±    53,300  us/op
